---
en:
  # universal/global
  international: 繁體中文
  inverse_perpetual: Inverse Perpetual
  linear_perpetual: USDT Perpetual
  account_asset: Account Asset
  search: Search
  comment_abandoned: <b>Abandoned!!</b>
  httprequest: HTTP Request
  requestparameters: Request Parameters
  responseparameters: Response Parameters
  codequote_responseExample: Response Example
  codequote_responseExampleFormatAll: Response Example - format of all responses
  codequote_curlExample: Request Example
  codequote_subscribe: How to Subscribe
  codequote_snapshot: Snapshot Response Example - format of the first response
  codequote_delta: Delta Response Example - format of the responses following the snapshot response
  column_parameter: Parameter
  column_required: Required
  column_type: Type
  column_comments: Comment
  row_comment_userID: UserID
  row_comment_side: Side
  row_comment_symbol: Symbol
  row_comment_margin: margin
  row_comment_position_id: PositionID
  row_comment_position_idx: |
    Position idx, used to identify positions in different position modes<span>:</span> <br/>0-One-Way Mode <br/>1-Buy side of both side mode <br/> 2-Sell side of both side mode
  row_comment_position_idx_leverage: Deprecated!! Position idx
  row_comment_position_mode: Position mode
  row_comment_position_size: Position qty
  row_comment_position_value: Position value
  row_comment_entry_price: Average entry price
  row_comment_isolated: <code>true</code> means isolated margin mode; <code>false</code> means cross margin mode
  row_comment_auto_add_margin: Whether to add margin automatically
  row_comment_position_margin: Position margin
  row_comment_effective_leverage: Effective leverage
  row_comment_liq_price: Liquidation price
  row_comment_bust_price: <a href="https://help.bybit.com/hc/en-us/articles/360039749813-What-is-Bankruptcy-Price-Inverse-Contract-">Bankruptcy price</a>
  row_comment_occ_closing_fee: Position closing fee occupied (your opening fee + expected maximum closing fee)
  row_comment_occ_funding_fee: |
    Pre-occupied funding fee: calculated from position qty and current funding fee
  row_comment_take_profit: Take profit price
  row_comment_stop_loss: Stop loss price
  row_comment_trailing_stop: Trailing stop
  row_comment_position_status: |
    Position status: <code>Normal</code>, <code>Liq</code>, <code>Adl</code>
  row_comment_deleverage_indicator: Deleverage indicator level (1,2,3,4,5)
  row_comment_oc_calc_data: |
    Pre-occupied calculate parameters. <code>blq</code>: total number of the long side unsettled orders; <code>bmp</code>: the lowest price of the long side; <code>slq</code>: total number of the short side unsettled orders; <code>smp</code>: the lowest price of the short side
  row_comment_order_margin: Pre-occupied order margin
  row_comment_wallet_balance: Wallet balance
  row_comment_available_balance: Available balance = wallet balance - used margin
  row_comment_realised_pnl: Today's realised pnl
  row_comment_unrealised_pnl: unrealised pnl
  row_comment_cum_realised_pnl: Accumulated realised pnl (all-time total)
  row_comment_cross_seq: Cross sequence (internal value)
  row_comment_position_seq: Position sequence
  row_comment_cum_commission: Accumulated commission
  row_comment_trailing_active: Trailing stop active price
  row_comment_sl_trigger_by: Stop loss trigger price type
  row_comment_tp_trigger_by: Take profit trigger price type
  row_comment_leverage_result: User leverage
  row_comment_BTCUSD_leverage: BTCUSD leverage
  row_comment_EOSUSD_leverage: EOSUSD leverage
  row_comment_ETHUSD_leverage: ETHUSD leverage
  row_comment_XRPUSD_leverage: XRPUSD leverage
  row_comment_exec_fee: Transaction fee
  row_comment_exec_id: Transaction ID
  row_comment_exec_price: Transaction price
  row_comment_exec_qty: Transaction qty
  row_comment_exec_value: Transaction value
  row_comment_exec_timestamp: Transaction time
  row_comment_fee_rate: Maker or taker fee rate
  row_comment_nth_fill: The sequence of the transaction in this cross sequence data package
  row_comment_user_id: User ID
  row_comment_order_id: Order ID
  row_comment_order_price: Order price
  row_comment_order_qty: Order qty
  row_comment_trade_time: Transaction timestamp
  row_comment_coin_type: Coin type
  row_comment_risk_limit: Risk limit
  row_comment_maintain_margin: Maintain margin
  row_comment_starting_margin: Starting margin
  row_comment_section: Section
  row_comment_is_lowest_risk: |
    Is lowest risk. <code>0</code>: No; <code>1</code>: Yes
  row_comment_funding_rate: <a href="https://help.bybit.com/hc/en-us/articles/360039261114-What-is-funding-rate-and-predicted-rate-">Funding rate</a>
  row_comment_funding_rate_timestamp: <a href="https://help.bybit.com/hc/en-us/articles/360039261114-What-is-funding-rate-and-predicted-rate-">Funding rate</a> timestamp
  row_comment_funding_side: Your position side at the time of settlement
  row_comment_funding_position_size: Your position size at the time of settlement
  row_comment_funding_exec_fee: Funding fee
  row_comment_funding_exec_timestamp: Funding fee execution timestamp
  row_comment_predicted_funding_rate: <a href="https://help.bybit.com/hc/en-us/articles/360039261114-What-is-funding-rate-and-predicted-rate-">Predicted funding rate</a>
  row_comment_predicted_funding_fee: Predicted funding fee
  row_comment_api_key: API key
  row_comment_type: Key type
  row_comment_position_user_id: User ID
  row_comment_position_inviter_id: Inviter ID
  row_comment_position_ips: IP
  row_comment_note: Note
  row_comment_permissions: ApiKey permission
  row_comment_expired_at: Expire time
  row_comment_read_only: ReadOnly
  row_comment_lcp_date: Date
  row_comment_lcp_self_ratio: Deprecated! Personal effective ratio
  row_comment_lcp_platform_ratio: Deprecated! Platform effective ratio
  row_comment_lcp_score: Liquidity contribution points
  row_comment_created_at: Creation time
  row_comment_created_at_position: The account creation time
  row_comment_created_at_in_exchange: Exchange time
  row_comment_updated_at: Update time
  row_comment_margin_result: User margin
  row_comment_activeOrderType: Active order type
  row_comment_stopOrderType: Conditional order type
  row_comment_stopOrderStatus: Stop order status
  row_comment_orderStatus: Order status
  row_comment_expected_direction: Expected direction
  row_comment_op_from: Source of the request
  row_comment_remark: Remark
  row_comment_o_req_num: Used to correlate request & response
  row_comment_leaves_qty: Number of unfilled contracts from the order's size
  row_comment_leaves_value: The estimated value corresponding to the number of remaining orders
  row_comment_reject_reason: The reason the order was rejected
  row_comment_clOrdID: A unique order number of type UUID
  row_comment_create_type: Trigger scenario for single action
  row_comment_cancel_type: Trigger scenario for cancel operation
  row_comment_cross_status: The state of initiating a matchmaking request
  row_comment_ext_fields: Extension field

  row_comment_from: |
    From ID. Default: return latest data
  row_comment_limit: Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page
  row_comment_cursor: Page turning mark. Use return <code>cursor</code>. Sign using origin data, in request please use urlencode
  row_comment_resp_cursor: Page turning mark
  row_comment_limit_liq: Limit for data size, max size is 1000. Default size is 500
  row_comment_orderType: Active order type
  row_comment_qty: Order quantity in USD
  row_comment_price: Order price. <b>Required</b> if you make limit price order
  row_comment_stopOrderPrice: Execution price for conditional order. <b>Required</b> if you make limit price order
  row_comment_basePrice: It will be used to compare with the value of <code>stop_px</code>, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.
  row_comment_stopPx: Trigger price
  row_comment_timeInForce: <a href="https://help.bybit.com/hc/en-us/articles/360039749233-What-Are-Time-In-Force-TIF-GTC-IOC-FOK-">Time in force</a>
  row_comment_triggerBy: Trigger price type. Default <code>LastPrice</code>
  row_comment_tp_size: Take profit quantity (when in <a href="#t-switchmode">partial mode</a>)
  row_comment_sl_size: Stop loss quantity (when in <a href="#t-switchmode">partial mode</a>)
  row_comment_takeProfit: Take profit price, only take effect upon opening the position
  row_comment_stopLoss: Stop loss price, only take effect upon opening the position
  row_comment_trailingStop: Trailing stop
  row_comment_reduceOnly: <a href="https://help.bybit.com/hc/en-us/articles/360039260574-What-is-a-reduce-only-order-"> What is a reduce-only order?</a> True means your position can only reduce in size if this order is triggered
  row_comment_closeOnTrigger: <a href="https://help.bybit.com/hc/en-us/articles/360039260534-What-is-a-close-on-trigger-Order-">  What is a close on trigger order?</a> For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.
  row_comment_orderLinkId: Unique user-set order ID. Maximum length of 36 characters
  row_comment_page: Page. By default, gets first page of data
  row_comment_page_max50: Page. By default, gets first page of data. Maximum of 50 pages
  row_comment_order: Sort orders by creation date. Defaults to <code>desc</code>
  row_comment_stopOrderId: Conditional order ID. Once triggered, the conditional order creates an active order with the same ID (<code>order_id</code>)
  row_comment_pRQty: New order quantity. Do not pass this field if you don't want modify it
  row_comment_pRPrice: New order price. Do not pass this field if you don't want modify it
  row_comemnt_pRTriggerPrice: New conditional order's trigger price or TP/SL order price, also known as stop_px. Do not pass this field if you don't want modify it
  row_comemnt_replace_take_profit: New take_profit price, also known as stop_px. Do not pass this field if you don't want modify it
  row_comemnt_replace_stop_loss: New stop_loss price, also known as stop_px. Do not pass this field if you don't want modify it
  row_comment_leverage_old: Must be greater than 0 and less than the <a href="https://help.bybit.com/hc/en-us/articles/360039749753-What-is-Risk-Limit-What-effect-does-the-Risk-Limit-have-on-Margin-Inverse-Contract-">risk limit leverage</a>. If you need to switch to cross margin please see the <a href="#t-marginswitch">Cross/Isolated Margin Switch</a> endpoint
  row_comment_leverage_only: Use this parameter to set leverage while in cross margin mode.
    <br>If this field is set to <code>false</code>, when <code>leverage</code> is equal to <code>0</code> the position will use cross margin; when <code>leverage</code> is greater than <code>0</code> the position will use isolated margin.
    <br>If this field is set to <code>true</code>, you can set leverage in cross margin with <code>leverage</code>. <code>leverage</code> must be greater than <code>0</code>.
    <br>Use the <a href="#t-marginswitch">Cross/Isolated Margin Switch</a> endpoint to switch cross/isolated without modifying the cross level of leverage.
  row_comment_startDate: Start point for result
  row_comment_endDate: End point for result
  row_comment_currency: Currency type
  row_comment_coin_false: <code>currency</code> alias. Returns all wallet balances if not passed
  row_comment_coin: <code>currency</code> alias
  row_comment_walletFundType: Wallet fund type
  row_comment_withdrawStatus: Withdraw status
  row_comment_startTime: Start timestamp point for result, in seconds
  row_comment_endTime: End timestamp point for result, in seconds
  row_comment_startTime_ms: Start timestamp point for result, in milliseconds
  row_comment_endTime_ms: End timestamp point for result, in milliseconds
  row_comment_startTime_ms_week: Start timestamp point for result, in milliseconds. Timestamp must be within seven days of the current date. For earlier records, please contact customer support
  row_comment_endTime_ms_week: End timestamp point for result, in milliseconds. Timestamp must be within seven days of the current date. For earlier records, please contact customer support
  row_comment_riskId: <a href="#t-getrisklimit">Risk ID</a>
  row_comment_closed_size: The corresponding closing size of the closing order
  row_comment_rate_limit: Limit
  row_comment_path: Path
  row_comment_consume: Consume
  row_comment_interval: Data refresh interval. Enum <span>:<span> 1 3 5 15 30 60 120 240 360 720 "D" "M" "W"
  row_comment_from_timestamp: From timestamp in seconds
  row_comment_limit_200: Limit for data size per page, max size is 200. Default as showing 200 pieces of data per page
  row_comment_limit_100: Limit for data size per page, max size is 100. Default as showing 50 pieces of data per page
  row_comment_limit_50_200: Limit for data size per page, max size is 200. Default as showing 50 pieces of data per page
  row_comment_limit_50_500: Limit for data size per page, max size is 500. Default as showing 50 pieces of data per page
  row_comment_period: Data recording period. <code>5min</code>, <code>15min</code>, <code>30min</code>, <code>1h</code>, <code>4h</code>, <code>1d</code>
  row_comment_last_exec_time: Last execution time
  row_comment_last_exec_price: Last execution price
  row_comment_orig_order_type: Original special order type
  row_comment_prior_x_req_price: Expected match price
  row_comment_xreq_type:  Request type
  row_comment_is_maker: Is maker
  row_comment_order_type: Order type
  row_comment_exec_type: Exec type
  row_comment_open: Starting price
  row_comment_high: Maximum price
  row_comment_low: Minimum price
  row_comment_close: Closing price
  row_comment_timestamp: Commission time
  row_comment_resp_price: Order price
  row_comment_resp_size: Symbol contracts
  row_comment_resp_open_time: Starting time
  row_comment_resp_volume: Trading volume
  row_comment_resp_turnover: Transaction amount
  row_comment_resp_bid_price: Purchase price of the first order
  row_comment_resp_ask_price: Selling price of the first order
  row_comment_resp_last_price: Latest transaction price
  row_comment_resp_last_price_e4: (Deprecated) Latest transaction price 10^4
  row_comment_resp_prev_price_24h: Price of 24 hours ago
  row_comment_resp_prev_price_24h_e4: (Deprecated) Price of 24 hours ago * 10^4
  row_comment_resp_price_24h_pcnt: Percentage change of market price relative to 24h
  row_comment_resp_price_24h_pcnt_e4: Percentage change of market price relative to 24h * 10^4
  row_comment_resp_high_price_24h: The highest price in the last 24 hours
  row_comment_resp_high_price_24h_e4: (Deprecated) The highest price in the last 24 hours * 10^4
  row_comment_resp_low_price_24h: Lowest price in the last 24 hours
  row_comment_resp_low_price_24h_e4: (Deprecated) Lowest price in the last 24 hours * 10^4
  row_comment_resp_prev_price_1h: Hourly market price an hour ago
  row_comment_resp_prev_price_1h_e4: (Deprecated) Hourly market price an hour ago * 10^4
  row_comment_resp_price_1h_pcnt: Percentage change of market price relative to 1 hour ago
  row_comment_resp_price_1h_pcnt_e6: Percentage change of market price relative to 1 hour ago * 10^6
  row_comment_resp_mark_price: Mark price
  row_comment_resp_mark_price_e4: (Deprecated) Mark price * 10^4
  row_comment_resp_index_price: Index_price
  row_comment_resp_index_price_e4: (Deprecated) Index_price * 10^4
  row_comment_resp_open_interest: Open interest
  row_comment_resp_open_interest_e8: Open interest * 10^8
  row_comment_resp_open_value: Open position value
  row_comment_resp_open_value_e8: Open position value * 10^8
  row_comment_resp_total_turnover: Total turnover
  row_comment_resp_total_turnover_e8: Total turnover * 10^8
  row_comment_resp_turnover_24h: Turnover for 24H
  row_comment_resp_turnover_24h_e8: Turnover for 24H * 10^8
  row_comment_resp_total_volume: Total volume
  row_comment_resp_total_volume_e8: Total volume * 10^8
  row_comment_resp_volume_24h: Trading volume in the last 24 hours
  row_comment_resp_volume_24h_e8: Trading volume in the last 24 hours * 10^8
  row_comment_resp_funding_rate: <a href="https://help.bybit.com/hc/en-us/articles/360039261114-What-is-funding-rate-and-predicted-rate-">Funding rate</a>
  row_comment_resp_funding_rate_e6: <a href="https://help.bybit.com/hc/en-us/articles/360039261114-What-is-funding-rate-and-predicted-rate-">Funding rate</a> * 10^8
  row_comment_resp_predicted_funding_rate: <a href="https://help.bybit.com/hc/en-us/articles/360039261114-What-is-funding-rate-and-predicted-rate-">Predicted funding rate</a>
  row_comment_resp_funding_rate_e6: <a href="https://help.bybit.com/hc/en-us/articles/360039261114-What-is-funding-rate-and-predicted-rate-">Funding rate</a> * 10^6
  row_comment_resp_predicted_funding_rate_e6: <a href="https://help.bybit.com/hc/en-us/articles/360039261114-What-is-funding-rate-and-predicted-rate-">Predicted funding rate</a> * 10^6
  row_comment_resp_next_funding_time: Next settlement time of capital cost
  row_comment_resp_countdown_hour: Countdown of settlement capital cost
  row_comment_bid1_price_e4: (Deprecated) Best bid price * 10^4
  row_comment_ask1_price_e4: (Deprecated) Best ask price * 10^4
  row_comment_bid1_price: Best bid price
  row_comment_ask1_price: Best ask price
  row_comment_resp_delivery_fee_rate: Delivery fee rate of Futures contract
  row_comment_resp_predicted_delivery_price: Predicted delivery price of Futures contract
  row_comment_resp_delivery_time: Delivery time of Futures contract
  row_comment_resp_update_time: Update time
  row_comment_confirm: Is confirm
  row_comment_resp_trade_time_ms: Transaction time (ms)
  row_comment_resp_trade_id: Trade ID
  row_comment_time_stamp: Timestamp
  row_comment_open_interest: Number of contracts in open interest
  row_comment_value: Value of the order
  row_comment_limit_500_1000: Limit for data size per page, max size is 1000. Default as showing 500 pieces of data per page
  row_comment_buy_ratio: Long position ratio
  row_comment_sell_ratio: Short position ratio

  row_response_comment_price: Order price
  row_response_comment_qty: Order quantity in USD
  row_response_comment_basePrice: Market price at placing order
  row_response_comment_triggerBy: Trigger price type
  row_response_comment_orderLinkId: Customised order ID
  row_response_comment_id: Latest data ID
  row_response_comment_execprice: Execution price
  row_response_comment_time: UTC time
  row_response_comment_execqty: Order quantity in USD
  row_response_comment_liq_execqty: Order quantity
  row_response_comment_name: Symbol name
  row_response_comment_alias: Symbol alias
  row_response_comment_status: <a href="#contract-status-status">Symbol status</a>
  row_response_close_on_trigger: Is close on trigger order
  row_response_comment_base_currency: Base currency
  row_response_comment_quote_currency: Quote currency
  row_response_comment_price_scale: Price scale (how many decimal places the price of a symbol has)
  row_response_comment_taker_fee: Taker fee
  row_response_comment_maker_fee: Maker fee
  row_response_comment_leverage_filter: Leverage filter
  row_response_comment_min_leverage: Min leverage
  row_response_comment_max_leverage: Max leverage
  row_response_comment_leverage_step: Leverage step
  row_response_comment_price_filter: Price filter
  row_response_comment_min_price: Min price
  row_response_comment_max_price: Max price
  row_response_comment_tick_size: Tick size
  row_response_comment_lot_size_filter: Trading quantity info
  row_response_comment_max_trading_qty: Max trading quantity
  row_response_comment_min_trading_qty: Min trading quantity
  row_response_comment_qty_step: Qty step
  row_response_comment_nill_time: Millisecond timestamp
  row_response_comment_trade_id: Trade ID
  row_response_comment_given_cash: Experience gold
  row_response_comment_service_cash: Service cash is used for user's service charge
  row_comment_equity: User equity
  row_comment_used_margin: Used margin
  row_comment_position_tick_direction: Direction of price change
  row_comment_from_coin: Exchange from coin
  row_comment_to_coin: Exchange to coin
  row_comment_to_amount: Exchange to amount
  row_comment_from_fee: Exchange fee in `from_coin` unit
  row_comment_from_amount: Exchange from amount
  row_comment_exchange_rate: Exchange exchange rate
  row_comment_fund_type: Fund type
  row_comment_fund_amount: Fund amount
  row_comment_tx_id: Transaction hash ID
  row_comment_address: Address
  row_comment_submited_at: Submit time
  row_response_liq_record_side: Liquidated position's side
  row_comment_max_leverage: Max leverage
  request_disable: This endpoint is no longer recommended!



  row_parameter_tp_trigger_by: <a href="#trigger-price-type-trigger_by">tp_trigger_by</a>
  row_parameter_sl_trigger_by: <a href="#trigger-price-type-trigger_by">sl_trigger_by</a>
  row_parameter_symbol: <a href="#symbol-symbol">symbol</a>
  row_parameter_side: <a href="#side-side">side</a>
  row_parameter_tp_sl_mode:  <a href="#tp-sl-mode-tp_sl_mode">tp_sl_mode</a>
  row_parameter_order_type: <a href="#order-type-order_type">order_type</a>
  row_parameter_quantity: <a href="#quantity-qty">qty</a>
  row_parameter_price: <a href="#price-price">price</a>
  row_parameter_time_in_force: <a href="#time-in-force-time_in_force">time_in_force</a>
  row_parameter_order_status: <a href="#order-status-order_status">order_status</a>
  row_parameter_trigger_price: <a href="#trigger-price-type-trigger_by">trigger_by</a>
  row_parameter_stop_order: <a href="#stop-order-status-stop_order_status">stop_order_status</a>
  row_parameter_order: <a href="#order-order">order</a>
  row_parameter_exec_type: <a href="#exec-type-exec_type">exec_type</a>
  row_parameter_last_liquidity_ind: <a href="#liquidity-type-last_liquidity_ind">last_liquidity_ind</a>
  row_parameter_tick_direction: <a href="#tick-direction-type-tick_direction">tick_direction</a>
  row_parameter_stop_order_type: <a href="#stop-order-type-stop_order_type">stop_order_type</a>

  # Spot enum parameter table links
  row_parameter_type: <a href="#order-type-type-ordertypes">type</a>
  row_parameter_timeInForce: <a href="#timeinforce-timeinforce">timeInForce</a>
  spot_row_parameter_orderStatus: <a href="#order-status-status">status</a>


  enum_withdraw_status_link: <a href="#withdraw-status-status">Withdraw Status Enum</a>
  enum_coin_link: <a href="#currency-currency-coin">Coin Enum</a>
  enum_side_link: <a href="#side-side">Side Enum</a>
  enum_symbol_link: <a href="#symbol-symbol">Symbol Enum</a>
  enum_contract_type_link: <a href="#contract-type-contract_type">Contract Type Enum</a>
  enum_order_type_link: <a href="#order-type-order_type">Order Type Enum</a>
  enum_exec_type_link: <a href="#exec-type-exec_type">Exec Type Enum</a>
  enum_Liquidity_type_link: <a href="#liquidity-type-last_liquidity_ind">Liquidity Enum</a>, only valid while <code>exec_type</code> is <code>Trade, AdlTrade, BustTrade</code>
  enum_stop_order_status_link: <a href="#stop-order-status-stop_order_status">Stop Order Status</a>
  stop_order_trigger_price: If <code>stop_order_type</code> is <code>TrailingProfit</code>, this field is the trailing stop active price.
  errorcode_meaning: Meaning
  resp_field_leverage: In Isolated Margin mode, the value is set by user. In Cross Margin mode, the value is the max leverage at current risk level
  resp_field_effective_leverage: Effective Leverage.
    In Isolated Margin mode, its value equals `leverage`;
    In Cross Margin mode, The formula to calculate<span>:</span>

    <code>effective_leverage = position size / mark_price / (wallet_balance + unrealised_pnl)</code>
  row_comment_slow_update: The update is not immediate - slowest update is 1 minute

  resp_field_position_list: |
    When <code>symbol</code> is not passed, the response uses a different structure:
  resp_field_order_list: |
    When only <code>symbol</code> is passed, the response uses a different structure:
  resp_field_position_list_valid: represents whether the current data is valid
  resp_field_position_list_data: the data can only be used when <code>is_valid</code> is <b>true</b>
  row_comment_from_id: Start ID. By default, returns the latest IDs
  row_comment_direction: |
    Search direction. <code>Prev</code>: searches in ascending order from start ID, <code>Next</code>: searches in descending order from start ID. Defaults to <code>Next</code>
  row_comment_cursor_direction: |
    Search direction. <code>prev</code>: prev page, <code>next</code>: next page. Defaults to <code>next</code>

  # introduction in index.html.md
  introduction: Group And Resources
  intro_para:
    <p><a href="https://www.bybit.com/">Bybit</a> API and WebSocket documentation provides guidance to help you access Bybit's endpoints, their expected outputs, and common errors.</p>
    <p>For further assistance or feedback, please join the <a href="https://t.me/BybitAPI">API Telegram chat</a>! API discussion group on Telegram.</p>

  resources: Group And Bybit API Resources
  spot_resources: API Resources and Support Channels
  intro_para_resources:
    <ul class="bybit-community">
    <li><img src="/images/help_favicon.ico" height="14", width="14"> <a href="https://help.bybit.com/hc/en-us"><strong>Help Center</strong></a> - <strong>Learn more about exchange mechanisms here!</strong>
    <li><img src="/images/telegram_logo_icon.png" height="14", width="14"></a> <a href="https://t.me/BybitAPI"><strong>API Discussion Group</strong></a> - <strong>get English help here!</strong>
    <li><img src="/images/telegram_logo_icon.png" height="14", width="14"> <a href="https://t.me/BybitChineseAPI"><strong>API Discussion Group (Chinese)</strong></a> - <strong>get Chinese help here!</strong>
    <li><img src="/images/telegram_logo_icon.png" height="14", width="14"> <a href="https://t.me/Bybit_API_Announcements"><strong>Bybit API Announcement </strong></a> - <strong>subscribe for changes to the API!</strong>
    </ul>

  shared_endpoint_desc: Please see the shared endpoint.

  # Changelog
  # if some missing values - they already have values elsewhere
  changelog: Changelog
  changelog_new: new
  changelog_update: update
  changelog_delete: abandoned
  changelog_bugfix: bugfix
  ## 2020-04-10
  bugfix_20200410: Change market api curl example URL
  # just fix chinese part doc, so english changelog is empty
  bugfix1_20200409: refine chinese doc
  ## 2020-03-31
  bugfix1_20200331: Fix incorrect balance of <code>USDT</code>
  ## 2020-03-26
  trailing_stop_20200326: Add trigger price <code>new_trailing_active</code> for trailing stop order.
  ## 2020-03-16
  position_20200316: Add field <code>effective_leverage</code> in response
  bugfix1_20200316: Fix value of field <code>equity</code> of <code>USDT</code>
  ## 2020-02-26
  update_20200226: Remove <code>trailing_stop</code> field from parameters of place order endpoint. Currently, this field is useless.
  ## 2020-02-10
  replaceActive1_20200210: Add <code>order_id</code> in response
  replaceCond1_20200210: Add <code>stop_order_id</code> in response
  replaceCond2_20200210: Add a new request parameter <code>stop_order_id</code> to replace <code>order_id</code> for consistency
  bugfix1_20200210: Fix value of <code>rate_limit_reset_ms</code> in V2 private endpoints' response from <code>microseconds</code> to <code>millisecond</code>, be consistent with V1 endpoint
  ## 2019-12-27 20191227
  ## 2019-12-18 20191218
  ## 2019-12-13 20191213
  ## 2019-12-02 20191202
  ## 2019-11-19 20191119
  ## 2019-11-07 20191107
  my_20191107: My position
  ## 2019-11-04 20191104
  cancelOrder_20191104: Cancel order
  cancelOrder__20191104: Support cancel order by <code>order_link_id</code>
  cancelCond__20191104: Support cancel conditional order by <code>order_link_id</code>
  get__20191104: Add extra info
  get___20191104: Update <code>ips</code> field to return content
  update_20191104: Update REST API rate limit
  update__20191104: The rate limit is accurate to milliseconds
  update___20191104: Refine the rate limit of the endpoints
  update____20191104: |
    Add new response fields: <code>rate_limit_reset_ms</code>, <code>rate_limit</code>
  ## 2019-10-22 20191022
  position__20191022: Add extra info, eg. wallet_balance
  trade__20191022: Fix issue of sometimes push same trade multi times
  trade___20191022: Support pushing multi trades in single message
  trade___20200302: Add new field <code>trade_time_ms</code>
  apikey_20200309: Add <code>inviter_id</code> in response
  usertraderecords_20200309: Symbol is require

  # FAQ
  faq: FAQ
  ## <code>reduce_only</code> and <code>close_on_trigger</code> - what's the difference?
  faq_reduce_only: <code>reduce_only</code> and <code>close_on_trigger</code> - what's the difference?
  faq_reduce_only_para: |
    <ul>
      <li><a href="https://help.bybit.com/hc/en-us/articles/360039260574-What-is-a-reduce-only-order-"><code>reduce_only</code></a> ensures the order may only reduce the size of your position at the point of execution.</li>
      <li><a href="https://help.bybit.com/hc/en-us/articles/360039260534-What-is-a-close-on-trigger-Order--"><code>close_on_trigger</code></a> ensures the order executes to (fully or partially) close/reduce your position,</li>
      <ul>
        <li>Avoids a potential insufficient margin error by cancelling other open orders (if required.)</li>
        <li>Linear (USDT) markets - Used to indicate whether an order is opening or closing a position.</li>
      </ul>
      <li>It is possible to use both options (<code>reduce_only</code> and <code>close_on_trigger</code>) simultaneously.</li>
    </ul>

  ## Why aren't all my orders showing on the website?
  faq_website_orders: Why aren't all my orders showing on the website?
  faq_website_orders_para: |
    <ul>
      <li>Users who have bots which place large numbers of laddered orders will be restricted by the frontend interface, which only shows a maximum of 50 orders on-screen.</li>
      <li>Don't worry, your orders are still in the system and can be queried by the API, but the frontend cannot show more than 50.</li>
    </ul>

  ## Calculating order size based on available wallet balance
  faq_calculating_order_size: Calculating order size based on available wallet balance
  faq_calculating_order_size_para: |
    <ul>
      <li><code>price * available_balance * leverage * perc * (1 - (0.00075 * 2))</code></li>
      <li>Unfortunately this is not a perfectly accurate formula; the real calculation is complex and may be published in the docs at a later date.</li>
      <ul>
        <li><code>price</code> - last price (or your entry price) - can be found with the <a href="#t-latestsymbolinfo">Latest Symbol Info endpoint</a>.</li>
        <li><code>available_balance</code> - can be found with the <a href="#t-myposition">My Position endpoint</a>.</li>
        <li><code>leverage</code> - up to the respective maximum leverage for the market and your risk limit (eg 2, 10, 50).</li>
        <li><code>perc</code> - 0.1 for 10%, 0.25 for 25%, etc.</li>
        <li><code>1 - (0.00075 * 2)</code> - used to calculate the maximum order cost (always assumes entry &amp; exit orders use taker fee regardless actual fee).</li>
      </ul>
    </ul>

  ## Can I exchange assets with the API?
  faq_exchange_assets: Can I exchange assets with the API?
  faq_exchange_assets_para: |
    <ul>
      <li>There is no endpoint to exchange assets. This can only be done on the <a href="https://testnet.bybit.com/app/assets/assets-exchange">website</a>.</li>
      <li>However, it is possible to access your <a href="#t-assetexchangerecords">Asset Exchange Records</a> with the API.</li>
    </ul>

  ## Where are Bybit's servers located?
  faq_server_location: Where are Bybit's servers located?
  faq_server_location_para: |
    AWS Singapore, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones">Availability Zone ID</a> apse1-az3.

  ## How do I get funds for testnet?
  faq_testnet_funds: How do I get funds for testnet?
  faq_testnet_funds_para: |
    To get testnet funds, please contact the website's customer support using the yellow support button <a href="https://testnet.bybit.com">shown in the bottom-right corner</a>.

  ## Why are my Closed PNL prices inaccurate?
  faq_closed_pnl_price: Why are my Closed PNL prices inaccurate?
  faq_closed_pnl_price_para: |
    <ul>
      <li>The <code>entry_price</code> and <code>exit_price</code> returned by Closed PNL endpoints are not the actual execution prices of the orders.
      <li>It is based on the total costs of the order
      <ul>
        <li>(whether or not the position was only opened/closed by one order executed at one price - it is more complicated if multiple orders opened/closed a position.)</li>
      </ul>
      <li>For instance, the <code>entry_price</code> and <code>exit_price</code> reported by this endpoint are influenced by the fee paid/received on the orders.</li>
    </ul>

  ## Why are values returned to too many decimal places? (float precision issue)
  faq_float_precision: Why are values returned to too many decimal places? (float precision issue)
  faq_float_precision_para: |
    <ul>
      <li>For example, you received <code>11.969999</code> but you expected <code>11.97</code>.
      <li>Some values are returned to too many decimal places, or a fraction too high or low, due to a float precision problem.</li>
      <li>For now, we recommend rounding the received value to the correct decimal place. This can be done with reference to the <a href="#t-querysymbol">Query Symbol</a> endpoint.</li>
      <li>This issue will be fixed in the next major version of the API; unfortunately, it is not fixable in the short-term.</li>
    </ul>


  # api_auth
  # t(:authentication)
  authentication: Authentication
  auth_aside_key: Please visit Bybit's <a href="https://testnet.bybit.com/app/user/api-management"> <b>testnet</b></a> or <a href="https://www.bybit.com/app/user/api-management"> <b>mainnet</b></a> to generate an API key
  auth_aside_env: |
    REST Base Endpoint:
     <ul>
      <p>
        <li>Testnet:<br/>
          <span id="testnet">https://api-testnet.bybit.com</span>
          <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        </li>
      </p>
      <p>
        <li>Mainnet(both endpoints are available):<br/>
          <span id="mainnet_1">https://api.bybit.com</span>
          <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_1"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
          <br/>
          <span id="mainnet_2">https://api.bytick.com</span>
          <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        </li>
      </p>
     </ul>
  spot_auth_aside_env: |
    REST Base Endpoint:
     <ul>
      <p>
        <li>Testnet:<br/>
          <span id="testnet">https://api-testnet.bybit.com</span>
          <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        </li>
      </p>
      <p>
        <li>Mainnet (please choose one based on your network status):<br/>
          <span id="mainnet_1">https://api.bybit.com</span>
          <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_1"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
          <br/>
          <span id="mainnet_2">https://api.bytick.com</span>
          <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        </li>
      </p>
     </ul>
  auth_para_domains: |
    Domains:
    <ul>
      <li>
        <span id=testnet><a href="https://api-testnet.bybit.com">https://api-testnet.bybit.com</a></span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
      <li>
        <span id=mainnet><a href="https://api.bybit.com">https://api.bybit.com</a></span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </ul>
  auth_para_privatepublic:
    <p>All requests made to private endpoints must be authenticated. Requests made to public endpoints do not require additional authentication.</p>

  ## Parameters for Authenticated Endpoints
  authenticationparameters: Parameters for Authenticated Endpoints
  auth_para_params: |
    The following parameters must be used for authentication:
    <ul>
      <li><b>api_key</b></li>
      <li><b>timestamp</b> - UTC timestamp in <b>milliseconds</b></li>
      <li><b>sign</b> - a signature derived from the request's parameters</li>
    </ul>
  auth_aside_timestamp: |
    Please make sure that the timestamp parameter adheres to the following rule: server_time - recv_window <= timestamp < server_time + 1000; server_time stands for Bybit server time, which can be queried via the <a href="#t-servertime">Server Time</a> endpoint.
  auth_para_recv: |
    <p>We also provide <code>recv_window</code> (unit in millisecond and default value is 5,000) to specify how long an HTTP request is valid. It is also used to prevent replay attacks.</p>
    <p>A smaller <code>recv_window</code> is more secure, but your request may fail if the transmission time is greater than your <code>recv_window</code>.</p>
    <p>Please make sure that your <code>timestamp</code> is in sync with our server time. You can use the <a href=#t-servertime>Server Time</a> endpoint.</p>
  spot_auth_aside_timestamp: |
    Please make sure that the timestamp parameter adheres to the following rule: serverTime - recvWindow <= timestamp < serverTime + 1000; serverTime stands for Bybit server time, which can be queried via the <a href="#t-servertime">Server Time</a> endpoint.

  spot_auth_para_recv: |
    <p>We also provide <code>recvWindow</code> (unit in millisecond and default value is 5,000) to specify how long an HTTP request is valid. It is also used to prevent replay attacks.</p>
    <p>A smaller <code>recvWindow</code> is more secure, but your request may fail if the transmission time is greater than your <code>recvWindow</code>.</p>
    <p>Please make sure that your <code>timestamp</code> is in sync with our server time. You can use the <a href=#t-servertime>Server Time</a> endpoint.</p>
  ## Constructing the Request
  constructingtherequest: Create A Request
  auth_codequote_construct1a:
    An example for adjusting leverage
  auth_codequote_construct1b:
    Note how the parameters are ordered in <b>alphabetical</b> order, with api_key first followed by leverage, then symbol, then timestamp.
  auth_codequote_construct2: |
    Different requests need different message formats. Message format for <b>GET</b> requests:
  auth_codequote_construct3: |
    Message format for <b>POST</b> requests:
  auth_para_construct1:
    <p>1. Concatenate all the public parameters in the <a href="https://en.wikipedia.org/wiki/Query_string">query string</a> format. The parameters must be ordered in <b>alphabetical</b> order. This will be used to generate the <code>sign</code>.</p>
  auth_para_construct2:
    <p>2. Use the HMAC_SHA256 algorithm to sign the query string in step 1, and convert it to a hex string to obtain the sign parameter.</p>
  auth_para_construct3:
    <p>3. Append the sign parameter to the end of the parameters string, and send the HTTP request. Note that the message format for GET and POST requests is different. Please refer to the examples.</p>
  auth_aside_signature:
    Example signature algorithms can be found <a href="https://github.com/bybit-exchange/api-connectors/tree/master/encryption_example">here</a>.
  spot_auth_aside_signature:
    Examples of signing algorithms can be found <a href="https://github.com/bybit-exchange/api-connectors/tree/master/encryption_example">here</a>.
  spot_auth_codequote_construct1a:
    An example for balance query
  spot_auth_codequote_construct1b:
    Note how the parameters are ordered in <b>alphabetical</b> order, with api_key first followed by timestamp.

  # Market Data Endpoints
  marketdata: Market Data Endpoints
  market_para_auth: The following market data endpoints do not require authentication.


  ### Orderbook
  orderbook: Order Book
  market_para_orderbook: Get the orderbook. Each side has a depth of 50.
  market_aside_orderbook: The response is in the snapshot format.
  ### Query Kline
  querykline: Query Kline
  market_para_querykline: Get kline.
  ### Query Index Price Kline
  queryindexpricekline: Query Index Price Kline
  ### Query Premium Index Kline
  querypremiumindexkline: Query Premium Index Kline
  linear_market_para_querykline: |
    <p>Get kline.</p>
    <p>For mark price klines, see the <a href="#t-markpricekline">Mark Price Kline</a> endpoint.</p>
  ### Latest Information for Symbol
  latestsymbolinfo: Latest Information for Symbol
  market_para_symbol: Get the latest information for symbol.
  ### Public Trading Records
  publictradingrecords: Public Trading Records
  market_para_records: Get recent trades. You can find a complete history of trades on Bybit <a href="https://public.bybit.com">here</a>.
  ### Get the Last Funding Rate
  fundingRate: Get the Last Funding Rate
  market_para_fundingRate: The funding rate is generated every 8 hours at 00:00 UTC, 08:00 UTC and 16:00 UTC. For example, if a request is sent at 12:00 UTC, the funding rate generated earlier that day at 08:00 UTC will be sent.
  ### Query Symbol
  querysymbol: Query Symbol
  market_para_querySymbol: Get symbol info.
  ### Query Liquidated Orders
  query_liqrecords: Liquidated Orders
  market_para_query_liqrecords: Retrieve the liquidated orders, The query range is the last seven days of data.

  ### Advanced data
  advanceddata: Advanced Data
  market_para_advanceddata: Get Advanced Data.
  #### Market Funding Rate
  marketfundingrate: Get Funding Rate
  market_para_marketfundingrate: Get Bybit's recent funding rates.
  #### Market Open Interest
  marketopeninterest: Open Interest
  market_para_marketopeninterest: Gets the total amount of unsettled contracts. In other words, the total number of contracts held in open positions.
  #### Market Account Ratio
  marketaccountratio: Long-Short Ratio
  market_para_marketaccountratio: Gets the Bybit user accounts' long-short ratio.
  #### Market Account Ratio
  marketeliteratio: Top Trader Account Long-Empty Ratio
  market_para_marketeliteratio: Gets the Bybit top trader account long-empty ratio
  #### Market Big Deal
  marketbigdeal: Latest Big Deal
  market_para_marketbigdeal: |
    <p>Obtain filled orders worth more than 500,000 USD within the last 24h.</p>
    <p>This endpoint may return orders which are over the maximum order qty for the symbol you call. For instance, the maximum order qty for BTCUSD is 1 million contracts, but in the event of the liquidation of a position larger than 1 million this endpoint returns this "impossible" order size.</p>


  # Abandoned Endpoints
  abandonedendpoints: Abandoned Endpoints

  # Account Data Endpoints
  accountdata: Account Data Endpoints
  account_para: The following account data endpoints require authentication.
  ## Active Orders
  activeorders: Active Orders
  account_para_placeActive: |
    <p>Market price active order: A traditional market price order which will be filled at the best available price. <code>price</code> is not required for this type of order.
    <b>To protect market order from excessive slippage, Bybit converts a market order into a limit order with a spread. A market buy order is converted into a limit order at a higher than best ask price; a market sell order is converted into a limit order at a lower than best bid price.
       The converted limit price and executed price are both available in trade history.</b>.</p>
    <p>Limit price active order: You can set an execution price for your order. Only when the last traded price reaches the order price will the system will fill your order.</p>
    <p><b>Take profit/Stop loss: You may only set a TP/SL conditional order upon opening the position. Once you hold a position, any new active order requests which contain TP/SL data will be accepted but the TP/SL data will be ignored. <code>tp_trigger_by</code>/<code>sl_trigger_by</code> default to LastPrice. Passing values to the <code>take_profit</code> or <code>stop_loss</code> parameters in this endpoint will create conditional orders managed by the system, which will be be automatically cancelled if the position is closed.</b></p>
    <p>Order quantity: This parameter indicates the quantity of perpetual contracts you want to buy or sell. All USD markets have a contract size of 1 USD. See more</p>
    <p>Order price: If it is a conditional order, this parameter is required. When there is no position, the long commission price should be 10% higher than the market price and less than 1 million. If there are positions, they need to be better than strong parity. For the minimum unit of price increase or decrease, please refer to the price_filter field in the <a href="#t-querysymbol">Query Symbols</a> endpoint. This must modulo by 0.5 (20 and 21.5 are accepted, but 16.1 or 16.15 are not).</p>
    <p>Custom order ID: You may customise order IDs for active orders. We will link it to the system order ID, and return the unique system order ID to you after the active order is created successfully. You may use this order ID or your custom order ID to cancel your active order. The customised order ID should be unique, with a maximum length of 36 characters.</p>
    <p><b>Each account can hold up to 500 active orders yet to be filled entirely simultaneously. This is per instrument, so it's possible to have, for example, 300 active orders on the BTCUSD instrument and 280 active orders on the ETHUSD instrument.</b></p>
  ### Get Active Order
  getactive: Get Active Order
  a_getactive: Get Active Order
  account_para_getActive: |
    <p>Get my active order list.</p>
    <p>Because order creation/cancellation is asynchronous, there can be a data delay in this endpoint. You can get real-time order info with the <a href="#t-queryactive">Query Active Order (real-time)</a> endpoint.</p>
  account_row_comment_orderId: Order ID
  account_row_comment_orderStatus: Queries orders of all statuses if <code>order_status</code> not provided. If you want to query orders with specific statuses, you can pass the order_status split by ',' (eg <code>Filled,New</code>).
  account_row_comment_req_orderStatus: Queries orders of all statuses if <code>order_status</code> is not provided
  account_row_comment_stopOrderStatus: Queries orders of <code>Untriggered</code>,<code>Active</code>,<code>Deactivated</code> statuses if <code>stop_order_status</code> not provided. If you want to query orders with specific statuses, you can pass the stop_order_status split by ',' (eg <code>Untriggered,Active</code>)
  account_row_comment_req_stopOrderStatus: Queries orders of all statuses if 'stop_order_status' not provided
  ### Cancel Active Order V2
  cancelactive: Cancel Active Order
  account_para_cancelActive: |
    <p>Either <code>order_id</code> or <code>order_link_id</code> are required for cancelling active orders. <code>order_id</code> - this unique 36 characters order ID was returned to you when the active order was created successfully.</p>
    <p>You may cancel active orders that are unfilled or partially filled. Fully filled orders cannot be cancelled.</p>
  ### Cancel All Active Orders
  cancelallactive: Cancel All Active Orders
  account_para_cancelAllActive: |
    <p>Cancel all active orders that are unfilled or partially filled. Fully filled orders cannot be cancelled.</p>
  ### Replace Active Order
  replaceactive: Replace Active Order
  a_replaceactive: Replace Active Order
  account_para_replaceActive: |
    <p>Replace order can modify/amend your active orders.</p>
    <p><code>p_r_qty</code> and <code>p_r_price</code> are the modified price and quantity. If these two fields are not provided, nothing will be modified.</p>

  account_aside_replaceActive:
    Please note that only orders that are unfilled or partially filled can be modified by the replace-order API.
  ### Query Active Order (real-time)
  queryactive: Query Active Order (real-time)
  account_para_queryActive: Query real-time active order information. If only <code>order_id</code> or <code>order_link_id</code> are passed, a single order will be returned; otherwise, <b>returns up to <a href="#t-orderlimits">500</a> unfilled orders</b>.

  a_getrisklimit: Get risk limit
  a_setrisklimit: Set Risk Limit
  ## Conditional Orders
  conditionalorders: Conditional Orders
  ### Place Conditional Order
  placecond: Place Conditional Order
  a_placecond: Place Conditional Order
  account_para_placeCond: |
    <p>Market price conditional order: A traditional market price order, will be filled at the best available price. <code>price</code> is not required for this type of order.</p>
    <p>Limit price conditional order: You can set an execution price for your order. Only when the last traded price reaches the order price will the system will fill your order.</p>
    <p>Take profit/Stop loss: You may only set a take-profit/stop-loss conditional order upon opening the position. Once you hold a position, the take profit and stop loss information you sent when placing an order will no longer be valid.</p>
    <p>Order quantity: This parameter indicates the quantity of perpetual contracts you want to buy or sell, currently Bybit only support order quantity in an integer.</p>
    <p>Order price: If it is a stop order, this parameter is required. When there is no position, the long commission price should be 10% higher than the market price and less than 1 million. If there are positions, they need to be better than strong parity. For the minimum unit of price increase or decrease, please refer to the price_filter field in the <a href="#t-querysymbol">Query Symbols</a> endpoint.</p>
    <p>Conditional order trigger price: You may set a trigger price for your conditional order. conditional order will not enter the order book until the last price hits the trigger price. When last price hits trigger price: 1) your limit conditional order will enter order book, and wait to be executed; 2) your market conditional order will be executed immediately at the best available market price.</p>
    <p>Customize conditional order ID: You may customize order IDs for active orders. We will link it to the system order ID , and return the unique system order ID to you after the active order is created successfully. You may use this order ID to cancel your active order. The customized order ID is asked to be unique, with a maximum length of 36 characters.</p>

  account_aside_placeCond:
    Take profit/Stop loss is not supported in placing conditional orders. One can only use these 2 functions when placing active orders. Moreover, each account can hold up to 10 conditional orders yet to be filled entirely simultaneously.
  account_aside_placeCond_linear: |
    Each account can hold up to 10 conditional orders yet to be filled entirely simultaneously.

  account_aside_placeActive_linear_warn: |
    Please note:
    <ul>
      <li><code>ret_code</code>=0 and <code>ext_code</code>="" means create order success</li>
      <li><code>ret_code</code>=0 and <code>ext_code</code>!="" means create order success but some parameters were not set correctly</li>
      <li><code>ret_code</code>!=0 means create order fail</li>
      <li><code>ext_code</code> means please refer to <a href="#t-errors">Errors</a></li>
    </ul>

  ### Get Conditional Order
  getcond: Get Conditional Order
  a_getcond: Get Conditional Order
  account_para_getCond:
    <p>Get my conditional order list.</p>
    <p>Because order creation/cancellation is asynchronous, there can be a data delay in this endpoint. You can get real-time order info with the <a href="#t-querycond">Query Conditional Order (real-time)</a> endpoint.</p>
  ### Cancel Conditional Order
  cancelcond: Cancel Conditional Order
  a_cancelcond: Cancel Conditional Order
  account_para_cancelCond: |
    <p>You may cancel all untriggered conditional orders or take profit/stop loss order. Essentially, after a conditional order is triggered, it will become an active order. So, when a conditional order is triggered, cancellation has to be done through the active order endpoint for any unfilled or partially filled active order. As always, orders that have been fully filled cannot be cancelled.</p>
  ### Cancel All Conditional Orders
  cancelallcond: Cancel All Conditional Orders
  account_para_cancelAllCond: Cancel all untriggered conditional orders.
  account_aside_cancelAllActive:
    This endpoint's <code>rate_limit</code> will decrease by 10 per request; ie, one request to this endpoint consumes 10 from the <a href="#t-perendpoint">limit allowed per minute</a>.
  ### Replace Conditional Order
  replacecond: Replace Conditional Order
  a_replacecond: Replace Conditional Order
  account_para_replaceCond:
    <p>Replace conditional order can modify/amend your conditional orders.</p>
    <p><code>order_id</code> and <code>symbol</code> are required for identifying a conditional order.</p>
    <p><code>p_r_qty</code>, <code>p_r_price</code> and <code>p_r_trigger_price</code> can be set for your conditional order. If these fields are not provided, nothing will be modified.</p>
  account_aside_replaceCond: |
    Please note that you can only modify untriggered conditional orders.
  ### Query Conditional Order (real-time)
  querycond: Query Conditional Order (real-time)
  account_para_queryConditional: Query real-time stop order information. When passing the parameter <code>order_id</code> or <code>order_link_id</code>, a single order data will be returned; otherwise, <b>returns up to <a href="#t-orderlimits">10</a> unfilled orders</b>.
  account_para_queryConditionalNote: <b>When a stop order is triggered, it becomes an active order within the system. This endpoint returns an <code>order_id</code> which is equal to the <code>stop_order_id</code> request parameter.</b>

  ## Leverage
  leverage: Leverage
  ### User Leverage
  getleverage: User Leverage
  account_para_userLeverage: Get user leverage.
  ### Set Leverage
  # see setleverage
  setleverage: Set Leverage
  account_aside_setleverage: You can modify your isolated or cross leverage with this endpoint, but if you want to switch between cross/isolated, please use the <a href="#t-marginswitch">Cross/Isolated Margin Switch</a> endpoint.

  ## Position
  position: Position
  ### My Position V2 (real-time)
  myposition: My Position
  account_para_myPosition: Get my position list.
  ### Change Margin
  changemargin: Change Margin
  account_para_changeMargin: Update margin.
  account_aside_changeMargin: You cannot change margin when your position is in Cross Margin mode, and margin can't be less than <a href="https://help.bybit.com/hc/en-us/articles/360039261174-Initial-Margin-Inverse-Contract-">Initial Margin</a>. See the <a href="#t-setleverage">Change User Leverage</a> endpoint for more.
  ### Set Trading-Stop
  tradingstop: Set Trading-Stop
  account_para_tradingStop: Set take profit, stop loss, and trailing stop for your open position.
  account_para_tradingStop_linear: Set take profit, stop loss, and trailing stop for your open position. If using <a href="#t-switchmode">partial mode</a>, TP/SL/TS orders will not close your entire position.
  account_aside_tradingStop: Passing these parameters will create conditional orders controlled by the system. The system will cancel these orders if the position is closed, and adjust the qty according to the size of the open position.
  account_row_comment_side: Position side
  account_row_comment_takeProfit: Cannot be less than 0, 0 means cancel TP
  account_row_comment_stopLoss: Cannot be less than 0, 0 means cancel SL
  account_row_comment_tp_trigger_by: |
    Take profit trigger price type, default<span>:</span> <code>LastPrice</code>
  account_row_comment_sl_trigger_by: |
    Stop loss trigger price type, default<span>:</span> <code>LastPrice</code>
  account_row_comment_trailingStop: Cannot be less than 0, 0 means cancel TS
  account_row_comment_trailingStop_active: Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default.

  ### Closed Profit and Loss
  closedprofitandloss: Closed Profit and Loss
  row_response_closedPnlSide: Side of the closing order

  ## Risklimit
  risklimit: Risk Limit

  ## Funding
  funding: Funding
  ### My Last Funding Fee
  mylastfundingfee: My Last Funding Fee
  account_para_myLastFunding: <a href="https://help.bybit.com/hc/en-us/articles/360039261114-What-is-funding-rate-and-predicted-rate-">Funding settlement occurs</a> every 8 hours at 00:00 UTC, 08:00 UTC and 16:00 UTC. The current interval's fund fee settlement is based on the previous interval's fund rate. For example, at 16:00, the settlement is based on the fund rate generated at 8:00. The fund rate generated at 16:00 will be used at 0:00 the next day.
  ### Predicted Funding Rate and My Funding Fee
  predictedfunding: Predicted Funding Rate and My Funding Fee
  account_para_predictedFunding: Get <a href="https://help.bybit.com/hc/en-us/articles/360039261114-What-is-funding-rate-and-predicted-rate-">predicted funding rate</a> and my predicted funding fee.
  ## API Key Info
  key: API Key Info
  account_para_key: Get user's API key info.
  ## LCP Points
  lcp: LCP Info
  account_para_lcp: |
    <p>Get user's LCP (data refreshes once an hour). Only supports inverse perpetual at present.</p>
    <p>See <a href="#t-liquidity">Understanding Bybit's Liquidity System</a> to learn more.

  # Wallet Data Endpoints
  wallet: Wallet Data Endpoints
  wallet_para: The following wallet data endpoints require authentication.
  ### Wallet Balance
  balance: Get Wallet Balance
  wallet_para_walletBalance: Get wallet balance info.
  wallet_aside_walletBalance: |
    <code>position_margin</code> in this endpoint is not same as <a href="https://www.bybit.com/app/wallet/money">position margin on website</a>
    <p>The formula of position margin on website: <code>position_margin</code> + <code>occ_funding_fee</code> + loss(when your <code>available_balance</code> is insufficient)</p>
  ### Wallet Fund Records
  walletrecords: Wallet Fund Records
  wallet_para_walletRecords: Get wallet fund records. This endpoint also shows exchanges from the <a href="https://testnet.bybit.com/app/assets/assets-exchange">Asset Exchange</a>, where the <code>type</code>s for the exchange are <code>ExchangeOrderWithdraw</code> and <code>ExchangeOrderDeposit</code>.
  wallet_aside_walletRecords: |
    Find more detail for types <code>Withdraw</code> and <code>Refund</code> in the <a href="#t-withdrawrecords">Withdraw Records</a> endpoint.
  wallet_aside_walletRecords1: USDT records will not be returned unless you pass <code>USDT</code> with the <code>coin</code> parameter.
  ### Withdraw Records
  withdrawrecords: Withdraw Records
  wallet_para_withdrawRecords: Get withdrawal records.
  wallet_aside_withdrawRecords: |
    The difference between data returned by this endpoint and data of type <code>Withdraw</code> in the <a href="#t-walletrecords">Wallet Fund Records</a> endpoint:<p></p>
    <p>This endpoint provides one withdrawal operation per record, and you can check the current withdrawal state with the <code>status</code> field.</p>
    <p>Once you have submitted a withdrawal application, there will be a record with type <code>Withdraw</code>, and if the application is <code>CancelByUser</code>, <code>Reject</code> or <code>Expire</code> in the <a href="#t-walletrecords">Wallet Fund Records</a> endpoint, with a corresponding record with type <code>Refund</code>.</p>

  ### Assets Exchange Records
  assetexchangerecords: Asset Exchange Records
  wallet_para_assetexchangerecords: Get asset exchange records.

  ### User Trade Records
  usertraderecords: User Trade Records
  wallet_para_tradeRecords: Get user's trading records. The results are ordered in ascending order (the first item is the oldest).
  wallet_aside_tradeRecords: One order may have multiple trade records.
  wallet_row_comment_orderId: OrderID. If not provided, will return user's trading records
  ## Get Risk Limit
  getrisklimit: Get Risk Limit
  account_para_getRisk: Get risk limit. <b>This endpoint does not require authentication.</b>
  account_aside_getRisk: Read more about the risk limit <a href="https://help.bybit.com/hc/en-us/articles/360007107454-Risk-Limit-Overview">here</a>.
  ## Set Risk Limit
  setrisklimit: Set Risk Limit
  account_para_setRisk: Set risk limit.

  # API Data Endpoints
  api: API Data Endpoints
  api_para: The following API data endpoints do not require authentication.
  ### Server time
  servertime: Server Time
  api_para_time: Get Bybit server time.
  ### Announcement
  announcement: Announcement
  api_para_announcement: Get Bybit OpenAPI announcements in the last 30 days in reverse order.

  # API Rate Limits
  ratelimits: API Rate Limits
  ### IP Rate Limit
  ipratelimits: IP Rate Limit
  ip_rate_para_understanding: |
    <p>The IP limits are shared across all endpoints: futures, spot, and account asset. However, the mainent and testnet IP limits are separate.</p>
    <p>Bybit has different IP frequency limits for <code>GET</code> and <code>POST</code> method<span>:</span></p>
    <ul>
    <li>
      <code>GET</code> method:
      <ul>
        <li>50 requests per second continuously for 2 minutes</li>
        <li>70 requests per second continuously for 5 seconds</li>
      </ul>
    </li>
    <li>
      <code>POST</code> method:
      <ul>
        <li>20 requests per second continuously for 2 minutes</li>
        <li>50 requests per second continuously for 5 seconds</li>
      </ul>
    </li>
    </ul>
  ip_rate_para_understanding_testnet: |
    <p>The IP limits are shared across all endpoints: futures, spot, and account asset.</p>
    <p>Bybit has different IP frequency limits for <code>GET</code> and <code>POST</code> method<span>:</span></p>
    <ul>
    <li>
      <code>GET</code> method:
      <ul>
        <li>12 requests per second continuously for 2 minutes</li>
        <li>18 requests per second continuously for 5 seconds</li>
      </ul>
    </li>
    <li>
      <code>POST</code> method:
      <ul>
        <li>10 requests per second continuously for 2 minutes</li>
        <li>15 requests per second continuously for 5 seconds</li>
      </ul>
    </li>
    </ul>

  spot_ip_rate_para_understanding: |
        <p>Bybit has rate limits based on IP which is 200 per second</p>
  ### Account rate limit
  understandingratelimits: Understanding Your Request Rate Limit
  rate_para_understanding: |
    Bybit makes frequency limits based on <b>the rolling time window per minute and UID, and each symbol is independent</b>. Every request to the API returns the fields shown in the code panel:
  spot_rate_para_understanding: |
    For all endpoints that need authentication, the rate limit is 20 per second.
  rate_text_limitStatus_understanding: your remaining requests for current endpoint
  rate_text_limit_understanding: your current limit for current endpoint
  rate_text_limitReset: the timestamp indicating when your request limit resets if you have exceeded your rate_limit. Otherwise, this is just the current timestamp.
  #spot
  spot_rate_text_limitStatus_understanding: your number of remaining requests for current endpoint
  spot_rate_text_limit_understanding: your rate limit for current endpoint
  spot_rate_text_limitReset: If you have exceeded rate_limit, the timestamp indicates when your limit will reset. Otherwise, it indicates the current timestamp (unit in millisecond).

  ### Rate Limits For All Endpoints
  perendpoint: Rate Limits For All Private Endpoints
  perendpointtransfer: Rate Limits For Transfer Endpoints
  ### Order Limits
  orderlimits: Order Limits
  rate_para_limits: |
    <p>Max. number of unfilled orders supported under each trading pair:</p>
    <ul>
    <li>Active orders: 500</li>
    <li>Conditional orders: 10</li>
    </ul>
    <p>If you have reached the 500 active order limit, creating a new order will be successful, but the oldest existing order will be cancelled. However, if you have reached the 10 conditional order limit, creating a new order will result in an error, maintaining the existing 10 orders.</p>
  ### How to Raise Your API Limit
  raisemylimit: How to Increase API Limits
  rate_para_raise: |
    <ul>
    <li>Please refer to <a href="#t-liquidity">Understanding Bybit&#39;s Liquidity System</a> regarding how our system automatically allocates rate limits for users who place over 2,000 orders per day.</li>
    <li>Please email <a href="mailto:api@bybit.com">api@bybit.com</a> with the following information. We will reply within 1-4 working days:</li>
      <ol>
        <li>Your name and your company details</li>
        <li>Your Bybit UID or registered email, and the assets you are trading</li>
        <li>General description of your trading strategy and reasons for higher rate limits</li>
        <li>Screenshot of previous monthly trading volume (maker/taker) on other platforms</li>
        <li>Optional: your order history in CSV format</li>
      </ol>
    </ul>
  ### Understanding Bybit's Liquidity System
  liquidity: Understanding Bybit's Liquidity System
  rate_para_liquidity: |
    <p>Bybit uses <code>Order Fill Ratio (OFR)</code> and <code>Liquidity Contribution Points (LCP)</code> to measure customers&#39; contribution to our executable liquidity.</p>
    <p>The <code>LCP</code> and <code>OFR</code> of different assets are calculated separately.</p>
  #### Order Fill Ratio (OFR) Threshold
  ofrthreshold: Order Fill Ratio (OFR) Threshold
  rate_para_threshold: |
    If you place more than <code>2000</code> orders per day on Bybit, please make sure that your 7-day OFR is above a <code>Minimum OFR threshold</code>. Otherwise, Bybit may reduce the rate limits for your API request.
  ##### Order Fill Ratio (OFR)
  ofrratio: Order Fill Ratio (OFR)
  rate_para_ratio: |
    <ul>
    <li><code>Order Fill Ratio (OFR)</code>: <code>Orders Filled</code> to <code>Orders Submitted to Bybit</code> to Bybit.</li>
    <li><code>Orders Submitted to Bybit</code>: any order submitted to Bybit.</li>
    <li><code>Orders Filled</code>: any order that has been filled (regardless of filled quantity).</li>
    <li><code>OFR = (number of orders filled / number of orders submitted to Bybit)</code></li>
    </ul>
  ##### Order Fill Ratio Example
  ofrratioExample: Order Fill Ratio Example
  rate_para_ratioExample: |
    <p>User A submitted a limit order request which contains 4 bids and 4 asks, and these orders are placed in the orderbook at different price levels. Then, User A cancelled 2 bids and submits a new limit order request which contains 2 new bids.</p>
    <p>At this time, User B submits a market order request, and matches with 2 of A&#39;s bids.</p>
    <p>The OFR of this period is calculated as follows:</p>
  rate_pre_ratioExampleA: |
    User A:
    Orders Filled = 2
    Orders Submitted to Bybit = 8
    QFR = 2/8 = 25%
  rate_pre_ratioExampleB: |
    User B:
    Orders Filled = 1
    Orders Submitted to Bybit = 1
    QFR = 1/1 = 100%
  ##### Minimum OFR Threshold
  ofrminimum: Minimum OFR Threshold
  rate_para_minimum: 7-day OFR must be kept above 0.1%.
  spot_rate_para_minimum: 7-day OFR must be above 0.1%.
  #### API Request Frequency Limits
  frequencylimit: Rate Limits for API Requests
  rate_para_frequency:
    The rate limits for your API requests are based on your min. <code>Liquidity Contribution Points (LCP)</code> within <code>7</code> days.
  column_LCP: LCP
  column_frequencyLimit: Order Frequency Limit
  row_frequencyLimit_800: 800 times per minute
  row_frequencyLimit_600: 600 times per minute
  row_frequencyLimit_400: 400 times per minute
  row_frequencyLimit_200: 200 times per minute
  row_frequencyLimit_100: 100 times per minute
  ##### Liquidity Contribution Points (LCP)
  liquidityPoints: Liquidity Contribution Points (LCP)
  rate_para_liquidityPoints: |
    <ul>
    <li><code>Liquidity Contribution Points (LCP) = POU * POA * 100</code></li>
    </ul>
  ##### Explanation
  ratelimitsexplanation: Explanation
  ###### Effective Price Range
  pricerange: Effective Price Range
  rate_para_priceRange: |
    <ul>
    <li><p><code>effective price range</code>: order price that falls within the lower and upper price bounds.</p>
    </li>
    <li><p>Min <code>effective price</code>:   (best bid price + best ask price) / 2 - (3 * tick_size)</p>
    </li>
    <li><p>Max <code>effective price</code>:  (best bid price + best ask price) / 2 + (3 * tick_size)</p>
    </li>
    </ul>
  ###### Effective Price Range example
  pricerangeExample: Effective Price Range Example
  rate_pre_priceRangeExample: |
    BTC best bid = 10000
    BTC best ask = 10001
    Effective Price Range: [(10000 + 10001) / 2 - 3* 0.5, (10000 + 10001) / 2 + 3* 0.5] = [9999,10002]
  ###### POU
  pou: POU
  rate_para_POU: |
    <ul>
    <li><code>POU</code>: The size of your orders that fall within the <code>effective price range</code> in proportion to the total size of your orders in the order book.</li>
    </ul>
    <p>Bybit calculates the size of your orders that fall within the <code>effective price range</code> / the total size of your orders in the order book per second, and then computes the time-weighted-average of the day.</p>
  ###### POU example
  pouExample: POU Example
  rate_para_POUExample: User C bids 2000 contracts for $9995 and bids 8000 contracts for $9999, while effective price range is [9999,10002]
  rate_pre_POUExample: |
    amount of User C's orders within effective price range = 8000
    amount of all User C's orders = 2000 + 8000 = 10000
    POU = 8000 / 10000 = 0.8

  ###### POA
  poa: POA
  rate_para_POA: |
    <ul>
    <li><code>POA</code>: the proportion of your orders within <code>effective price range</code> to all orders within <code>effective price range</code> in orderbook.</li>
    </ul>
    <p>Bybit calculates your amount of orders within <code>effective price range</code> / amount of all orders within <code>effective price range</code> in orderbook, and then performs a 1-Day Time-Weighted-Average over the series of seconds rates.</p>
  ### spot
  spot_poa: POA
  spot_rate_para_POA: |
    <ul>
    <li><code>POA</code>: The size of your orders that fall within the <code>effective price range</code> to the total size of orders in the order book that falls within the <code>effective price range</code>.</li>
    </ul>
    <p>Bybit calculates the size of your orders that fall within the <code>effective price range</code> / the total size of orders in the order book that falls within the <code>effective price range</code> per second, and then computes the time-weighted-average of the day.</p>
  ###### POA example
  poaExample: POA example
  rate_para_POAExample: The size of user C's orders that fall within the effective price range is 8,000, while the total size of orders in the order book that fall within the effective price range is 200,000.
  rate_pre_POAExample: |
    Size of user C's orders within effective price range = 8000
    Total size of orders within effective price range = 200000
    POA = 8000 / 200000 = 0.04
  rate_aside_POAExample: Prior notice will be given via the website if we update this mechanism.
  spot_rate_aside_POAExample: Bybit will notify all users in advance if the mechanism is updated.

  # WebSocket Data
  websocket: WebSocket Data
  ## Authentication
  websocketauthentication: Authentication
  websocket_codequote_auth: |
    Authentication methods:
  websocket_codequote_auth1: |
    First method: Apply for authentication when establishing a connection.
  websocket_codequote_auth2: |
    Second method: Apply for authentication after establishing a connection through auth request.
  websocket_codequote_auth_spot: |
    Apply for authentication when establishing a connection.
  websocket_para_endpoint: |
    Base endpoints:
    <ul>
      <li>Testnet:
        <span id="testnet_address">wss://stream-testnet.bybit.com/realtime</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
      <li>Mainnet (both endpoints are available):
        <ul>
        <li><span id="mainnet_address">wss://stream.bybit.com/realtime</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button></li>
        <li><span id="mainnet_address_2">wss://stream.bytick.com/realtime</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button></li>
        </ul>
      </li>
    </ul>
  spot_websocket_para_endpoint: |
    Base endpoints:
    <ul>
      <li>Testnet:
        <ul>
          <li>
            Public Topics: <span id="testnet_address">wss://stream-testnet.bybit.com/spot/quote/ws/v1</span>
            <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
          </li>
          <li>
            Public Topics v2: <span id="testnet_address_2">wss://stream-testnet.bybit.com/spot/quote/ws/v2</span>
            <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
          </li>
          <li>
            Private Topics: <span id="testnet_address_3">wss://stream-testnet.bybit.com/spot/ws</span>
            <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address_3"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
          </li>
        </ul>
      </li>
      <li>Mainnet:
        <ul>
          <li>
            Public Topics: <span id="mainnet_address">wss://stream.bybit.com/spot/quote/ws/v1</span>
            <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
          </li>
          <li>
            Public Topics v2: <span id="mainnet_address_2">wss://stream.bybit.com/spot/quote/ws/v2</span>
            <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
          </li>
          <li>
            Private Topics: <span id="mainnet_address_3">wss://stream.bybit.com/spot/ws</span>
            <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address_3"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
          </li>
        </ul>
      </li>
    </ul>
  websocket_aside_auth: <b>Public</b> topics do not require authentication. The following section applies to <b>private</b> topics only.
  websocket_para_methods: There are two methods of authentication, as shown in the code panel to the right.
  spot_websocket_para_methods: There are two authentication methods. Example of signing algorithms can be found here.
  websocket_aside_signature: Example signature algorithms can be found <a href="https://github.com/bybit-exchange/api-connectors/tree/master/encryption_example">here</a>.
  websocket_best_practices: Due to network complexity, your may get disconnected at any time. Please follow the instructions below to ensure that you receive WebSocket messages on time:</span>
    <p>1. Keep connection alive by <a href="#t-heartbeat">sending heartbeat packet</a></p>
    <p>2. Reconnect as soon as possible if disconnected</p>
  ## How to Send the Heartbeat Packet
  heartbeat: How to Send Heartbeat Packet
  websocket_codequote_heartbeat: How to Send
  websocket_aside_heartbeat: To avoid networks or program issues, we recommend that you send the <code>ping</code> heartbeat packet every 30 seconds to maintain the WebSocket connection.
  ## Rate Limits
  websocketlimit: Rate Limits
  websocket_para_limit: ""
  ## How to Subscribe to Topics
  subscribe: How to Subscribe to Topics
  ### Understanding Websocket Filters
  websocketfilters: Understanding Websocket Filters
  websocketunfilters: Understanding Websocket Filters unsubscription
  websocket_codequote_filters1: How to subscribe with a filter
  websocket_codequote_filters2: How to subscribe with multiple filters
  websocket_codequote_filters3: How to subscribe without filters
  websocket_codequote_filters_linear: Subscribe with multiple filters
  websocket_para_filters: |
    After establishing the connection, one can subscribe to a new topic by sending a JSON request. The specific formats are as follows:
  websocket_para_filters1: |
    <p>The <code>topic</code> indicates the data you would like to receive whilst the <code>filter</code> parses for the specific data you desire - for example, the symbol. The <code>topic</code> is mandatory but the <code>filter</code> is optional.</p>
    <p>To subscribe to more than one topic, simply list multiple topics out, like so:</p>
  websocket_para_filters2: |
    <p>It is possible to use multiple filters for the same topic by splitting them with a pipe (<code>|</code>) - of course, these filters must all be applicable to the selected <code>topic</code>.</p>
    <p>Finally, to subscribe to the topic without filters please use the <code>*</code> wildcard.</p>
  websocketunsubfilters: Unsubscribing From Websocket Topics
  websocket_codequote_unsubfilters: How to unsubscribe with a filter
  websocket_para_unsubfilters: |
    You can dynamically subscribe and unsubscribe from topics (with or without filters) without websocket disconnection as follows:
  ### Intervals
  intervals: Intervals
  websocket_para_intervals: Some topics are pushed at intervals. If the <code>args</code> contain a millisecond param, such as <code>100ms</code>, this topic is pushed at intervals. Otherwise, it is pushed constantly.

  ## Understanding the Subscription Response
  websocketresponse: Understanding Subscription Response
  websocket_codequote_response: Subscription Response
  websocket_para_response: Each subscription will have a response. You can determine whether the subscription is successful based on the response.
  spot_websocket_para_response: Once you subscribe successfully, you'd receive result information. You can determine whether the subscription is successful based on the response.
  ## Public Topics
  publictopics: Public Topics
  publictopics_v2: Public Topics V2
  ### orderBookL2_25
  websocketorderbook25: orderBookL2_25
  websocket_para_orderbook251: Fetches the orderbook with a depth of 25 orders per side.
  orderbookL2_200_link: Want a greater depth? Take a look at the <a href="#t-websocketorderbook200">orderBookL2_200</a> endpoint.
  websocket_para_orderbook252: |
    <p>After the subscription response, the first response will be the snapshot response. This shows the entire orderbook. The data is ordered by price, starting with the lowest buys and ending with the highest sells.</p>
    <p>Following this, all responses are in the delta format, which represents updates to the orderbook relative to the last response.</p>
  ### orderBookL2_200
  websocketorderbook200: orderBookL2_200
  websocket_para_orderbook200: |
    <p>Fetches the orderbook with a depth of 200 orders per side.</p>
    <p>After the subscription response, the first response will be the snapshot response. This shows the entire orderbook. The data is ordered by price, starting with the lowest buys and ending with the highest sells.</p>
    <p>Following this, all responses are in the delta format, which represents updates to the orderbook relative to the last response.</p>
  ### trade
  websockettrade: trade
  websocket_para_trade: Get real-time trading information.
  ### insurance
  websocketinsurance: insurance
  websocket_para_insurance: Get the daily insurance fund update.
  websocket_aside_insurance: The <code>wallet_balance</code> is in Satoshis, with one Satoshi being 100 millionth (<code>100000000</code>) of one Bitcoin.
  ### instrument_info
  websocketinstrumentInfo: instrument_info
  websocket_para_instrumentInfo: Get latest information for symbol.
  websocket_aside_instrumentInfo1: |
    This topic only utilises the <code>update</code> field. Both the <code>delete</code> and <code>insert</code> fields are null. If a key is not found in the <code>update</code> field, its value has not changed.
  websocket_aside_instrumentInfo2: |
    Some values use scientific notation. This is indicated by that value's key, which will be appended with, for example, <code>e6</code>. If the key is <code>last_price_e4</code> and the value is <code>81585000</code>, then to find the true value we can do <code>81585000 / 10^4</code>, which equals <code>8158.5</code>.
  ### klineV2
  websocketklineV2: klineV2
  websocket_para_klineV2: |
    <p>Currently supported intervals:</p>
    <ul>
    <li>1 3 5 15 30</li>
    <li>60 120 240 360</li>
    <li>D</li>
    <li>W</li>
    <li>M</li>
    </ul>
  websocket_aside_klineV2: |
    If <code>confirm</code> is <code>True</code>, the data is the final tick for the interval. Otherwise, it is a snapshot.
  websocketkline: kline

  ## liquidation
  websocketliquidation: liquidation
  websocket_query_liqrecords: Pushes liquidation orders.

  ## Private Topics
  privatetopics: Private Topics
  ### position
  websocketposition: position
  ### execution
  websocketexecution: execution
  ### order
  websocketorder: order
  ### stop_order
  websocketstoporder: stop_order

  # Archive Data
  archivedata: Archive Data
  historicalmarketdata: Historical Market Data
  archive_data_intro: You can get Bybit's <a href="https://public.bybit.com">historical market data here</a>.


  # Error Definitions
  errors: Errors

  # ENUMs Definitions
  enums: Enums Definitions
  ENUMs_para: The following lists enumerator names for the request and response parameters of each endpoint.
  ## Wallet fund type (`wallet_fund_type` / `type`)
  deposit:      ""
  withdraw:     ""
  realisedpnl:  ""
  commission:   ""
  refund:       ""
  prize:        ""
  exchangeOrderWithdraw: ""
  exchangeOrderDeposit:  ""
  returnServiceCash: "- Refund of handling fee bonus"
  insurance: "- Insurance account transfer"
  subMember: "- Mother-child account transfer"
  coupon: "- Coupon interest"
  accountTransfer: "- Account transfer"
  cashBack: "- Cash back"
  ## Withdraw status (`status`)
  toBeConfirmed:  ""
  underReview:    ""
  pending:        "- Pending transfer"
  success:        ""
  cancelByUser:   ""
  reject:         ""
  expire:         ""
  ## Order type (`order_type`)
  limit:  ""
  market: ""
  ## Quantity (`qty`)
  quantity: |
    <ul>
    <li>The maximum qty for an order (<code>max_trading_qty</code>) can be queried with the <a href="#t-querysymbol">Query Symbol endpoint</a>.</li>
    <li>Must be a positive integer
    <li>Must conform to the symbol's <code>qty_step</code>. For example, for the inverse perpetual BTCUSD market:</li>
    <ul>
    <li><code>40</code> - allowed</li>
    <li><code>30.5</code> - not allowed</li>
    </ul>
    </ul>
  ## Price (`price`)
  price: |
    <ul>
    <li>Active order<ul>
    <li>Must be an integral multiple of <code>tick_size</code><ul>
    <li>Information about current trading pair (e.g. <code>tick_size</code>) can be queried with the <a href="#t-querysymbol">Query Symbol endpoint</a>.</li>
    <li>Modulo (<code>%</code>) can be used to calculate whether the price will be accepted:<pre class="center-column">
    IF price % tick_size = 0
        // send request
    ELSE
        // do not send request as the price will not be accepted by the system
    </pre></li>
    </ul>
    </li>
    <li>Must be less than the symbol's <code>max_price</code></li>
    <li>If the user has no open position, the order price must be higher than 10% of the last traded price<ul>
    <li>For example, if the last traded price (last price) is <code>10314</code>, the min. order price will be <code>1031.5</code>.</li>
    <li>Pseudocode (assuming the price is a multiple of 0.5):<pre class="center-column">
    IF price > (last_price * 0.1)
        // send request
    ELSE
        // do not send request as the price will not be accepted by the system
    </pre></li>
    </ul>
    </li>
    <li>If the user has an open position, the order price must be better than the liquidation price.<ul>
    <li>For example, if the liquidation price of a long position is <code>5176.5</code>, the min. order price will be <code>5177</code>. For short position, the order price must be less than the liquidation price.</li>
    </ul>
    </li>
    </ul>
    </li>
    <li>Conditional order<ul>
    <li>Must be greater than or equal to <code>1</code></li>
    </ul>
    </li>
    </ul>
  ## Time in force (`time_in_force`)
  goodTillCancel:     ""
  immediateOrCancel:  ""
  fillOrKill:         ""
  postOnly:           ""
  ## Trigger price type (`trigger_by`)
  lastPrice:  ""
  indexPrice: ""
  markPrice:  ""
  ## Order (`order`)
  para_order: This is used for sorting orders/trades in a specified direction.
  desc: ""
  asc:  ""
  ## Order status (`order_status`)
  aside_orderStatusGet: |
    These are the possible values for <code>order_status</code> as included in the response of a <b>Get Order</b> request. To see the options for <code>order_status</code> in the response for a Create Active/Conditional request, see <a href="#order-status-order_status-creation">here</a>.
  para_orderStatusGet: |
  #    Filter fetched orders by their order statuses. To filter by multiple statuses, separate with a comma like so: <code>Filled,New</code>
  created1:         "-  order has been accepted by the system but not yet put through the matching engine"
  rejected1:        ""
  new1:             "- order has been placed successfully"
  partiallyFilled1: ""
  filled1:          ""
  cancelled1:       ""
  pendingCancel1:   "- matching engine has received the cancelation request but it may not be canceled successfully"
  ## Stop order status (`stop_order_status`)
  active: "- order has been triggered and the new active order has been successfully placed. Is the final state of a successful conditional order"
  untriggered: "- order yet to be triggered"
  triggered: "- order has been triggered by last traded price"
  cancelled: "- order has been canceled successfully"
  rejected: "- order has been triggered but failed to be placed (e.g. due to insufficient margin)"
  deactivated1: "- order has been canceled by the user before being triggered"
  ## Cancel type (`cancel_type`)
  cancelByReduceOnly:   ""
  cancelByPrepareLiq:   "- canceled due to liquidation"
  cancelByPrepareAdl:   "- canceled due to ADL"
  cancelByAdmin:        ""
  cancelByTpSlTsClear:  "- TP/SL order canceled successfully"
  cancelByPzSideCh:     "- order has been canceled after TP/SL is triggered"
  ## Create type (`create_type`)
  createByUser:                 ""
  createByClosing:              ""
  createByAdminClosing:         ""
  createByStopOrder:            ""
  createByTakeProfit:           ""
  createByStopLoss:             ""
  createByTrailingStop:         ""
  createByLiq:                  "- created by partial liquidation"
  createByAdl_PassThrough:      "- created by ADL"
  createByTakeOver_PassThrough: "- created by liquidation takeover"
  ## Exec type (`exec_type`)
  exec_trade: ""
  exec_funding: ""
  exec_adlTrade: ""
  exec_bustTrade: ""
  ## Liquidity type (`last_liquidity_ind`)
  addedLiquidity: "- liquidity maker"
  removedLiquidity: "- liquidity Taker"

  ## Tick direction type (`tick_direction`)
  tick_direction: "It indicates price fluctuation relative to the last trade."
  plusTick: "- price rise"
  zeroPlusTick: "- trade occurs at the same price as the previous trade, which occurred at a price higher than that for the trade preceding it "
  minusTick: "- price drop"
  zeroMinusTick: "- trade occurs at the same price as the previous trade, which occurred at a price lower than that for the trade preceding it "

  ## TP/SL mode (`tp_sl_mode`)
  tp_sl_mode: "Take profit/stop loss mode"
  Full: "- Full take profit/stop loss mode (a single TP order and a single SL order can be placed, covering the entire position)"
  Partial: "- Partial take profit/stop loss mode (multiple TP and SL orders can be placed, covering portions of the position)"

  Stop: "- Normal stop order"
  TakeProfit: "- Position take profit order"
  StopLoss: "- Position stop loss order"
  TrailingStop: "- Position trailing stop loss order"
  PartialTakeProfit: "- Position partial take profit order"
  PartialStopLoss: "- Position partial take profit order"

  ## Kline interval (`interval`)
  interval_1: "- 1 minute"
  interval_3: "- 3 minutes"
  interval_5: "- 5 minutes"
  interval_15: "- 15 minutes"
  interval_30: "- 30 minutes"
  interval_60: "- 1 hour"
  interval_120: "- 2 hours"
  interval_240: "- 4 hours"
  interval_360: "- 6 hours"
  interval_720: "- 12 hours"
  interval_D: "- 1 day"
  interval_W: "- 1 week"
  interval_M: "- 1 month"

  ## Date (`start_date`/`end_date`)
  date: |
    Follows the format: yyyy-mm-dd



  # Error Code
  errors_intro: The Bybit API uses the following HTTP codes and error codes<span>:</span>

  http_200: Request is valid -- Your request is valid
  http_403: Access denied -- You request too many times
  http_404: Request path not found
  #spot
  spot_http_200: Request is valid
  spot_http_403: Access denied
  spot_http_404: Request path not found

  # account_asset
  account_asset_http_200: Request is valid
  account_asset_http_403: Access denied
  account_asset_http_404: Request path not found
  account_asset_err_0:    SUCCESS
  account_asset_err_10001: ParamErr
  account_asset_err_10016: SvcErr
  account_asset_err_38000: Processing
  account_asset_err_38001: AvailableBalanceRunningLow
  account_asset_err_38002: CannotBeTransfer
  account_asset_err_90001: TransferAmountLessThanZero
  account_asset_err_90002: TransferAmountScaleMore
  account_asset_err_90003: TransferLTVCheckError
  account_asset_err_90004: AccountNotFound
  account_asset_err_90005: AccountNotFound
  account_asset_err_90006: QueryTransferError
  account_asset_err_90007: QuerySubMemberTransferError
  account_asset_err_90008: QueryTransferIDRedisError
  account_asset_err_90009: TransferIDExist
  account_asset_err_90010: AccountTypeError
  account_asset_err_90011: GetSubMemberRelationError

  #spot error
  err_1001: Request failed to be processed. Please try again.
  err_1002: Request not authorized. An API key is required and should be included in all requests.
  err_1003: Too many requests. Please use WebSocket for live updates. Current limit is %s requests per minute.
  err_1006: System not responding. Request status unknown. Please contact live support.
  err_1007: Response timeout from backend server. Delivery and request status unknown.
  err_1015: Too many new orders. Please lower request frequency.
  err_1016: Service not available.


  err_10000: An unknown error occurred while processing the request
  err_10001: Error - request failed processed. Please try again.
  err_10002: Request not authorized - an API key is required and should be included in all requests.
  err_10003: Too many requests - please use WebSocket for live updates. Current limit is %s requests per minute.
  err_10004: invalid sign
  err_10005: permission denied for current apikey
  err_10006: System not responding. Request status unknown. Please contact live support.
  err_10007: Response timeout from backend server. Delivery and request status unknown.
  err_10010: request ip mismatch
  err_10014: Trading pairs not supported.
  err_10015: Too many new orders. Please lower request frequency.
  err_10016: Service not available.
  err_10017: request path not found or request method is invalid
  err_10018: exceed ip rate limit

  err_10020: Request not supported.
  err_10021: Timestamp for the request is outside of the recvWindow. The timestamp of this request is 1000 milliseconds ahead of the server time. Please check local time and server time.
  err_10022: Invalid request signature.
  err_11000: Parameter characters not supported.
  err_11001: Too many parameters sent for this endpoint.
  err_11002: Required parameter not sent. Parameter was empty/null or format was incorrect.
  err_11003: Unknown parameter sent.
  err_11004: Not all parameters sent were read.
  err_11005: Empty parameter.
  err_11006: Parameter was sent when no longer required.
  err_11011: Order price exceeded upper limit.
  err_11012: Trading pair does not exist.
  err_11014: TimeInForce parameter sent when not required.
  err_11015: Invalid timeInForce.
  err_11016: Invalid orderType.
  err_11017: Invalid direction.
  err_11018: User-generated order ID was empty.
  err_11019: User-generated order ID was empty.
  err_11020: Invalid interval.
  err_11021: Invalid symbol.
  err_11025: listenKey does not exist.
  err_11027: Query intervals too large.
  err_11028: Invalid parameter combination.
  err_11030: Invalid parameter sent.
  err_11031: Insufficient balance
  err_11032: Order price exceeded upper limit.
  err_11033: Order price exceeded lower limit.
  err_11034: Order price has too many decimals.
  err_11035: Order quantity exceeded upper limit.
  err_11036: Order quantity exceeded lower limit.
  err_11037: Order quantity has too many decimals.
  err_11038: Order price exceeded limits.
  err_11039: Order has been filled.
  err_11040: Order value exceeded lower limit.
  err_11041: Duplicate clientOrderId.
  err_11042: Order has been canceled.
  err_11043: Order not found.
  err_11044: Order being cancelled. Operation not supported.
  err_11045: Order cannot be canceled.
  err_11046: Order creation timeout.
  err_11047: Order cancellation timeout.
  err_11090: Cancel order has been finished.
  err_11091: Can not cancel order, please try again later.
  err_20010: New order rejected.
  err_20011: Cancelation rejected.
  err_20013: Order does not exist.
  err_20014: Invalid API key format.
  err_20015: Invalid API key or IP.
  err_20016: Trading window not open yet for current pair.

  err_20001: Order not exists
  err_20003: missing parameter <code>side</code>
  err_20004: invalid parameter <code>side</code>
  err_20005: missing parameter <code>symbol</code>
  err_20006: invalid parameter <code>symbol</code>
  err_20007: missing parameter <code>order_type</code>
  err_20008: invalid parameter <code>order_type</code>
  err_20009: missing parameter <code>qty</code>
  err_20012: qty must be greater than zero and less than 1 million
  err_20017: missing parameter <code>order_id</code>
  err_20018: invalid date format
  err_20019: missing parameter <code>stop_px</code>
  err_20020: missing parameter <code>base_price</code>
  err_20021: missing parameter <code>stop_order_id</code>
  err_20022: missing parameter <code>leverage</code>
  err_20023: leverage must be a number
  err_20031: leverage must be greater than zero
  err_20070: missing parameter <code>margin</code>
  err_20071: margin must be greater than zero
  err_20084: order_id or order_link_id is required
  err_30001: order_link_id is repeated
  err_30003: qty must be more than the minimum allowed
  err_30004: qty must be less than the maximum allowed
  err_30005: price exceeds maximum allowed
  err_30007: price exceeds minimum allowed
  err_30008: invalid order_type
  err_30009: no position found
  err_30010: insufficient wallet balance
  err_30011: operation not allowed as position is undergoing liquidation
  err_30012: operation not allowed as position is undergoing ADL
  err_30013: position is in liq or adl status
  err_30014: invalid closing order, qty should not greater than size
  err_30015: invalid closing order, side should be opposite
  err_30016: TS and SL must be cancelled first while closing position
  err_30017: estimated fill price cannot be lower than current Buy liq_price
  err_30018: estimated fill price cannot be higher than current Sell liq_price
  err_30019: cannot attach TP/SL params for non-zero position when placing non-opening position order
  err_30020: position already has TP/SL params
  err_30021: cannot afford estimated position_margin
  err_30022: estimated buy liq_price cannot be higher than current mark_price
  err_30023: estimated sell liq_price cannot be lower than current mark_price
  err_30024: cannot set TP/SL/TS for zero-position
  err_30025: trigger price should bigger than 10% of last price
  err_30026: price too high
  err_30027: price set for Take profit should be higher than Last Traded Price
  err_30028: price set for Stop loss should be between Liquidation price and Last Traded Price
  err_30029: price set for Stop loss should be between Last Traded Price and Liquidation price
  err_30030: price set for Take profit should be lower than Last Traded Price
  err_30031: insufficient available balance for order cost
  err_30032: order has been filled or cancelled
  err_30033: The number of stop orders exceeds maximum limit allowed
  err_30034: no order found
  err_30035: too fast to cancel
  err_30036: the expected position value after order execution exceeds the current risk limit
  err_30037: order already cancelled
  err_30041: no position found
  err_30042: insufficient wallet balance
  err_30043: operation not allowed as position is undergoing liquidation
  err_30044: operation not allowed as position is undergoing AD
  err_30045: operation not allowed as position is not normal status
  err_30049: insufficient available balance
  err_30050: any adjustments made will trigger immediate liquidation
  err_30051: due to risk limit, cannot adjust leverage
  err_30052: leverage can not less than 1
  err_30054: position margin is invalid
  err_30057: requested quantity of contracts exceeds risk limit
  err_30063: reduce-only rule not satisfied
  err_30067: insufficient available balance
  err_30068: exit value must be positive
  err_30074: can't create the stop order, because you expect the order will be triggered when the <code>LastPrice</code>(or <code>IndexPrice</code>,  <code>MarkPrice</code>, determined by <code>trigger_by</code>) is raising to <code>stop_px</code>, but the <code>LastPrice</code>(or <code>IndexPrice</code>,  <code>MarkPrice</code>) is already equal to or greater than <code>stop_px</code>, please adjust <code>base_price</code> or <code>stop_px</code>
  err_30075: can't create the stop order, because you expect the order will be triggered when the <code>LastPrice</code>(or <code>IndexPrice</code>,  <code>MarkPrice</code>, determined by <code>trigger_by</code>) is falling to <code>stop_px</code>, but the <code>LastPrice</code>(or <code>IndexPrice</code>,  <code>MarkPrice</code>) is already equal to or less than <code>stop_px</code>, please adjust <code>base_price</code> or <code>stop_px</code>
  err_33004: apikey already expired
  err_34026: the limit is no change
  err_35014: over order limit



  # Misc.
  misc_row_comment_orderLinkIdNotOrderId: Unique user-set order ID. <b>Required</b> if not passing <code>order_id</code>
  misc_row_comment_orderLinkIdNotStopOrderId: Unique user-set order ID. <b>Required</b> if not passing <code>stop_order_id</code>
  misc_row_comment_orderIdNotOrderLinkId: Order ID. <b>Required</b> if not passing <code>order_link_id</code>
  misc_row_comment_symbolNotOrderId: Contract type. <b>Required</b>

  default: Default
  # fix problem of nested common subheadings
  httprequest1: HTTP Request
  requestparameters1: Request Parameters
  httprequest_api_data: HTTP Request
  requestparameters_api_data: Request Parameters
  httprequest_wallet: HTTP Request
  requestparameters_wallet: Request Parameters




  ## LinearQuantity (`qty`)
  linear_quantity:
    <ul>
    <li><code>BTCUSDT</code> - Maximum quantity of 100 for opening; Maximum quantity of 100 for closing</li>
    <li><code>ETHUSDT</code> - Maximum quantity of 1000 for opening; Maximum quantity of 1000 for closing</li>
    <li><code>LINKUSDT</code> - Maximum quantity of 10000 for opening; Maximum quantity of 10000 for closing</li>
    <li><code>LTCUSDT</code> - Maximum quantity of 2000 for opening; Maximum quantity of 2000 for closing</li>
    <li><code>XTZUSDT</code> - Maximum quantity of 20000 for opening; Maximum quantity of 20000 for closing</li>
    <li><code>BCHUSDT</code> - Maximum quantity of 600 for opening; Maximum quantity of 600 for closing</li>
    <li><code>ADAUSDT</code> - Maximum quantity of 24000 for opening; Maximum quantity of 24000 for closing</li>
    <li><code>DOTUSDT</code> - Maximum quantity of 15000 for opening; Maximum quantity of 15000 for closing</li>
    <li><code>UNIUSDT</code> - Maximum quantity of 10000 for opening; Maximum quantity of 10000 for closing</li>
    <li><code>XRPUSDT</code> - Maximum quantity of 1000000 for opening; Maximum quantity of 1000000 for closing</li>
    <li><code>XEMUSDT</code> - Maximum quantity of 250000 for opening; Maximum quantity of 250000 for closing</li>
    <li><code>SUSHIUSDT</code> - Maximum quantity of 10000 for opening; Maximum quantity of 10000 for closing</li>
    <li><code>AAVEUSDT</code> - Maximum quantity of 500 for opening; Maximum quantity of 500 for closing</li>
    <li><code>DOGEUSDT</code> - Maximum quantity of 200000 for opening; Maximum quantity of 200000 for closing</li>
    <li><code>MATICUSDT</code> - Maximum quantity of 70000 for opening; Maximum quantity of 70000 for closing</li>
    <li><code>EOSUSDT</code> - Maximum quantity of 50000 for opening; Maximum quantity of 50000 for closing</li>
    <li><code>ETCUSDT</code> - Maximum quantity of 2000 for opening; Maximum quantity of 2000 for closing</li>
    <li><code>BNBUSDT</code> - Maximum quantity of 1500 for opening; Maximum quantity of 1500 for closing</li>
    <li><code>FILUSDT</code> - Maximum quantity of 2000 for opening; Maximum quantity of 2000 for closing</li>
    <li><code>SOLUSDT</code> - Maximum quantity of 3000 for opening; Maximum quantity of 3000 for closing</li>
    <ul>
    </ul>
    </li>
    </ul>
  ## LinearPrice (`price`)
  linear_price:
    <ul>
    <li>Active order<ul>
    <li>Must be an increment of that market&#39;s <code>tick_size</code><ul>
    <li>Current symbol information (like tick sizes) can be found with the <a href="#t-querysymbol">Query Symbol endpoint</a>.</li>
    <li>Use modulo (<code>%</code>) to calculate whether or not a price will be accepted, like so:<pre class="center-column">
    IF price % tick_size = 0
    // send request
    ELSE
    // do not send request as the price will not be accepted by the system
    </pre></li>
    </ul>
    </li>
    <li>Must be less than 1 million (<code>1000000</code>)</li>
    <li>If the user has no open position then the price must be greater than 10% of the market price<ul>
    <li>For example, if the current market price (last price) is <code>10314</code>, then the absolute minimum the price may be is <code>1031.5</code>. It may not be <code>1031</code> or below.</li>
    <li>In pseudocode (assuming the price is an increment of 0.5):<pre class="center-column">
    IF price > (last_price * 0.1)
    // send request
    ELSE
    // do not send request as the price will not be accepted by the system
    </pre></li>
    </ul>
    </li>
    <li>If the user holds a position, the order price must be better than the liquidation price.<ul>
    <li>For example, if the liquidation price of an open long position is <code>5176.5</code> then the price may be a minimum of <code>5177</code>. In the case of a short position the price must be less than the liquidation price.</li>
    </ul>
    </li>
    </ul>
    </li>
    </ul>
    </li>
    </ul>


  err_130001: Not get position
  err_130002: wallet is nil
  err_130003: the pz status is not normal
  err_130004: Order number is out of permissible range
  err_130005: Order price is out of permissible range
  err_130006: order qty is out of permissible range
  err_130007: Order price is out of permissible range
  err_130008: order_type invalid
  err_130009: The number of contracts below min limit allowed
  err_130010: order not exists or Too late to operate
  err_130011: Operation not allowed as position is undergoing liquidation
  err_130012: Operation not allowed as position is undergoing ADL
  err_130013: stop_order trail value invalid
  err_130014: stop_order trigger price invalid
  err_130015: stop_order expected_direction or base_price invalid
  err_130016: invalid stop_order_type, cannot replace price
  err_130017: invalid stop_order_type, cannot replace qty
  err_130018: invalid trail_value
  err_130019: invalid stop_order_type, cannot replace trigger_price
  err_130020: invalid stop_order_type, cannot replace trail_value
  err_130021: order cost not available
  err_130024: cannot set tp_sl_ts for zero position
  err_130025: below < 10% of base price
  err_130026: the price is too high
  err_130027: the price set for Buy position should be higher than base_price
  err_130028: the price set for Sell position should be between base_price and liq_price
  err_130029: the price set for Buy position should be between liq_price and base_price
  err_130030: the price set for Sell position should be lower than base_price
  err_130032: invalid order_status, cannot cancel or execute trigger
  err_130033: number of stop order >= 10
  err_130034: stop_order cannot replace
  err_130035: Too freq to cancel, Try it later
  err_130037: Order already cancelled
  err_130040: position will be liq
  err_130041: AvailableBalanceE8 less than 0
  err_130049: available balance not enough
  err_130050: Any adjustments made will trigger liq
  err_130051: cannot set leverage, due to risk limit
  err_130052: cannot set leverage, below the lower limit
  err_130056: the position is in cross_margin
  err_130057: the position size is 0
  err_130058: can not set margin less than minPositionCost
  err_130059: can not set pz open limit more than symbol limit
  err_130060: autoAddMargin not changed
  err_130061: not change fee, invalid req
  err_130062: can not set pz open limit less than current buy pz value
  err_130063: can not set pz open limit less than current sell pz value
  err_130064: just support usdt
  err_130074: expect Rising, trigger_price <= current
  err_130075: expect Falling, trigger_price >= current
  err_130076: replace params invalid
  err_130077: the deposit req has handled
  err_130078: the withdraw req has handled
  err_130079: the rotate req has handled
  err_130101: unknown request for create order
  err_130102: unknown request for cancel order
  err_130103: unknown request for cancelAll
  err_130104: unknown request for LiqExecuteReq, req param not match liqExecuteReq
  err_130105: unknown request for pre create order
  err_130106: unknown req for query order
  err_130107: unmatch request for triggeredToActiveImpl
  err_130108: unknown request for addMargin
  err_130109: unknown request for calculatePositionPnl
  err_130110: unknown request for qryAssetImpl
  err_130111: unknown request for query_position_list
  err_130112: unknown request for setAutoAddMargin
  err_130113: unknown request for setFeeRate
  err_130114: unknown request for setLeverage
  err_130115: unknown request for setMargin
  err_130116: unknown request for setOpenLimit
  err_130117: unknown request for setTpSlTs
  err_130118: unknown request for settleFundingFeeReq
  err_130119: unknown request for setPositionMode
  err_130120: unknown request for walletDeposit
  err_130121: unknown request for walletWithDraw
  err_130122: unknown request for rotateRealisedPnl
  err_130123: unknown request for AdlExecute
  err_130124: unknown request for AdlCleanReq
  err_130125: No change made for TP/SL price
  err_130126: No orders
  err_130023: Will be triggered Liq after order is completed
  err_130127: Take Profit, Stop Loss and Trailing Stop Loss are not modified
  err_130145: Close order side is large than position's leaving qty
  err_130149: Order creation successful but SL/TP setting failed
  err_130150: Please try again later.
  err_130151: At least one take profit order in the mode, Cannot be switched
  err_130152: At least one stop loss order in the mode, Cannot be switched
  err_130153: Switching failed. Please cancel the current SL/TP setting
  err_130154: Switching failed. Please cancel the SL/TP setting of active orders
  err_130155: Insufficient quantity required to set TP/SL
  err_130156: Replacing active order price and qty simultaneously is not allowed
  err_130157: Amendment failed. SL/TP price cannot be amended as order is partially filled
  err_130158: SL/TP price cannot be amended under 'Full' position mode
  err_130159: Max SL/TP orders under 'Partial' mode is 20
  err_134026: Risk limit has not been changed.
  err_132011: Current position size exceeds risk limit. Risk limit adjustment failed.
  err_130090: Risk limit is invalid.



  ### Linear Cancel Active Order
  linear_row_comment_qty: Order quantity in BTC
  linear_row_comment_reduceOnly: <a href="https://help.bybit.com/hc/en-us/articles/360039260574-What-is-a-reduce-only-order-"> What is a reduce-only order?</a> True means your position can only reduce in size if this order is triggered. When <code>reduce_only</code> is true, take profit/stop loss cannot be set
  linear_row_comment_closeOnTrigger: <a href="https://help.bybit.com/hc/en-us/articles/360039260534-What-is-a-close-on-trigger-Order-">  What is a close on trigger order?</a> For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.
  placeactive: Place Active Order
  linear_account_para_placeActive: |
    <p>Market price active order: A traditional market price order which will be filled at the best available price. <code>price</code> is not required for this type of order.</p>
    <p>Limit price active order: You can set an execution price for your order. Only when the last traded price reaches the order price will the system will fill your order.</p>
    <p><b>Take profit/Stop loss: You may only set a TP/SL conditional order upon opening the position. Once you hold a position, any new active order requests which contain TP/SL data will be accepted but TP/SL data will be ignored. <code>tp_trigger_by</code>/<code>sl_trigger_by</code> default to LastPrice. Passing values to the <code>take_profit</code> or <code>stop_loss</code> parameters in this endpoint will create conditional orders managed by the system, which will be be automatically cancelled if the position is closed.</b></p>
    <p>Order quantity: This parameter indicates the quantity of perpetual contracts you want to buy or sell. For the minimum unit of qty increase or decrease, please refer to the <code>lot_size_filter</code> field in the <a href="#t-querysymbol">Query Symbols</a> endpoint.</p>
    <p>Order price: If it is a stop order, this parameter is required. When there is no position, the long commission price should be 10% higher than the market price and less than 1 million. If there are positions, they need to be better than strong parity. For the minimum unit of price increase or decrease, please refer to the <code>price_filter</code> field in the <a href="#t-querysymbol">Query Symbols</a> endpoint.</p>
    <p>Custom order ID: You may customise order IDs for active orders. We will link it to the system order ID, and return the unique system order ID to you after the active order is created successfully. You may use this order ID or your custom order ID to cancel your active order. The customised order ID should be unique, with a maximum length of 36 characters.</p>
    <p><b>Each account can hold up to 500 active orders yet to be filled entirely simultaneously. This is per instrument, so it's possible to have, for example, 300 active orders on the BTCUSDT instrument and 280 active orders on the ETHUSDT instrument.</b></p>
  linear_row_comment_basePrice: It will be used to compare with the value of <code>stop_px</code>, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.
  linear_row_comment_stopPx: Trigger price

  setautoaddmargin: Set Auto Add Margin
  linear_account_para_setAutoAddMargin: Set auto add margin, or <a href="https://help.bybit.com/hc/en-us/articles/900000394403-Introduction-to-Auto-Margin-Replenishment-USDT-Contract-">Auto-Margin Replenishment</a>.
  linear_row_comment_set_auto_margin: Auto add margin button

  linear_account_para_setLeverage: Set Leverage
  linear_row_comment_leverage: Must be greater than 0 and less than the <a href="https://help.bybit.com/hc/en-us/articles/360039749753-What-is-Risk-Limit-What-effect-does-the-Risk-Limit-have-on-Margin-Inverse-Contract-">risk limit leverage</a>.

  marginswitch: Cross/Isolated Margin Switch
  linear_account_para_switchIsolated: Switch Cross/Isolated; must set leverage value when switching from Cross to Isolated
  linear_row_comment_switch_isolated: Cross/Isolated<span>:</span> true is Isolated; false is Cross

  linearAddMargin: Add Margin
  linear_account_para_addMargin: Add Margin
  linear_account_row_comment_margin: Add/Remove how much margin<span>:</span> Increase 10; decrease -10, supports 4 decimal places

  ### inverse future
  switchpositionmode: Position Mode Switch
  account_para_switchpositionmode: |
    If you are in One-Way Mode, you can only open one position on <code>Buy</code> or <code>Sell</code> side;<br/> If you are in Hedge Mode, you can open both <code>Buy</code> and <code>Sell</code> side positions simultaneously.
  row_comment_positionmode: |
    Position Mode. <code>0</code><span>:</span> One-Way Mode; <code>3</code><span>:</span> Hedge Mode
  futures_row_comment_leverage: Must be greater than 0 and less than the <a href="https://help.bybit.com/hc/en-us/articles/360039749753-What-is-Risk-Limit-What-effect-does-the-Risk-Limit-have-on-Margin-Inverse-Contract-">risk limit leverage</a>.
  inverse_row_comment_leverage: When switching from cross to isolated, the value of <code>buy_leverage</code> must be equal to <code>sell_leverage</code>.
  futures_account_para_switchIsolated: Switch Cross/Isolated; must set leverage value when switching from Cross to Isolated
  futures_row_comment_switch_isolated: Cross/Isolated<span>:</span> true is Isolated; false is Cross

  ### websocket
  linear_websocket_para_endpoint: |
    Base endpoints:
    <ul>
    <p>
      <li>Testnet public:
        <span id="testnet_public_address">wss://stream-testnet.bybit.com/realtime_public</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_public_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
      <li>Testnet private:
        <span id="testnet_private_address">wss://stream-testnet.bybit.com/realtime_private</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_private_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
    <p>
      <li>Mainnet public (both endpoints are available):<br/>
        <ul>
        <li><span id="mainnet_public_address">wss://stream.bybit.com/realtime_public</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_public_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button></li>
        <li><span id="mainnet_public_address_2">wss://stream.bytick.com/realtime_public</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_public_address_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button></li>
        </ul>
      </li>
    </p>
    <p>
      <li>Mainnet private (both endpoints are available):<br/>
        <ul>
        <li><span id="mainnet_private_address">wss://stream.bybit.com/realtime_private</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_private_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        <li><span id="mainnet_private_address_2">wss://stream.bytick.com/realtime_private</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_private_address_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button></li>
        </ul>
      </li>
    </p>
    </ul>

  ### wallet
  websocketwallet: wallet

  ## order-list 查询不支持多状态查询
  linear_account_row_comment_orderStatus: Query your orders for all statuses if 'order_status' not provided. If you want to query orders with specific statuses, you can pass the order_status split by ','.

  ## change-log
  linear_update_20200331: <code>order_status</code> field not support query orders with specific statuses
  linear_update_20200331_ws_ob: fix response data bug
  fundingrate: Get the Last Funding Rate
  linear_kline_row_comment_limit_200: Limit for data size, max size is 200. Default as showing 200 pieces of data
  linear_order___20200403: Add field <code>reduce_only</code> in response
  linear_poistion___20200403: Add field <code>free_qty</code> in response
  linear_order_fix_order_type___20200403: Fix value of <code>order_type</code> in response
  linear_exec_type: Execution type
  exec_type_pnl: Execution type (cannot be <code>Funding</code>)
  switchmode: Full/Partial Position TP/SL Switch
  switchmode_aside: When set to Partial, TP/SL orders may have a quantity less than the position size. This is set with the <a href="#t-tradingstop">Trading-Stop endpoint</a>.
  addmargin: Add/Reduce Margin
  restapi_update_20200414: Updated <code>BTCUSDT</code> contract information
  linear_private_trade_records: Get user's trading records. The results are ordered in descending order (the first item is the latest).
  linear_private_closed_pnl_records: Get user's closed profit and loss records. The results are ordered in descending order (the first item is the latest).
  linear_private_switchmode: Switch mode between Full or Partial
  linear_row_comment_limit: Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page.
  linear_row_comment_limit_50_200: Limit for data size per page, max size is 200. Default as showing 50 pieces of data per page.
  restapi_update_20200417_1: Add new symbol <code>BTCUSDT</code>
  restapi_update_20200417_2: Add new symbol <code>BTCUSDT</code>
  restapi_update_20200417_3: Add new response param <code>trade_time_ms</code>
  restapi_update_20200417_4: Update support millisecond <code>start_time</code>
  restapi_update_20200417_5: Abandon response field <code>trade_time</code>
  restapi_update_20200418_1: Fix permission denied issue of below endpoints under <code>readonly</code> model<span>:</span>
  restapi_update_20200418_2: Add new fields in response, like <code>exec_price</code>,<code>exec_value</code>
  restapi_update_20200427_1: Return symbol <code>BTCUSDT</code> by default
  restapi_update_20200429_1: Add new request parameter <code>order</code>
  restapi_update_20200429_2: Fix bug of always returning Zero for <code>inviter_id</code> under certain conditions
  restapi_update_20200518_1: <code>order_status</code> query orders with specific statuses by passing each <code>order_status</code> split by ','.
  restapi_update_20200518_2: |
    Add new fields in response: <code>interval</code>, <code>open_time</code>
  restapi_update_20200518_3: |
    Abandon response fields: <code>period</code>, <code>start_at</code>
  restapi_update_20200630_1: Returns all wallet balances if no parameters are passed
  restapi_update_20200630_2: Adjust the return quantity from 50 to 200
  restapi_update_20200826_1: |
    Support setting take profit and stop loss; Add new request parameters: <code>take_profit</code>, <code>stop_loss</code>, <code>tp_trigger_by</code>, <code>sl_trigger_by</code>
  restapi_update_20200826_3: |
    Add response parameters: <code>take_profit</code>, <code>stop_loss</code>, <code>tp_trigger_by</code>, <code>sl_trigger_by</code>
  restapi_update_20200826_2: |
    Add response parameters: <code>tp_sl_mode</code>
  restapi_update_20200826_4: |
    Support creating partial take profit and stop loss orders; Add new request parameters: <code>sl_size</code>, <code>tp_size</code>
  restapi_update_20200826_5: Support cancelling take profit and stop loss orders
  restapi_update_20200826_6: |
    Support replacing take profit stop loss orders; Add new request parameters: <code>take_profit</code>, <code>stop_loss</code>, <code>tp_trigger_by</code>, <code>sl_trigger_by</code>
  restapi_update_20200927_1: Support replace order by <code>order_link_id</code>
  restapi_update_20200915_1: Fix <a href="#t-marketaccountratio">Account Long-short ratio</a> data error
  restapi_update_20200915_2: Change the return value of the field <code>time_in_force</code> of <a href="#t-placecond">placing conditional market order</a> from <code>GoodTillCancel</code> to <code>ImmediateOrCancel</code> which is the actual execution strategy
  ws_update_20200927_1: Add new websocket base endpoint
  restapi_update_20201012_1: Fix issue where not returning stop orders of <code>Deactivated</code> status
  restapi_update_20201012_2: Fix issue where returning wrong <code>cum_exec_fee</code> for filled orders
  restapi_update_20201021_1: Fix bug of <code>given_cash</code> and <code>service_cash</code> are always Zero when coin is <code>USDT</code>
  restapi_update_20201021_2: Add new USDT perpetual symbols<span>:</span> <a href="#symbol-symbol">ETHUSDT, LINKUSDT, LTCUSDT, XTZUSDT</a>
  restapi_update_20201021_3: Support setting tp/sl by different trigger price types
  restapi_update_20201026_1: Add field <code>is_isolated</code> in response
  restapi_update_20201102_1: Request parameter <code>symbol</code> is optional now; If symbol is not passed, return positions of all symbols
  restapi_update_20201111_1: The following REST API will be upgraded. The abandoned endpoints will be deprecated on December 10, 2020. Effective immediately, the rate limit will be reduced by half before being completely removed from service on December 17, 2020.
  restapi_update_20201111_2: The abandoned endpoints will be deprecated on November 30, 2020
  restapi_update_20201112_1: <code>order_status</code> query orders with specific statuses by passing each <code>order_status</code> split with ','.
  restapi_update_20201112_2: <code>stop_order_status</code> query orders with specific statuses by passing each <code>stop_order_status</code> split with ','.
  restapi_update_20201116_1: Add field <code>is_isolated</code> and <code>auto_add_margin</code> in response
  restapi_update_20201116_2: Add field <code>base_price</code> and <code>trigger_by</code> in response
  restapi_update_20201120_1: Add field <code>trigger_by</code> in response
  restapi_update_20201203_5: Real-time queries can return multiple unfilled orders
  restapi_update_20201203_6: Real-time queries can return multiple unfilled orders
  restapi_update_20201203_1: Add field <code>deleverage_indicator</code> and <code>unrealised_pnl</code>
  restapi_update_20201203_2: Add field <code>close_on_trigger</code>
  restapi_update_20201203_4: Add field <code>close_on_trigger</code> and <code>reduce_only</code>
  restapi_update_20201214_1: Add new USDT perpetual symbols<span>:</span> <a href="#symbol-symbol">BCHUSDT</a>
  restapi_update_20201231_0: |
    After a service upgrade, a number of <code>v2</code> endpoints have been added to replace the old routes:
  restapi_update_20201231_1: <code>/user/leverage/save</code> - <b>Not recommended</b>
  restapi_update_20201231_2: <code>/open-api/wallet/fund/records</code> - <b>Not recommended</b>
  restapi_update_20201231_3: <code>/open-api/wallet/withdraw/list</code> - <b>Not recommended</b>
  restapi_update_20201231_4: <code>/position/change-position-margin</code> - <b>Not recommended</b>
  restapi_update_20201231_5: <code>/open-api/api-key</code> - <b>Not recommended</b>
  restapi_update_20201231_6: <code>/open-api/position/trading-stop</code> - <b>Not recommended</b>
  restapi_update_20201231_7: <code>/open-api/funding/prev-funding-rate</code> - <b>Not recommended</b>
  restapi_update_20201231_8: <code>/open-api/funding/prev-funding</code> - <b>Not recommended</b>
  restapi_update_20201231_9: <code>/open-api/funding/predicted-funding</code> - <b>Not recommended</b>
  restapi_update_20201231_1_1: |
    Replaced by: <code>/v2/private/position/leverage/save</code>
  restapi_update_20201231_2_2: |
    Replaced by: <code>/v2/private/wallet/fund/records</code>
  restapi_update_20201231_3_3: |
    Replaced by: <code>/v2/private/wallet/withdraw/list</code>
  restapi_update_20201231_4_4: |
    Replaced by: <code>/v2/private/position/change-position-margin</code>
  restapi_update_20201231_5_5: |
    Replaced by: <code>/v2/private/account/api-key</code>
  restapi_update_20201231_6_6: |
    Replaced by: <code>/v2/private/position/trading-stop</code>
  restapi_update_20201231_7_7: |
    Replaced by: <code>/v2/private/funding/prev-funding-rate</code>
  restapi_update_20201231_8_8: |
    Replaced by: <code>/v2/private/funding/prev-funding</code>
  restapi_update_20201231_9_9: |
    Replaced by: <code>/v2/private/funding/predicted-funding</code>
  restapi_update_20210201_0_1: Upgrade <b>Tiered Margin</b> to <a href="https://help.bybit.com/hc/en-us/articles/900000170023-Risk-Limit-USDT-Contract-">Risk Limit</a>, add below endpoint<span>:</span>

  restapi_update_20210125_0: <code>/v2/private/funding/prev-funding-rate</code> - <b>Not recommended</b>
  restapi_update_20210125_0_1: |
    Replaced by: <code>/v2/public/funding/prev-funding-rate</code>
  restapi_update_20210225: Inverse Futures API released!
  restapi_update_20210301: Change url prefix from <code>future</code> to <code>futures</code>
  restapi_update_20210304: Fix the bug that the filtering function doesn't work for parameter <code>wallet_fund_type</code>
  restapi_update_20210311: Fix sequence of response data
  restapi_update_20210318_1: Add new USDT perpetual symbols<span>:</span> <a href="#symbol-symbol">ADAUSDT, DOTUSDT, UNIUSDT</a>
  restapi_update_20210318_2: Query risk limit return field added maximum leverage <code>max_leverage</code>
  restapi_update_20210322: Fix the bug that the filtering function doesn't work for parameter <code>start_date</code> and <code>end_date</code>
  restapi_update_20210324: Query risk limit return field added maximum leverage <code>max_leverage</code>
  restapi_update_20210430: Testnet Add new USDT perpetual symbols<span>:</span> <a href="#symbol-symbol">XRPUSDT, XEMUSDT, SUSHIUSDT, AAVEUSDT</a>
  restapi_update_20210513: Add new USDT perpetual symbols<span>:</span> <a href="#symbol-symbol">XRPUSDT, XEMUSDT, SUSHIUSDT, AAVEUSDT</a>
  restapi_update_20210602: Add new USDT perpetual symbol<span>:</span> <a href="#symbol-symbol">DOGEUSDT</a>
  restapi_update_20210629: Add new USDT perpetual symbols<span>:</span> <a href="#symbol-symbol">MATICUSDT, EOSUSDT, ETCUSDT, BNBUSDT, FILUSDT, SOLUSDT</a>
  restapi_update_20210527_1: Add new request parameters <code>tp_trigger_by</code>, <code>sl_trigger_by</code>
  restapi_update_20210628: Add fields of <code>take_profit</code>, <code>stop_loss</code>, <code>trailing_stop</code> in response
  restapi_update_20210628_1: Fix values of <code>min_price</code> and <code>tick_size</code> for symbols <code>BCHUSDT</code> and <code>UNIUSDT</code>
  restapi_update_20210701: Add parameter <code>leverage_only</code>
    <br>Use this parameter to set leverage while in cross margin mode.
    <br>If this field is set to <code>false</code>, when <code>leverage</code> is equal to <code>0</code> the position will use cross margin; when <code>leverage</code> is greater than <code>0</code> the position will use isolated margin.
    <br>If this field is set to <code>true</code>, you can set leverage in cross margin with <code>leverage</code>. <code>leverage</code> must be greater than <code>0</code>.
    <br>Use the <a href="#t-marginswitch">Cross/Isolated Margin Switch</a> endpoint to switch cross/isolated without modifying the cross level of leverage.
  restapi_update_20210708_1: Update <code>buy_leverage</code> and <code>sell_leverage</code> parameters to be always required
  restapi_update_20210706: Support setting <code>buy_leverage</code>, <code>sell_leverage</code> when switch from isolated margin to cross margin
  restapi_update_20210902: |
    <ul>
    <li>Deprecate <code>prev_price_24h_e4</code> in favour of <code>prev_price_24h</code>
    <li>Deprecate <code>high_price_24h_e4</code> in favour of <code>high_price_24h</code>
    <li>Deprecate <code>low_price_24h_e4</code> in favour of <code>low_price_24h</code>
    <li>Deprecate <code>prev_price_1h_e4</code> in favour of <code>prev_price_1h</code>
    <li>Deprecate <code>mark_price_e4</code> in favour of <code>mark_price</code>
    <li>Deprecate <code>index_price_e4</code> in favour of <code>index_price</code>
    <li>Deprecate <code>last_price_e4</code> in favour of <code>last_price</code>
    </ul>

  restapi_update_20210907:
      <ul><li>Fix issue with the Price Accuracy of <code>avg_entry_price</code>, <code>order_price</code>, <code>avg_exit_price</code> for XLMUSDT and TRXUSDT.</li></ul>
  ws_update_20210202_0: Add fields <code>reduce_only</code>,<code>close_on_trigger</code>
  ws_update_20210202_1: Add field <code>close_on_trigger</code>

  ws_update_20210202_2: Add fields <code>reduce_only</code>,<code>close_on_trigger</code>
  ws_update_20210225: Add websocket support to inverse future

  restapi_update_20210910:
   <ul><li>Limit <code>start_time</code> and <code>end_time</code> to be within seven days of the current date. For earlier records, please contact customer support.</li></ul>
  restapi_update_2021091401: Will be fully offline on 2021-09-24. Please replace with the <a href="#t-websocketliquidation">liquidation</a> websocket.
  restapi_update_2021091402: This shift to a websocket helps ensure a fair trading environment by preventing some traders from getting early access to market information. Please ensure you switch to the websocket service before 2021-09-24. Thank you for your continued support!
  restapi_update_20210924: This endpoint is now offline. Please replace with the <a href="#t-websocketliquidation">liquidation</a> websocket.
  restapi_update_20210917: This shift to a websocket helps ensure a fair trading environment by preventing some traders from getting early access to market information. Please ensure you switch to the websocket service before 2021-09-24. Thank you for your continued support!
  restapi_update_20210312: Fix value of <code>exec_type,last_liquidity_ind</code> for <a href="#t-usertraderecords">User Trade Record</a> endpoint
  restapi_update_20210315: Prior to December 31, 2020, order price of a market order was returned as the last traded price as of the moment of order placement. On and after December 31, 2020, order price of a market order is returned as a revised limit price. For more information, please refer to  <a href="#t-activeorders">description of market order</a>.
  restapi_update_20210402: Add comment of errcode 10016,10018,30074,30075
  linear_restapi_update_20210402: Add comment of errcode 10016,10018,130145
  restapi_update_20210407: Fix value of <code>price</code> of <a href="#t-query_liqrecords">Liquidated Orders</a> from <code>liq_price</code> to <code>bust_price</code>, you can find more about liquidation <a href="https://help.bybit.com/hc/en-us/articles/360039261474-Liquidation-process-Inverse-Contract-">here</a>
  restapi_update_20210414_1: Add <code>position_idx</code> for <a href="#t-getcond">Get Conditional Order</a>,<a href="#t-querycond">Query Conditional Order (real-time)</a>,<a href="#t-getactive">Get Active Order</a>,<a href="#t-queryactive">Query Active Order (real-time)</a>
  restapi_update_20210414_2: Fix data of position list when request without request parameter <code>symbol</code> if the position is under both side mode
  restapi_update_20210415: Fix value of <code>used_margin, order_margin, position_margin, occ_closing_fee, unrealised_pnl</code> of <a href="#t-balance">Get Wallet Balance</a> endpoint not contains Inverse Futures positions
  restapi_update_20210422: Deprecated Fields of self_ratio and platform_ratio, it is returned as 0 currently
  restapi_update_20210507: Add fields <code>buy_leverage</code>,<code>sell_leverage</code>. <code>leverage</code> not recommand to use
  restapi_update_2021050701: |
    Add: <code>v2/private/position/switch-mode</code>
  restapi_update_2021050702: |
    Add: <code>v2/private/position/switch-isolated</code>
  restapi_update_2021050703: Add fields <code>buy_leverage</code>,<code>sell_leverage</code>.
  restapi_update_2021050704: <code>leverage</code> - <b>Not Recommand</b>
  restapi_update_20210511: |
    Add: <code>v2/private/position/risk-limit</code>
  restapi_update_2021051101: |
    Add: <code>v2/public/risk-limit/list</code>
  restapi_update_2021050705: <a href="#t-setleverage">Set Leverage</a> Deprecated Field<code>position_idx</code>
  restapi_update_2021050706: <a href="#t-marginswitch">Cross/Isolated Margin Switch</a> Deprecated Field<code>position_idx</code>
  restapi_update_2021051201: <a href="#t-setleverage">Set Leverage</a> Deprecated Field<code>position_idx</code>
  restapi_update_2021051202: <a href="#t-marginswitch">Cross/Isolated Margin Switch</a> Deprecated Field<code>position_idx</code>
  restapi_update_2021051203: |
    Add: <code>futures/private/position/risk-limit</code>
  restapi_update_20210517: |
    Add: <code>futures/private/position/risk-limit</code>
  restapi_update_20210520: ETH Inverse Futures released
  restapi_update_20210527: New add spot open-api document
  restapi_update_20210617: New add get symbols API. Parameter name for order_link_id updated to orderLinkId
  restapi_update_20210617_1: <code>is_isolated</code> illustrates if position is Isolated Margin or Cross Margin
  restapi_update_20210617_2: Deprecate to use <code>auto_add_margin</code> to determine if position is Isolated Margin or Cross Margin
  restapi_update_20210617_3: Not recommend to use <a href="#t-setleverage">Set Leverage</a> endpoint switch Isolated Margin or Cross Margin
  restapi_update_20210618_1: After June 24, 2021 do not use <code>leverage</code> to determine if position is Isolated Margin or Cross Margin. <code>leverage</code> must be greater than 0 and less than the <a href="https://help.bybit.com/hc/en-us/articles/360039749753-What-is-Risk-Limit-What-effect-does-the-Risk-Limit-have-on-Margin-Inverse-Contract-">risk limit leverage</a>.
  restapi_update_20210712: Optimize the input and output parameters of some interfaces
  restapi_update_20210823: |
    Add additional enums for <code><a href="#wallet-fund-type-wallet_fund_type-type">wallet_fund_type</a></code>: <code>ReturnServiceCash</code>, <code>Insurance</code>, <code>SubMember</code> <code>Coupon</code>, <code>AccountTransfer</code>, <code>CashBack</code>
  restapi_update_20210826: Asset Transfer API released!
  markpricekline: Query Mark Price Kline
  linear_query_mark_price_kline: Query mark price kline (like <a href="#t-querykline">Query Kline</a> but for <a href="https://help.bybit.com/hc/en-us/articles/360039261074-What-is-Dual-Price-mechanism-">mark price</a>).
  linear_resp_field_last_exec_price: Last execution price
  linear_resp_field_cum_exec_qty: Cumulative qty of trading
  linear_resp_field_cum_exec_value: Cumulative value of trading
  linear_resp_field_cum_exec_fee: Cumulative trading fees
  linear_resp_field_reduce_only: true means close order, false means open position
  linear_resp_field_position_value: Current position value
  linear_resp_field_entry_price: Average opening price
  linear_resp_field_liq_price: Liquidation price
  linear_resp_field_bust_price: Bust price
  linear_resp_field_position_margin: Position margin
  linear_resp_field_occ_closing_fee: Pre-occupancy closing fee
  linear_resp_field_realised_pnl: Today's realised Profit and Loss
  linear_resp_field_cum_realised_pnl: Cumulative realised Profit and Loss
  linear_resp_field_free_qty: Qty which can be closed
  linear_resp_tp_sl_mode: Stop loss and take profit mode
  linear_resp_field_closed_size: Closed size
  linear_resp_field_cum_entry_value: Closed position value
  linear_resp_field_avg_entry_price: Average entry price
  linear_resp_field_cum_exit_value: Cumulative trading value of position closing orders
  linear_resp_field_avg_exit_price: Average exit price
  linear_resp_field_closed_pnl: Closed Profit and Loss
  linear_resp_field_fill_count: The number of fills in a single order
  linear_row_comment_recent_trading_records_limit: Number of results. Default 500; max 1000

  inverse_query_index_price_kline: Index price kline. Tracks BTC spot prices, with a frequency of every second (learn more <a href="https://www.bybit.com/app/contracts">here</a>).
  inverse_query_premium_indices_kline: Premium index kline. Tracks the premium / discount of BTC perpetual contracts relative to the mark price per minute (learn more <a href="https://www.bybit.com/app/contracts">here</a>).

  linear_testnet_only: testnet only



  # Inverse Futures
  inverse_futures: Inverse Futures
  first_quarter: First quarter
  second_quarter: Second quarter
  third_quarter: Third quarter
  fourth_quarter: Fourth quarter
  trading_symbol_comment: Trading_symbol_comment <a href="#t-querysymbol">Query Symbol</a> endpoint


  # abandoned endpoints
  a_getleverage: User Leverage
  a_setleverage: Set Leverage
  replace_by_new: please replace with
  replace_by_new_topic: please replace with

  #spot
  spot: Spot
  spotAccountId: Account ID
  spotExchangeId: Exchange ID
  spotOrderLinkId: User-generated order ID
  spot_Alias: Alias
  spotBaseCurrency: Base currency
  spotQuoteCurrency: Quote currency
  spotBasePrecision: Decimal precision (base currency)
  spotQuotePrecision: Decimal precision (quote currency)
  spotMinTradeQuantity: Min. order qty
  spotMinTradeAmount: Min. order value
  spotMinPricePrecision: Min. number of decimal places
  spotmaxTradeQuantity: Max. order qty
  spotmaxTradeAmount: Max. order value
  spotCategory:  Category

  spotSymbol: Name of the trading pair
  spotId: Trade ID
  spotQty: Order quantity
  spotQtyPlaceOrder: |
    Order quantity (<b>for market orders: when <code>side</code> is <code>Buy</code>, this is in the quote currency. Otherwise, qty is in the base currency. For example, on BTCUSDT a <code>Buy</code> order is in USDT, otherwise it's in BTC.</b> For limit orders, the qty is always in the base currency.)
  spotCommission: Trading fee
  spotCommissionAsset: Asset type in which the fee is paid
  spotIsBuyer: True indicates buyer, false indicates seller
  spotIsMaker: True indicates maker, false indicates taker
  spotSymbolName: Symbol name
  spotIcebergQty: Please ignore
  spotGetOrderRemark: At least one must be entered in the orderId field and the ordersLinkId field
  spot_kline_interval: Chart interval
  spotTime: Order creation time
  spotFeeTokenId: Fee Token ID
  spotFeeTokenName: Fee token name
  spotFee: Fee of the trade.
  spotIsWorking: Working or not (true/false)
  spot_balances: Account balances
  spotTradeId: The ID for the trade
  spotUpdateTime: Last time order was updated
  spotLeverage: Leverage of the order.
  spotMarginLocked: Amount of margin locked for this order. This includes the actually margin needed plus fees to open and close the position.
  spotPriceType: The price type. Possible values include INPUT, OPPONENT, QUEUE, OVER, and MARKET.
  spotQuantity: Order quantity (for market buy order, quantity = amount)
  spotBidQuantity: Bid quantity
  spotAskQuantity: Ask quantity
  spotKlineTimeRemark: If startTime and endTime are not specified, only the latest candles will be sent
  spotTicker24hrRemark: If symbol is not specified, the data from all symbols will be returned
  spotTickerPriceRemark: If symbol is not specified, the price from all symbols will be returned
  spotBookTickerRemark: If symbol is not specified, the best order price from all symbols will be returned
  spotTransactTime: Timestamp
  spotCummulativeQuoteQty: Total order quantity
  spotSide: Order direction
  spotOrderType: Order type
  spotPrice:  Last traded price
  spotOPrice: Order price
  spotPostOrderPrice: Order price. When the type field is MARKET, the price field is optional. When the type field is LIMIT or LIMIT_MAKER, the price field is required
  spot_OrderPrice: Order price
  spotOrderID: Order ID
  spotOrderId: Order ID
  spotFees: Fees incurred for this order.
  spotOriQty: Order quantity
  spotExecQty: Please ignore
  spotIgnore: Please ignore
  spotAvgPrice: Average filled price
  spotStopPrice: Stop price
  spotType: Order type
  spotStatus: Order status
  tOrderClientOrdID: User-generated order ID
  fastcancelactiveorder: Fast Cancel Active Order
  batchcancelactiveorder: Batch Cancel Active Order
  batchfastcancelactiveorder: Batch Fast Cancel Active Order
  batchcancelactiveorderbyids: Batch Cancel Active Order By IDs
  openorders: Open Orders
  spot_transactId: Transaction ID
  spot_time: Timestamp
  spot_message: Success or not (true/false)
  spot_sMessage: True indicates buy order, false indicates sell order
  spot_order_list_limit: Default value is 500, max 500
  spot_orders_start_time: Start time, unit in millisecond
  spot_orders_end_time: End time, unit in millisecond
  orderhistory: Order History
  tradehistory: Trade History
  spot_from_id:  Query begins with the trade ID
  spot_to_id: Query ends with the trade ID
  spot_token: Asset
  spot_fee: Trading fee
  spot_locked: Reserved for orders
  spot_depth_limit: Default value is 100
  spotOrderBookMergedScale: Precision of the merged orderbook, 1 means 1 digit
  spot_depth_time:  Current time, unit in millisecond
  spot_depth_bids: Bid price and quantity, with best bid prices ranked from top to bottom
  spot_depth_asks: Ask price and quantity, with best ask prices ranked from top to bottom
  mergedOrderBook: Merged Order Book
  spot_trades_limit: Default value is 1000, max 10,000
  spot_is_buyer_maker: True indicates buy order, false indicates sell order
  spot_is_limit_maker: Is LIMIT_MAKER
  spot_leverage: leverage
  spot_is_close: Is close
  spot_is_normal: Is normal
  spot_is_working: Is working
  spot_match_account_id: Match account ID
  spot_trade_time: Current timestamp, unit in millisecond
  spot_best_bid_price: Best bid price
  spot_best_ask_price: Best ask price
  spot_last_price: Last traded price
  spot_open_price: Open price
  spot_high_price: High price
  spot_low_price: Low price
  lasttradedprice: Last Traded Price
  bestbidask: Best Bid/Ask Price
  spotRealtimeInterval: time interval
  spotOpen: Open price
  spotHigh: High price
  spotLow: Low price
  spot_total: Total equity
  spot_fees: Trading fee
  spot_account_free: Available balance
  spotClose: Close price
  spotVolume: Trading volume
  spotTrades: Number of trades
  spotTakerBaseVolume: Taker buy volume in base asset
  spotTakerQuoteVolume: Taker buy volume in quote asset
  spot_ticket_id: Ticket ID
  spot_match_order_id: Order ID of the opponent
  spot_account_id: Account ID
  spot_match_account_id: Account ID
  spotQuoteAssetVolume: Quote asset volume
  spotMakerRebate: Marker rebate
  batchcancel_spotOrderTypes: |
    Order type. Use comma splicing to indicate multiple order types, eg <code>LIMIT,LIMIT_MAKER</code>. Default: <code>LIMIT</code>
  spotCancelOrderIds: order ID, use comma splicing to indicate multiple orderIds, no more than 100 ids.

  spotFastCancelTips: The actual result of the cancellation request needs to be checked by order status or match result endpoints after submitting the request.


  #spot_ws_v1
  spot_price: Price
  spot_symbol: Trading pair
  spot_quantity: Quantity
  spot_side: True indicates buy order, false indicates sell order
  spot_side_private: BUY indicates buy order, SELL indicates sell order
  spot_order_client_id: User-generated order ID
  spot_first: First message for this topic since subscription
  spot_timestamp: Timestamp
  spot_close: Close price
  spot_high: High price
  spot_low: Low price
  spot_open: Open price
  spot_volume: Trading volume
  spot_quote_volume: Trading quote volume
  spot_version: Version
  spot_buy: Best bid price, quantity
  spot_sell: Best ask price, quantity
  spot_buys: Bid prices & quantities in descending order (best price first)
  spot_sells: Ask prices & quantities in ascending order (best price first)
  spot_binary: Compressed or not. Defaults to <code>false</code>
  spot_kline_type: Interval
  spot_buy_price: Best bid price
  spot_buy_qty: Bid quantity
  spot_sell_price: Best ask price
  spot_sell_qty: Ask quantity
  spot_balance_change: Wallet balance change
  spot_asset: Name of the trading pair
  spot_available_qty: Available balance
  spot_frozen_qty: Reserved for orders
  spot_event_type: Event type
  spot_allow_trade: Allow trade
  spot_allow_withdraw: Allow withdraw
  spot_allow_deposit: Allow deposit
  spot_cumulative_trade: Total filled value
  spot_event_timestamp: Event time
  spot_order_create_timestamp: Order creation time
  spot_order_id: Order ID
  spot_recent_qty: Last filled quantity
  spot_cumulative_qty: Total filled quantity
  spot_recent_price: Last traded price
  spot_fee_symbol: Asset type in which fee is paid
  spot_m: true if the order type is LIMIT_MAKER
  spot_gains: Change


  spot_public_websocket_frequency_realtime: Pushes data in <b>realtime</b>.

  spot_public_websocket_frequency_300_delay_400: Push data at a frequence of <b>300ms</b>. Message received with a maximum delay of <b>400ms</b>.
  spot_public_websocket_frequency_300_delay_650: Push data at a frequence of <b>300ms</b>. Message received with a maximum delay of <b>650ms</b>.
  spot_public_websocket_frequency_250_delay_300: Push data at a frequence of <b>250ms</b>. Message received with a maximum delay of <b>300ms</b>.
  spot_public_websocket_frequency_near_realtime: Pushes data near in <b>realtime</b>.

  spot_websocket_trade_desc_v1: |
    <p>This topic pushes raw data for each trade.</p>
    <p>After a successful subscription message, the first data message (as indicated by <code>"f": true</code>) consists of the last 60 trades. After this payload (<code>"f": false</code>), messages are pushed at frequency of 300ms.</p>
    <p>Variable <code>v</code> is a trade ID which is unique across the platform.</p>

  websocketrealtimes: realtimes
  spot_websocket_ticker_desc_v1: |
    The 24-hr statistics of a trading pair.
  websocketkline: kline
  spot_websocket_kline_desc_v1: |
    <p>Kline data.</p>
    <p>To subscribe to different intervals, alter append your desired interval to the topic name. For 1 minute klines, set the topic as <code>kline_1m</code>, for 1 hour klines use <code>kline_1h</code>, etc. Available intervals are listed <a href="#kline-interval-interval">here</a>.</p>

  spot_broker_info: brokerinfo return
  websocketdepth: depth
  spot_websocket_orderbook_desc_v1: |
    <p>This topic pushes all order book data.</p>
    <ul>
      <li>Snapshot depth: 200 per side.</li>
      <li>Events which trigger a message push to this topic:
        <ul>
          <li>Order enters order book</li>
          <li>Order leaves order book</li>
          <li>Order quantity changes</li>
          <li>Order filled</li>
        </ul>
      </li>
    </ul>

  websocketmergeddepth: mergedDepth
  spot_websocket_orderbook_merge_desc_v1: <code>dumpScale</code> must be specified for this endpoint. It refers to the number of decimal places

  websocketdiffdepth: diffDepth
  spot_websocket_orderbook_delta_desc_v1: |
    <p>Changes (if any) in the bid–ask spread of the order book will be pushed. The first message pushes a depth of 200 per side. The following messages act as delta messages, which represent updates to the order book relative to the last response.</p>
    <p>In Order Book Streams (Float Depth), the quantity returned may not be equal to the actual bid-ask quantity corresponding to the price. If the quantity=0, it indicates that the price has already changed. If the quantity>0, it refers to the updated bid-ask quantity corresponding to the price.</p>
    <p>Assume the response includes the following:</p>
    <p>&nbsp;&nbsp;> ["0.00181860", "155.92000000"]// price, quantity</p>
    <p>If the next payload is:</p>
    <p>&nbsp;&nbsp;> ["0.00181860", "12.3"]</p>
    <p>This means that the quantity corresponding to this price has been updated.</p>
    <p>If the next payload is:</p>
    <p>&nbsp;&nbsp;> ["0.00181860", "0"]</p>
    <p>This means that the price has already changed.</p>

  spot_websocket_many_symbol_desc: support many symbol, separate with ','.
  spot_websocket_subscribe_desc: |
    <p>After establishing the connection, you can subscribe to a new topic by sending a JSON request. The request formats are as follows:</p>
    <p>ws.send('{"symbol":"BTCUSDT","topic":"trade","event":"sub","params":{"binary":false}}');</p>
    <p> Multiple assets supported, separated by ',' (Not applicable for V2).</p>
    <p>ws.send('{"symbol":"BTCUSDT,ETHUSDT","topic":"trade","event":"sub","params":{"binary":false}}');</p>
  spot_websocket_unsubscribe_desc: |
    <p>After successful subscription, you can unsubscribe by sending a JSON request. The request formats are as follows:</p>
    <p>ws.send('{"symbol":"BTCUSDT","topic":"trade","event":"cancel","params":{"binary":false}}');</p>

  #user
  spot_private_topics_auth_sub: Sending the <a href="#t-websocketauthentication">authentication message</a> automatically subscribes you to all 3 private topics.

  outboundAccountInfo: outboundAccountInfo
  outboundAccountInfo_desc: Pushes data about your account.

  executionReport: executionReport
  executionReport_desc: Pushes data about your orders. <code>Z</code> divided by <code>z</code> equals the average filled price.

  ticketInfo: ticketInfo
  ticketInfo_para: |
    Pushes data about your trades (fills). When an order is filled, you will receive two messages: one from <code>ticketInfo</code>, and one from <code>executionReport</code>

  #spot_ws_v2

  websocketv2bookticker: bookTicker
  spot_websocket_ticker_desc_v2: Best bid price and best ask price

  websocketv2kline: kline
  spot_websocket_kline_desc_v2: |
    <p>Kline data pushed at a frequency of every second.</p>
    <p>The topic name is <code>kline</code>. To subscribe to different intervals, pass your desired interval with the <code>klineType</code> parameter. Available intervals are listed <a href="#kline-interval-interval">here</a>.</p>

  websocketv2trade: trade
  spot_websocket_trade_desc_v2: |
    <p>The Trade Streams push raw trade information; each trade has a unique buyer and seller.</p>
    <p>After successful handshake and connected to server, the server will return the latest 60 trades. After this payload, the following will be real-time trades.</p>
    <p>Variable "v" acts as an tradeId. This variable is shared across different symbols; however, each ID is unique. For example, suppose in the last 5 seconds 3 trades happened in ETHUSDT, BTCUSDT, and BHTBTC. Their version (which is "v") will be consecutive: 112, 113, 114.</p>

  websocketv2depth: depth
  spot_websocket_orderbook_desc_v2: |
    <p>Market depth data for a trading pair: </p>
    <ul>
      <li>Snapshot depth: 40 each for asks and bids.</li>
      <li>Events trigger order book version change:
        <ul>
          <li>order enters order book</li>
          <li>order leaves order book</li>
          <li>order quantity changes</li>
          <li>order filled</li>
        </ul>
      </li>
    </ul>

  websocketv2realtimes: realtimes
  spot_websocket_symbol_ticker_desc_v2: |
    The 24-hr statistics of a trading pair pushed at a frequency of ???

  # Transfer API Data Endpoints
  transfer_api: Transfer Data Endpoints
  transfer_para: The following API data endpoints require authentication.
  createinternaltransfer: Create Internal Transfer
  trigger_transfer: Transfers funds between the different sections of an individuals account (<i>not</i> between subaccounts). For example, between the spot and derivatives accounts.
  transfer_api_notice: |
    Please note that this interface supports Futures Account, Spot Account, Investment Account.
    The <code>transfer_in</code> and <code>transfer_out</code> account types cannot be the same.
  row_comment_transfer_id: UUID, which is unique across the platform
  row_comment_accounttype: Account type

  createsubaccounttransfer_api_notice: |
    A subaccount can only be attributed to a parent account.
  createsubaccounttransfer: Create Subaccount Transfer
  subMember_trigger_transfer: Transfers funds between the parent and child (sub) accounts.
  row_comment_to_subUserId: Subaccount
  row_comment_transfertype: Determines the direction of transfer

  querytransferlist: Query Transfer List
  row_comment_transferstatus: Transfer status
  row_comment_pageaction: Turn page
  row_comment_to_limit: Number of records
  row_comment_to_timestamp: timestamp

  querysubaccounttransferlist: Query Subaccount Transfer List
  querysubaccountlist: Query Subaccount List
  in: ""
  out: ""
  accountType_spot: ""
  accountType_contract: ""
  accountType_investment: "- ByFi Account"
