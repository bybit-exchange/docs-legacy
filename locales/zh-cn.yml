---
zh-cn:
  # universal/global
  international: English
  inverse_perpetual: 反向永续
  linear_perpetual: USDT永续
  search: 搜索
  comment_abandoned: <b>已废弃!!</b>
  httprequest: HTTP 请求
  requestparameters: 请求参数
  responseparameters: 返回参数
  codequote_responseExample: 响应示例
  codequote_responseExampleFormatAll: 响应示例
  codequote_curlExample: 请求示例
  codequote_subscribe: 请求订阅
  spot_transactId: 交易ID
  spot_time: 时间
  spot_message: 是否成功
  spot_sMessage: 是否成功
  codequote_snapshot: 快照推送示例 - 连接建立成功后首次推送
  codequote_delta: 增量推送示例 - 快照数据推送后，推送的增量数据
  column_parameter: 参数
  column_required: 是否必须
  column_type: 类型
  column_comments: 说明
  row_comment_userID: 用户ID
  row_comment_side: 方向
  row_comment_symbol: 合约类型
  row_comment_margin: 保证金
  row_comment_position_id: 仓位ID
  row_comment_position_idx: Position idx, 用于在不同仓位模式下标识仓位：<br/>0-单向持仓 <br/>1-双向持仓Buy<br/> 2-双向持仓Sell
  row_comment_position_idx_leverage: 已废弃!! Position idx
  row_comment_position_mode: 仓位模式
  row_comment_position_size: 仓位数量
  row_comment_position_value: 仓位价值
  row_comment_entry_price: 平均入场价
  row_comment_isolated: 是否逐仓，true-逐仓 false-全仓
  row_comment_auto_add_margin: 是否自动追加保证金
  row_comment_position_margin: 仓位保证金
  row_comment_effective_leverage: 有效杠杆
  row_comment_liq_price: 强平价格
  row_comment_bust_price: 破产价格
  row_comment_occ_closing_fee: 仓位占用的平仓手续费
  row_comment_occ_funding_fee: 仓位size和当前资金费率预占用资金费用
  row_comment_take_profit: 止盈价格
  row_comment_stop_loss: 止损价格
  row_comment_trailing_stop: 追踪止损
  row_comment_position_status: 仓位状态，正常，强平，减仓
  row_comment_deleverage_indicator: 风险指示灯等级（1，2，3，4，5）
  row_comment_oc_calc_data: 预占保证证计算参数, blq-多方所有未成交委托数; bmp-多方最低价; slq-空方所有未成交委托数; smp-空方最低价
  row_comment_order_margin: 委托预占用保证金
  row_comment_wallet_balance: 钱包余额
  row_comment_available_balance: 可用余额, 钱包余额 - 仓位保证金
  row_comment_realised_pnl: 当日已结盈亏
  row_comment_unrealised_pnl: 未结盈亏
  row_comment_cum_realised_pnl: 累计已结盈亏
  row_comment_cross_seq: 撮合版本号
  row_comment_position_seq: 仓位变化版本号
  row_comment_cum_commission: 累计佣金
  row_comment_trailing_active: 激活价格
  row_comment_sl_trigger_by: 止损激活价格类型
  row_comment_tp_trigger_by: 止盈激活价格类型
  row_comment_BTCUSD_leverage: BTCUSD杠杆
  row_comment_EOSUSD_leverage: EOSUSD杠杆
  row_comment_ETHUSD_leverage: ETHUSD杠杆
  row_comment_XRPUSD_leverage: XRPUSD杠杆
  row_comment_exec_fee: 交易手续费
  row_comment_exec_id: 成交ID
  row_comment_exec_price: 成交价格
  row_comment_exec_qty: 成交数量
  row_comment_exec_value: 成交价值
  row_comment_exec_timestamp: 交易时间
  row_comment_fee_rate: 手续费率
  row_comment_nth_fill: 该笔流水对应了撮合响应包里的第几笔成交
  row_comment_user_id: 用户ID
  row_comment_order_id: 订单ID
  row_comment_order_link_id: 用户自定义订单ID
  row_comment_order_price: 订单价格
  row_comment_order_qty: 订单数量
  row_comment_trade_time: 交易时间
  row_comment_margin_id:
  row_comment_coin_type: 币种
  row_comment_risk_limit: 风险限额
  row_comment_maintain_margin: 维持保证金
  row_comment_starting_margin: 起始保证金
  row_comment_section: 区间点
  row_comment_is_lowest_risk: 是否最低风险限额0:不是 1:是
  row_comment_funding_rate: 资金费率
  row_comment_funding_rate_timestamp: 资金费率时间戳
  row_comment_funding_side: 执行资金费率时的用户仓位方向
  row_comment_funding_position_size: 执行资金费率时的用户仓位数量
  row_comment_funding_exec_fee: 资金费用
  row_comment_funding_exec_timestamp: 资金费率执行时间
  row_comment_predicted_funding_rate: 预测资金费率
  row_comment_predicted_funding_fee: 预测资金费用
  row_comment_leverage_result: 用户杠杆
  row_comment_created_at: 创建时间
  row_comment_created_at_in_exchange: 兑换时间
  row_comment_updated_at: 更新时间
  row_comment_margin_result: 仓位保证金
  row_comment_order_type: 交易记录类型
  row_comment_activeOrderType: 委托单价格类型
  row_comment_stopOrderType: 委托单价格类型
  row_comment_stopOrderStatus: 条件单状态
  row_comment_orderStatus: 订单状态
  row_comment_expected_direction: 预期方向
  row_comment_op_from: 请求来源
  row_comment_remark: 备注
  row_comment_o_req_num: 用于关联request&response
  row_comment_leaves_qty: 剩余委托数量
  row_comment_leaves_value: 剩余挂单数量对应的预估价值
  row_comment_reject_reason: 被拒单的原因
  row_comment_clOrdID: uuid类型的唯一订单号
  row_comment_create_type: 下单操作的触发场景
  row_comment_cancel_type: 取消操作的触发场景
  row_comment_cross_status: 取消操作的触发场景
  row_comment_ext_fields: 扩展字段
  row_comment_api_key: API 密钥
  row_comment_type: Key 类型
  row_comment_position_user_id: 用户 ID
  row_comment_position_inviter_id: 邀请人 ID
  row_comment_position_ips: IP地址
  row_comment_note: 备注
  row_comment_permissions: ApiKey 所有权限
  row_comment_expired_at: 过期时间
  row_comment_read_only: 是否只读
  row_comment_lcp_date: 日期
  row_comment_lcp_self_ratio: 已废弃! 个人有效挂单占比
  row_comment_lcp_platform_ratio: 已废弃! 平台有效挂单占比
  row_comment_lcp_score: 流动性贡献分
  row_comment_from: |
    起始ID. 默认: 返回最新数据
  row_comment_limit: 每页数量, 最大50. 默认每页20条
  row_comment_cursor: 翻页标记,请使用返回的cursor,签名时使用返回的原始数据，发送request时请进行urlencode
  row_comment_resp_cursor: 翻页标记
  row_comment_limit_liq: 默认返回500条数据. 最大返回1000条数据
  row_comment_orderType: 订单类型
  row_comment_qty: 委托数量(1个委托1美元)，只能为正整数
  row_comment_price: 委托价格。如果是下<b>限价单</b>，该参数为<b>必填</b>. 在没有仓位时，做多的委托价格需高于市价的10%、低于1百万。如有仓位时则需优于强平价。价格增减最小单位请参考<a href="#t-querysymbol">交易对接口</a>响应中的<b>price_filter</b>字段
  row_comment_stopOrderPrice: 条件委托执行价格。如果条件委托是限价单，则price为必传字段
  row_comment_basePrice: 当前市价。用于和stop_px值进行比较，确定当前条件委托是看空到<code>stop_px</code>时触发还是看多到stop_px触发。主要是用来标识当前条件单预期的方向
  row_comment_stopPx: 触发价格
  row_comment_timeInForce: 执行策略
  row_comment_triggerBy: 触发价格类型. 默认为最新市价
  row_comment_tp_size: 在部分止盈止损模式下，止盈合约数量
  row_comment_sl_size: 在部分止盈止损模式下，止损合约数量
  row_comment_takeProfit: 止盈价格，仅开仓时生效
  row_comment_stopLoss: 止损价格，仅开仓时生效
  row_comment_trailingStop: Trailing stop
  row_comment_reduceOnly: 只减仓
  row_comment_closeOnTrigger: 触发后平仓. 如果下平仓单，请设置为<code>true</code>，避免因为保证金不足而导致下单失败
  row_comment_orderLinkId: 机构自定义订单ID, 最大长度36位，且同一机构下自定义ID不可重复
  row_comment_page: 页码.默认取第一页
  row_comment_page_max50: 页码.默认取第一页,最大50
  row_comment_orderId: 活动订单号ID。当成功创建了活动订单后返回的唯一的订单号ID。
  row_comment_stopOrderId: 条件委托订单ID。
  row_comment_pRQty: 修改后的订单数量。如果是未完全成交订单，则表示修改剩余未成交的部分。如果不修改这个字段，请不要传这个参数。
  row_comment_pRPrice: 修改后的订单价格。如果不修改这个字段，请不要传这个参数。
  row_comemnt_pRTriggerPrice: 修改后的条件单的触发价格或止盈止损的价格。如果不修改这个字段，请不要传这个参数。
  row_comemnt_replace_take_profit: 修改后的止盈价格。如果不修改这个字段，请不要传这个参数。
  row_comemnt_replace_stop_loss: 修改后的止损价格。如果不修改这个字段，请不要传这个参数。
  row_comment_leverage_old: leverage必须大于0且小于最大可设置杠杆 <a href="https://help.bybit.com/hc/en-us/articles/360039749753-What-is-Risk-Limit-What-effect-does-the-Risk-Limit-have-on-Margin-Inverse-Contract-">risk limit leverage</a>,如果你想切换全逐仓，请使用 <a href="#t-marginswitch">全仓/逐仓切换</a>
  row_comment_startDate: 起始时间点
  row_comment_endDate: 结束时间点
  row_comment_currency: 币种类型
  row_comment_coin: <code>currency</code> alias
  row_comment_coin_false: <code>currency</code> alias，如果不传参数coin，将返回所有钱包余额。
  row_comment_walletFundType: 资金记录类型
  row_comment_withdrawStatus: Withdraw status
  row_comment_startTime: 开始时间戳（秒）
  row_comment_endTime: 结束时间戳（秒）
  row_comment_startTime_ms: 开始时间戳（毫秒）
  row_comment_endTime_ms: 结束时间戳（毫秒）
  row_comment_riskId: <a href="#t-getrisklimit">风险限额ID</a>
  row_comment_closed_size: 平仓委托对应的平仓大小
  row_comment_rate_limit: 频率限制
  row_comment_path: 请求路径
  row_comment_consume: 消耗
  row_comment_order: 按创建时间排序
  row_comment_interval: 数据更新频率. 枚举值： 1 3 5 15 30 60 120 240 360 720 "D" "M" "W"
  row_comment_from_timestamp: 起始时间戳（单位秒）
  row_comment_limit_200: 每页数量, 最大200. 默认每页200条
  row_comment_limit_100: 返回数据最大100条. 默认返回50条
  row_comment_limit_50_200: 返回数据最大200条. 默认返回50条
  row_comment_limit_50_500: 返回数据最大500条. 默认返回50条
  row_comment_period: 数据记录周期. 5min 15min 30min 1h 4h 1d
  row_comment_last_exec_time: 最近一次成交时间
  row_comment_last_exec_price: 最近一次成交价格
  row_comment_orig_order_type: 原始特殊订单类型
  row_comment_prior_x_req_price: 期望撮合的价格
  row_comment_xreq_type: 请求类型
  row_comment_is_maker: 是否是maker
  row_comment_open: 开始价格
  row_comment_high: 最高价格
  row_comment_low: 最低价格
  row_comment_close: 结束价格
  row_comment_timestamp: 委托时间
  row_comment_resp_price: 委托价格
  row_comment_resp_size: 合约数量
  row_comment_resp_open_time: 开始时间
  row_comment_resp_volume: 交易量
  row_comment_resp_turnover: 成交金额
  row_comment_resp_bid_price: 第一笔挂单买入价
  row_comment_resp_ask_price: 第一笔挂单卖出价
  row_comment_resp_last_price: 最新成交价
  row_comment_resp_last_price_e4: 最新成交价 * 10^4
  row_comment_resp_last_tick_direction: 价格变化方向
  row_comment_resp_prev_price_24h: 24小时前的整点市价
  row_comment_resp_prev_price_24h_e4: 24小时前的整点市价 * 10^4
  row_comment_resp_price_24h_pcnt: 市价相对24h变化百分比
  row_comment_resp_price_24h_pcnt_e4: 市价相对24h变化百分比 * 10^4
  row_comment_resp_high_price_24h: 最近 24 小时最高价
  row_comment_resp_high_price_24h_e4: 最近 24 小时最高价 * 10^4
  row_comment_resp_low_price_24h: 最近 24 小时最低价
  row_comment_resp_low_price_24h_e4: 最近 24 小时最低价 * 10^4
  row_comment_resp_prev_price_1h: 1小时前的整点市价
  row_comment_resp_prev_price_1h_e4: 1小时前的整点市价 * 10^4
  row_comment_resp_price_1h_pcnt: 市价相对1小时前变化百分比
  row_comment_resp_price_1h_pcnt_e6: 市价相对1小时前变化百分比 * 10^6
  row_comment_resp_mark_price: 标记价格
  row_comment_resp_mark_price_e4: 标记价格 * 10^4
  row_comment_resp_index_price: 指数价格
  row_comment_resp_index_price_e4 : 指数价格 * 10^4
  row_comment_resp_open_interest: 未平仓合约数量
  row_comment_slow_update: 不是实时更新，最慢更新时间是一分钟
  row_comment_resp_open_value: 未平仓价值
  row_comment_resp_open_value_e8: 未平仓价值 * 10^8
  row_comment_resp_total_turnover_e8: 总营业额  * 10^8
  row_comment_resp_total_turnover: 总营业额
  row_comment_resp_turnover_24h: 24小时营业额
  row_comment_resp_turnover_24h_e8: 24小时营业额 * 10^8
  row_comment_resp_total_volume: 总交易量
  row_comment_resp_volume_24h: 最近 24 小时成交量
  row_comment_resp_funding_rate: 资金费率
  row_comment_resp_funding_rate_e6: 资金费率 * 10^6
  row_comment_resp_predicted_funding_rate: 预测资金费率
  row_comment_resp_predicted_funding_rate_e6: 预测资金费率 * 10^6
  row_comment_resp_next_funding_time: 下次结算资金费用时间
  row_comment_resp_countdown_hour: 结算资金费用剩余时间
  row_comment_resp_delivery_fee_rate: 交割费率，仅交割合约有效
  row_comment_resp_predicted_delivery_price: 预期交割价，仅交割合约有效
  row_comment_resp_delivery_time: 交割时间，仅交割合约有效
  row_comment_resp_update_time: 成交时间
  row_comment_confirm: 是否确认
  row_comment_resp_trade_time_ms: 交易时间(毫秒)
  row_comment_resp_trade_id: 交易Id
  row_comment_equity: 用户资产
  row_comment_used_margin: 已用保证金
  row_comment_time_stamp: 时间戳（秒）
  row_comment_open_interest: 未平仓合约数量
  row_comment_value: 订单价值
  row_comment_limit_500_1000: 返回数据最大1000条. 默认返回500条
  row_comment_buy_ratio: 多仓人数占比
  row_comment_sell_ratio: 空仓人数占比
  request_disable: 此接口不再推荐使用!



  row_response_comment_price: 委托价格
  row_response_comment_qty: 委托数量
  row_response_comment_basePrice: 下单时市价
  row_response_comment_triggerBy: 触发价格类型
  row_response_comment_orderLinkId: 机构自定义订单ID
  row_response_comment_id: 最新数据ID
  row_response_comment_trade_id: 交易ID
  row_response_comment_execprice: 交易价格
  row_response_comment_execqty: 交易数量
  row_response_comment_time: UTC 时间
  row_response_comment_name: 合约名称
  row_response_comment_alias: 合约别名(不可用于API调用)
  row_response_comment_status: <a href="#contract-status-status">合约状态</a>
  row_response_close_on_trigger: 是否平仓委托 true-平仓 false-开仓
  row_comment_position_tick_direction: 价格变化方向
  row_comment_from_coin: 兑出币种
  row_comment_to_coin: 兑入币种
  row_comment_to_amount: 兑入数量
  row_comment_from_fee: 兑换手续费(兑出币种计价)
  row_comment_from_amount: 兑出数量
  row_comment_exchange_rate: 兑换汇率

  row_response_comment_base_currency: 基础货币
  row_response_comment_quote_currency: 报价货币
  row_response_comment_price_scale: 价格范围
  row_response_comment_taker_fee: taker 手续费
  row_response_comment_maker_fee: maker 手续费
  row_response_comment_leverage_filter: 杠杆指示信息
  row_response_comment_min_leverage: 最小杠杆数
  row_response_comment_max_leverage: 最大杠杆数
  row_response_comment_leverage_step: 杠杆最小增加或减少数量
  row_response_comment_price_filter: 价格指示信息
  row_response_comment_min_price: 最小价格
  row_response_comment_max_price: 最大价格
  row_response_comment_tick_size: 价格最小增加或减少数量
  row_response_comment_lot_size_filter: 交易数量信息
  row_response_comment_max_trading_qty: 最大交易数量
  row_response_comment_min_trading_qty: 最小交易数量
  row_response_comment_qty_step: 合约数量最小单位
  row_response_comment_nill_time: 毫秒时间戳
  row_response_comment_given_cash: 体验金
  row_response_comment_service_cash: 抵扣金
  row_comment_fund_type: 资金类型
  row_comment_fund_amount: 资金总量
  row_comment_tx_id: 交易哈希ID
  row_comment_address: 地址
  row_comment_submited_at: 提交时间
  row_response_liq_record_side: 强平订单的方向
  row_comment_max_leverage: 最大杠杆




  row_parameter_tp_trigger_by: <a href="#trigger-price-type-trigger_by">tp_trigger_by</a>
  row_parameter_sl_trigger_by: <a href="#trigger-price-type-trigger_by">sl_trigger_by</a>
  row_parameter_symbol: <a href="#symbol-symbol">symbol</a>
  row_parameter_side: <a href="#side-side">side</a>
  row_parameter_tp_sl_mode: <a href="#tpsl-mode-type-tp_sl_mode">tp_sl_mode</a>
  row_parameter_order_type: <a href="#order-type-order_type">order_type</a>
  row_parameter_quantity: <a href="#quantity-qty">qty</a>
  row_parameter_price: <a href="#price-price">price</a>
  row_parameter_time_in_force: <a href="#time-in-force-time_in_force">time_in_force</a>
  row_parameter_order_status: <a href="#order-status-order_status">order_status</a>
  row_parameter_trigger_price: <a href="#trigger-price-type-trigger_by">trigger_by</a>
  row_parameter_stop_order: <a href="#stop-order-status-stop_order_status">stop_order_status</a>
  row_parameter_order: <a href="#order-order">order</a>
  row_parameter_exec_type: <a href="#exec-type-exec_type">exec_type</a>
  row_parameter_last_liquidity_ind: <a href="#liquidity-type-last_liquidity_ind">last_liquidity_ind</a>
  row_parameter_tick_direction: <a href="#tick-direction-type-tick_direction">tick_direction</a>
  row_parameter_stop_order_type: <a href="#stop-order-type-stop_order_type">stop_order_type</a>


  default: 默认
  enum_withdraw_status_link: <a href="#withdraw-status-status">提币状态枚举</a>
  enum_coin_link: <a href="#currency-currency-coin">币种枚举</a>
  enum_side_link: <a href="#side-side">方向枚举</a>
  enum_symbol_link: <a href="#symbol-symbol">交易对枚举</a>
  enum_contract_type_link: <a href="#contract-type-contract_type">合约类型枚举</a>
  enum_order_type_link: <a href="#order-type-order_type">订单类型枚举</a>
  enum_tick_direction: <a href="#tick-direction-type-tick_direction">价格波动方向枚举</a>
  enum_exec_type_link: <a href="#exec-type-exec_type">交易类型枚举</a>
  enum_Liquidity_type_link: <a href="#liquidity-type-last_liquidity_ind">流动性类型枚举</a>, 只有当<code>exec_type</code>字段类型为<code>Trade、AdlTrade、BustTrade</code>时有效
  enum_stop_order_status_link: <a href="#stop-order-status-stop_order_status">条件单状态stop_order_status枚举</a>
  stop_order_trigger_price: 如果stop_order_type为`TrailingProfit`时，为激活价格，否则为触发价格。
  errorcode_meaning: 含义
  resp_field_leverage:  逐仓模式下, 值为用户设置的杠杆；全仓模式下，值为当前风险限额下最大杠杆
  resp_field_effective_leverage: 有效杠杆. 逐仓模式下, 等于`leverage`; 全仓模式下, 计算公式为： <code>position size / markprice / (wallet_balance+unrealised_pnl)</code>
  row_comment_from_id: 起始ID，默认为最新id
  row_comment_direction: 搜索方向：Prev:以起始ID升序检索,Next:起始ID降序检索，默认为Next
  row_comment_cursor_direction: 搜索方向：<code>prev</code>:上一页,<code>next</code>:下一页,默认为 <code>next</code>
  resp_field_position_list:  当不传参数<code>symbol</code>的时候，返回结构如下：
  resp_field_position_list_valid: 表示当前data对应的symbol数据是否可用
  resp_field_position_list_data: 只有在<code>is_valid</code>为<b>true</b>时，<code>data</code>才可用，否则请不要使用data
  resp_field_order_list:  当只传参数<code>symbol</code>的时候，返回结构如下：

  # introduction in index.html.md
  introduction: 中文社区和参考资料
  intro_para:
    <p>欢迎使用 <a href="https://www.bybit.com/">Bybit</a> APIs 和 Websocket官方文档！</p>
    <p>如果您在使用API的过程中遇到问题需要帮助，请加入我们的 <a href="https://t.me/Bybitapi">官方Telegram API讨论群</a>！</p>
  spot_intro_para:
    <p>欢迎使用 <a href="https://www.bybit.com/">Bybit</a> APIs 和 Websocket官方文档！</p>
    <p>该文档旨在提供指导，以帮助您快速访问Bybit的API接口，了解参数说明和常见错误码等。
    若您有任何疑问或需要帮助，请加入我们的 <a href="https://t.me/Bybitapi">官方Telegram API讨论群</a>！</p>
  resources: 中文社区和参考资料
  spot_resources: 中文社区和参考资料
  intro_para_resources:
    <ul class="bybit-community">
      <li><img src="/images/favicon.ico" height="14", width="14"> <a href="https://help.bybit.com/hc/zh-cn"><strong>帮助中心</strong></a> - <strong>在这里了解合约交易</strong>
      <li><img src="/images/github_logo_icon.png" height="14", width="14"> <a href="https://github.com/bybit-exchange/docs/issues"><strong>Bybit API docs</strong></a> - <strong>在这里提bug</strong>
      <li><img src="/images/github_logo_icon.png" height="14", width="14"> <a href="https://github.com/bybit-exchange/api-connectors/"><strong>Bybit's api-connectors</strong></a> - <strong>官方API SDK</strong>
      <li><img src="/images/telegram_logo_icon.png" height="14", width="14"> <a href="https://t.me/BybitAPI"><strong>API Discussion Group</strong></a> - <strong>API英文讨论群</strong>
      <li><img src="/images/telegram_logo_icon.png" height="14", width="14"> <a href="https://t.me/BybitChineseAPI"><strong>Chinese API Discussion Group</strong></a> - <strong>API中文讨论群</strong>
      <li><img src="/images/telegram_logo_icon.png" height="14", width="14"> <a href="https://t.me/Bybit_API_Announcements"><strong>API Announcements Channel</strong></a> - <strong>API公告群</strong>
      <li><img src="/images/email_icon.png" height="14", width="14"> <a href="mailto:IT@bybit.com"><strong>IT@bybit.com</strong></a> - <strong>官方技术支持邮箱!</strong>
    </ul>

  spot_intro_para_resources:
    <ul class="bybit-community">
    <li><img src="/images/favicon.ico" height="14", width="14"> <a href="https://help.bybit.com/hc/zh-cn"><strong>帮助中心</strong></a> - <strong>在这里了解现货交易</strong>
    <li><img src="/images/github_logo_icon.png" height="14", width="14"> <a href="https://github.com/bybit-exchange/docs/issues"><strong>Bybit API docs</strong></a> - <strong>在这里提bug</strong>
    <li><img src="/images/github_logo_icon.png" height="14", width="14"> <a href="https://github.com/bybit-exchange/api-connectors/"><strong>Bybit's api-connectors</strong></a> - <strong>官方API SDK</strong>
    <li><img src="/images/telegram_logo_icon.png" height="14", width="14"> <a href="https://t.me/BybitAPI"><strong>API Discussion Group</strong></a> - <strong>API英文讨论群</strong>
    <li><img src="/images/telegram_logo_icon.png" height="14", width="14"> <a href="https://t.me/BybitChineseAPI"><strong>Chinese API Discussion Group</strong></a> - <strong>API中文讨论群</strong>
    <li><img src="/images/telegram_logo_icon.png" height="14", width="14"> <a href="https://t.me/Bybit_API_Announcements"><strong>API Announcements Channel</strong></a> - <strong>API公告群</strong>
    <li><img src="/images/email_icon.png" height="14", width="14"> <a href="mailto:IT@bybit.com"><strong>IT@bybit.com</strong></a> - <strong>官方技术支持邮箱!</strong>
    </ul>
  shared_endpoint_desc: 请点击查看接口描述。

  # Changelog
  # if some missing values - they already have values elsewhere
  changelog: 更新日志
  changelog_new: 新增
  changelog_update: 更新
  changelog_delete: 废弃
  changelog_bugfix: bugfix
  ## 2020-04-10
  bugfix_20200410:  调整行情接口请求示例地址为主网
  bugfix1_20200409: 调整排序描述，降序改为升序
  ## 2020-03-31
  bugfix1_20200331:  修复<code>USDT</code>资产不准确的bug
  ## 2020-03-26
  trailing_stop_20200326: 针对追踪止损订单增加了触发价格 <code>new_trailing_active</code>.
  ## 2020-02-26
  update_20200226: 下单接口的参数列表删除 <code>trailing_stop</code> 字段. 这个字段目前是无效的.
  ## 2020-02-10
  replaceActive1_20200210: 返回结果中增加<code>order_id</code>
  replaceCond1_20200210: 返回结果中增加 <code>stop_order_id</code>
  replaceCond2_20200210: 为了和其他接口保持统一，新增请求参数<code>stop_order_id</code>，替换调原来的参数 <code>order_id</code>
  bugfix1_20200210: 修复V2私有接口返回值中<code>rate_limit_reset_ms</code>单位问题，将原来的微妙改为毫秒，和V1接口保持一致
  ## 202020316
  position_20200316: 返回新增字段<code>effective_leverage</code>
  bugfix1_20200316: 修复<code>USDT</code>资产字段<code>equity</code>值总是为0的bug
  ## 2019-12-27 20191227
  ## 2019-12-18 20191218
  ## 2019-12-13 20191213
  ## 2019-12-02 20191202
  ## 2019-11-19 20191119
  ## 2019-11-07 20191107
  my_20191107: 我的持仓
  ## 2019-11-04 20191104
  cancelOrder_20191104: 撤销活动单
  cancelOrder__20191104: 支持根据<code>order_link_id</code>撤销活动单
  cancelCond__20191104: 支持根据<code>order_link_id</code>撤销条件单
  get__20191104: 添加额外字段
  get___20191104: 更新 <code>ips</code> 字段返回内容
  update_20191104: 更新REST API频率限制
  update__20191104: 频率限制精确到毫秒
  update___20191104: 细化接口的频率限制
  update____20191104: |
    返回值中新增字段: <code>rate_limit_reset_ms</code>, <code>rate_limit</code>
  ## 2019-10-22 20191022
  position__20191022: 添加了额外字段，如<code>wallet_balance</code>
  trade__20191022: 修复重复推送交易数据的问题
  trade___20191022: 现在支持在一个消息中推送多条交易
  trade___20200302: 增加毫秒成交时间 <code>trade_time_ms</code>
  usertraderecords_20200309: symbol是必填参数
  apikey_20200309: 返回结果中新增 <code>inviter_id</code>


  # api_auth
  authentication: 鉴权/认证
  auth_aside_key: 请先生成<a href="https://testnet.bybit.com/app/user/api-management"><b>测试网</b></a> 或 <a href="https://www.bybit.com/app/user/api-management"<b>主网</b></a>API KEY。
  auth_aside_env: |
    REST接口根URL:
    <ul>
    <p>
      <li>测试网:<br/>
        <span id="testnet">https://api-testnet.bybit.com</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
    <p>
      <li>主网(请根据您的网络情况选择以下任意一个地址使用):<br/>
        <span id="mainnet_1">https://api.bybit.com</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_1"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        <br/>
        <span id="mainnet_2">https://api.bytick.com</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
    </ul>
  spot_auth_aside_env: |
    REST接口根URL:
    <ul>
    <p>
      <li>测试网:<br/>
        <span id="testnet">https://api-testnet.bybit.com</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
    <p>
      <li>主网(请根据您的网络情况选择以下任意一个地址使用):<br/>
        <span id="mainnet_1">https://api.bybit.com</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_1"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        <br/>
        <span id="mainnet_2">https://api.bytick.com</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
    </ul>
  auth_para_domains: |
    Domains:
    <ul>
      <li>
        <span id=testnet><a href="https://api-testnet.bybit.com">https://api-testnet.bybit.com</a></span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
      <li>
        <span id=mainnet><a href="https://api.bybit.com">https://api.bybit.com</a></span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </ul>
  auth_para_privatepublic:
    <p>所有<b>private</b>接口都需要认证，<b>public</b> 接口不需要认证。</p>

  authenticationparameters: 公共参数
  auth_para_params: |
    需要签名的接口必须包含以下参数:
    <ul>
      <li><b>api_key</b></li>
      <li><b>timestamp</b> - UTC<b>毫秒</b>时间戳</li>
      <li><b>sign</b> - 请求参数签名</li>
    </ul>
  auth_para_recv : |
    另外我们提供可选的<code>recv_window</code>参数（单位是毫秒，默认值为<code>5000</code>），来指定请求在多长时间内有效，同时用来防止重放攻击。
  auth_aside_timestamp: |
    注意，timestamp参数必须符合如下规则: <b>server_time - recv_window <= timestamp < server_time + 1000</b>，其中server_time是Bybit服务器时间，您可以通过<a href="#t-servertime">服务器时间接口</a>获取。
  spot_auth_para_recv : |
    另外我们提供可选的<code>recvWindow</code>参数（单位是毫秒，默认值为<code>5000</code>），来指定请求在多长时间内有效，同时用来防止重放攻击。
  spot_auth_aside_timestamp: |
    注意，timestamp参数必须符合如下规则: <b>serverTime - recvWindow <= timestamp < serverTime + 1000</b>，其中serverTime是Bybit服务器时间，您可以通过<a href="#t-servertime">服务器时间接口</a>获取。

  constructingtherequest: 构建请求
  auth_codequote_construct1a:
    拼接参数示例（以查询账号余额接口为例）：
  auth_codequote_construct1b:
    参数按照 <b>字母顺序</b> 排列，然后计算<code>sign</code>。
  auth_codequote_construct2: |
    <b>GET</b>请求格式（查询账号余额）:
  auth_codequote_construct3: |
    <b>POST</b>请求格式（创建订单）:
  auth_para_construct1:
    <p>1. 所有参数按照字母顺序排序，然后按照<a href="https://en.wikipedia.org/wiki/Query_string">query string</a>格式拼接。</p>
  auth_para_construct2:
    <p>2. 使用<code>HMAC_SHA256</code>算法对第1步中拼接的query string签名，并转换为16进制字符串，得出<code>sign</code>参数。</p>
  auth_para_construct3:
    <p>3. 将<code>sign</code>参数加到请求参数中即可；注意<code>GET</code>和<code>POST</code>请求参数格式不同，详见右边示例。</p>
  auth_aside_signature:
    <a href="https://github.com/bybit-exchange/api-connectors/tree/master/encryption_example">签名计算示例</a>.
  spot_auth_aside_signature:
    <a href="https://github.com/bybit-exchange/api-connectors/tree/master/encryption_example">签名计算示例</a>.

  # Market Data Endpoints
  marketdata: 行情接口
  market_para_auth: 以下市场行情数据接口不需要验权.
  ### Symbols
  spotGetSymbols: 获取币对



  ### Orderbook
  orderbook: Orderbook
  market_para_orderbook: 获取Bybit当前Orderbook信息.
  market_aside_orderbook: 响应数据是当前时间的切片数据.
  ### Query Kline
  querykline: 查询K线数据
  market_para_querykline: 查询K线数据
  linear_market_para_querykline: |
    <p>查询标记价格K线数据, 请浏览<a href="#t-markpricekline">Mark Price Kline</a> 接口</p>
  ### Query Index Price Kline
  queryindexpricekline: 查询指数价格K线数据
  ### Query Premium Index Kline
  querypremiumindexkline: 查询溢价K线数据
  ### Latest Information for Symbol
  latestsymbolinfo: 合约最新信息
  market_para_symbol: 获取Bybit的最新合约信息
  ### Public Trading Recordsmarketfundingrate
  publictradingrecords: 平台交易历史数据
  market_para_records: 获取Bybit的最近成交数据。如果您想获取历史所有的成交记录，请通过<a href="https://public.bybit.com">这里</a>下载历史行情。
  ### Get the Last Funding Rate
  fundingRate: 查询上个周期的资金费率
  market_para_fundingRate: UTC时间每天0点、8点、16点产生一个资金费率。 假设当前时间是UTC12点，则返回的是上一次结算即UTC8点产生的资金费率。
  ### Query Symbol
  querysymbol: 查询合约信息
  market_para_querySymbol: 获取合约信息.

  ### Query Liquidated Orders
  query_liqrecords: 查询强平订单数据
  market_para_query_liqrecords: 查询强平订单数据，查询范围是最近七天的数据。

  ### Advanced data
  advanceddata: 平台进阶数据
  market_para_advanceddata: 获取Bybit的进阶数据。
  #### Market Funding Rate
  marketfundingrate: 资金费率
  market_para_marketfundingrate: 获取Bybit近一个月的资金费率。
  #### Market Open Interest
  marketopeninterest: 未平合约持仓数量
  market_para_marketopeninterest: 获取Bybit各个合约的持仓数量
  #### Market Account Ratio
  marketaccountratio: 用户多空持仓比率
  market_para_marketaccountratio: 获取Bybit平台用户多空持仓比率
  #### Market Top Account Ratio
  marketeliteratio: 精英账户多空持仓账户比
  market_para_marketeliteratio: 获取Bybit精英账户多空持仓账户比
  #### Market Big Deal
  marketbigdeal: 主动成交大额订单
  market_para_marketbigdeal: 获取Bybit主动成交大于500000USD的订单，时间范围是最近24h内。

  # Abandoned Endpoints
  abandonedendpoints: 废弃接口

  # Account Data Endpoints
  accountdata: 账户/交易接口
  account_para: 以下账户/交易接口都需要鉴权.
  ## Active Orders
  activeorders: 活动单
  ### Place Active Order V2
  placeactive: 创建活动委托单
  account_para_placeActive: |
    <p>市价活动委托: 一个传统的市场价格订单,会以当前的最优价格为您成交订单。当且仅当选择市价单时，<code>price</code>可为空！<b>为了保护市价单遭遇严重的滑点，Bybit将市价单转为限价单进入撮合，买单价格高于最优卖价，卖单价格低于最优买价。限价价格和成交价格均可通过用户成交记录接口查询。</b></p>
    <p>限价活动委托: 您可以为您的订单设置一个执行价格，当市场价格达到您的设置价格时，系统会为您成交订单。</p>
    <p><b>止盈止损: 您仅能在开仓时设置止盈止损条件单，一旦持有仓位后提交活动委托时关联的止盈止损则不会生效。</b></p>
    <p>委托数量: 表示您要购买/卖出的永续合约数，对于委托数量目前Bybit只允许提交正整数。</p>
    <p>委托价格: 如果是下<b>限价单</b>，该参数为<b>必填</b>. 在没有仓位时，做多的委托价格需高于市价的10%、低于1百万。如有仓位时则需优于强平价。价格增减最小单位请参考<a href="#t-querysymbol">交易对接口</a>响应中的<b>price_filter</b>字段。</p>
    <p>自定义条件单ID: 您可以自定义活动委托订单ID，我们会为您关联到系统的订单ID，并把系统的唯一订单ID在活动委托创建成功后一并返回给您，您可以使用该订单ID去取消活动委托，同时要求您传递的自定义订单ID<code>最大长度不超过36个字段且唯一</code>。</p>
    <p><b>每个账户最多可同时持有500个活动订单。这是针对合约的，因此可以允许出现例如：账户同时持有300个BTCUSD的活动单、280个ETHUSD合约的活动单。</b></p>
    <p><b>当您达到订单上限的时候的时候，仍然可以下单设置了参数<code>reduce_only</code> 或 <code>closeOnTrigger</code>的订单。</b></p>
  ### Get Active Order
  getactive: 查询活动委托
  a_getactive: 查询活动委托
  account_para_getActive: |
    <p>获取我的活动委托单列表。</p>
    <p>创建/取消订单是异步的，因此<b>该接口可能返回的数据可能会有延迟</b>。如果要获取订单的实时信息，可以调用接口<a href="#t-queryactive">实时查询活动单信息</a>.</p>
  account_row_comment_orderId: 订单ID
  account_row_comment_orderStatus: 指定订单状态查询订单列表。不传该参数则默认查询所有状态订单。该参数支持多状态查询，状态之间用英文逗号分割。
  account_row_comment_req_orderStatus: 指定订单状态查询订单列表。不传该参数则默认查询所有状态订单
  account_row_comment_stopOrderStatus: 指定订单状态查询订单列表。不传该参数则默认查询<code>Untriggered</code>,<code>Active</code>,<code>Deactivated</code>这三种状态的订单列表。该参数支持多状态查询，状态之间用英文逗号分割。
  account_row_comment_req_stopOrderStatus: 指定订单状态查询订单列表。不传该参数则默认查询所有状态订单
  ### Cancel Active Order V2
  cancelactive: 撤销活动委托单
  account_para_cancelActive: |
    <p>所有撤销活动委托都必须填写<code>order_id</code>或<code>order_link_id</code>。 <code>order_id</code> - 当您成功创建了活动委托时会为您返回36位唯一的订单ID。</p>
    <p>您可以撤销未成交、部分成交的活动委托单。但全部成交的活动委托不可取消。</p>
  ### Cancel All Active Orders
  cancelallactive: 撤销所有活动委托单
  account_para_cancelAllActive: |
    <p>撤销所有未成交、部分成交的活动委托单。但全部成交的活动委托不可取消。</p>
  account_aside_cancelAllActive:
    注意，此api每调用一次会导致<code>rate_limit</code>扣减10
  ### Replace Active Order
  replaceactive: 修改活动单信息
  a_replaceactive: 修改活动单信息
  account_para_replaceActive: |
    <p>本接口可以修改您的活动单信息.</p>
  account_aside_replaceActive:
    请注意，只有未成交或未完全成交的订单才可以被修改。
  ### Query Active Order (real-time)
  queryactive: 实时查询活动委托
  account_para_queryActive: 实时查询活动委托。当传递参数<code>order_id</code>或<code>order_link_id</code>其中任意一个时，将返回单条订单数据，如果参数<code>order_id</code>和<code>order_link_id</code>都不传递时，将返回所有<b>未成交</b>的订单，最多500条。
  a_getrisklimit: 查询风险限额表
  a_setrisklimit: 设置风险限额
  ## Conditional Orders
  ### Place Conditional Order
  conditionalorders: 条件单
  placecond: 创建条件委托单
  a_placecond: 创建条件委托单
  account_para_placeCond: |
    <p>市价条件委托: 一个传统的市场价格订单,会以当前的最优价格为您成交订单。当且仅当选择市价单时，'price', '可为空！</p>
    <p>限价条件委托: 您可以为您的订单设置一个执行价格，当市场价格达到您的设置价格时，系统会为您成交订单。</p>
    <p>止盈止损: 您仅能在开仓时设置止盈止损条件单，一旦持有仓位后提交活动委托时关联的止盈止损则不再有效。一旦持仓后，当创建订单后发送的止盈止损信息将不再有效。</p>
    <p>委托数量: 表示您要购买/卖出的永续合约数，对于委托数量目前Bybit只允许提交正整数。</p>
    <p>委托价格: 表示您期望购买/卖出永续合约的价格，可以根据<a href="#t-querysymbol">交易对接口</a>查询不同symbol价格阶梯。</p>
    <p>条件委托触发价格: 您可以为您的条件委托单设置一个触发价格，条件委托单不进入委托表（Order Book)，只有触发条件成立如市场价格到达触发价格时，条件委托单才会进入交易系统。当市场价格到达触发价格：1）您的限价条件委托单进入Order Book，等待被执行；2）您的市价条件委托单将按照市场最优价格立即被执行。</p>
    <p>自定义条件单ID: 您可以自定义活动委托订单ID，我们会为您关联到系统的订单ID，并把系统的唯一订单ID在活动委托创建成功后一并返回给您，您可以使用该订单ID去取消活动委托，同时要求您传递的自定义订单ID最大长度不超过36个字段且唯一。</p>
  account_aside_placeCond:
    请注意:只允许最多创建10个条件委托单
  account_aside_placeCond_linear:
    <p>请注意:只允许最多创建10个条件委托单</p>
  account_aside_placeActive_linear_warn:
    <p>请注意:<p>
    <p><code>ret_code</code>=0 和 <code>ext_code</code>="" 表示下单成功<p>
    <p><code>ret_code</code>=0 和 <code>ext_code</code>!=""表示下单成功，但是部分参数设置失败<p>
    <p><code>ret_code</code>!=0 表示下单失败<p>
    <p><code>ext_code</code> 详情参阅 <a href="#t-errors">Errors</a></p>

  ### Get Conditional Order
  getcond: 查询条件委托
  a_getcond: 查询条件委托
  account_para_getCond:
    <p>获取我的条件委托单列表。</p>
    <p>创建/取消订单是异步的，因此<b>该接口可能返回的数据可能会有延迟</b>。如果要获取订单的实时信息，可以调用接口<a href="#t-querycond">实时查询条件单信息</a>。</p>
  ### Cancel Conditional Order
  cancelcond: 撤消条件委托单
  a_cancelcond: 撤消条件委托单
  account_para_cancelCond: |
    <p>您可以撤销所有未被激活的条件委托,或止盈止损单。本质上所有条件委托在被激活后都是属于活动委托，所以条件委托一旦被激活，您需要通过调用取消活动委托接口来取消所有未成交、部分成交的活动委托单。同样全部成交的活动委托不可取消。</p>
  ### Cancel All Conditional Orders
  cancelallcond: 撤消全部条件委托单
  account_para_cancelAllCond: 撤销所有未被激活的条件委托。本质上所有条件委托在被激活后都是属于活动委托，所以条件委托一旦被激活，您需要通过调用取消活动委托接口来取消所有未成交、部分成交的活动委托单。同样全部成交的活动委托不可取消。
  account_aside_cancelAllCond:
    注意，此api每调用一次会导致rate_limit扣减10
  ### Replace Conditional Order
  replacecond: 修改条件委托单
  a_replacecond: 修改条件委托单
  account_para_replaceCond:
    <p>修改未触发的条件单。</p>
  account_aside_replaceCond: |
    请注意，只有未触发的条件单才能被修改。
  ### Query Conditional Order (real-time)
  querycond: 实时查询条件委托
  account_para_queryConditional: 实时查询条件委托。当传递参数<code>order_id</code>或<code>order_link_id</code>其中任意一个时，将返回单条订单数据；如果参数<code>order_id</code>和<code>order_link_id</code>都不传递时，将返回所有<b>未成交</b>的订单，最多50条。
  account_para_queryConditionalNote: <b>条件单触发后，在系统内部会成为活动单，实际上，返回结构体中的<code>order_id</code>等同于请求参数的<code>stop_order_id</code></b>

  ## Leverage
  leverage: 用户杠杆
  ### User Leverage
  getleverage: 用户杠杆
  account_para_userLeverage: 获取用户杠杆。
  ### Change User Leverage
  setleverage: 修改杠杆
  account_para_setleverage: |
    <p>修改杠杆。</p>
  account_aside_setleverage: 该接口仅涉及逐仓。如果你想使用全仓，请使用<a href="#t-marginswitch">全仓/逐仓切换</a>
  ## Position
  position: 持仓
  ### My Position V2 (real-time)
  myposition: 获取持仓（实时）
  account_para_myPosition: 获取我的仓位列表。通过该接口可以获取当前用户的持仓信息，如持仓数量、账户余额等信息
  ### Change Margin
  changemargin: 更新保证金
  account_para_changeMargin: 更新保证金。
  account_aside_changeMargin: 修改保证金不能低于<a href="https://help.bybit.com/hc/zh-cn/articles/360039261174-%E8%B5%B7%E5%A7%8B%E4%BF%9D%E8%AF%81%E9%87%91%E8%AE%A1%E7%AE%97-%E5%8F%8D%E5%90%91%E6%B0%B8%E7%BB%AD-">起始保证金</a>，如果当前为全仓模式则不能调整保证金。请查看<a href="#t-setleverage">修改杠杆</a>了解更多信息。
  ### Set Trading-Stop
  tradingstop: 设置止盈止损
  account_para_tradingStop: 设置仓位止盈止损、追踪止损。
  account_para_tradingStop_linear: 设置仓位止盈止损、部分止盈止损、追踪止损。处于<a href="#t-switchmode">partial mode</a>模式，设置部分止盈止损单，不会覆盖其他部分止盈止损设置
  account_aside_tradingStop: 传递以下参数后将会由系统创建条件单。如果仓位关闭，系统将会取消这些订单，同时调整开仓的仓位数量。
  account_row_comment_takeProfit: 不小于0,如果等于0则是取消止盈(TP)
  account_row_comment_stopLoss: 不小于0,如果等于0则是取消止损(SL)
  account_row_comment_tp_trigger_by: 止盈激活价格类型，默认为<code>LastPrice</code>
  account_row_comment_sl_trigger_by: 止损激活价格类型，默认为<code>LastPrice</code>
  account_row_comment_trailingStop: 不小于0,如果等于0则是取消追踪止损(TS)
  account_row_comment_trailingStop_active: 追踪止损触发价格。追踪止损会在到达该价格后才会触发（追踪止损默认立即触发）。
  ## Risklimit
  risklimit: 风险限额

  ## Funding
  funding: 资金费率
  ### My Last Funding Fee
  mylastfundingfee: 查询上个周期资金费用结算信息
  account_para_myLastFunding: |
    <p>UTC时间每天0点、8点、16点进行资金费用结算</p>
    <p>当前周期的资金费用结算是根据上个周期的资金费率来进行结算</p>
    <p>比如16点结算时是按照8点产生的资金费率来进行结算，而16点产生的资金费率则会在第二天0点结算时使用</p>
  ### Predicted Funding Rate and My Funding Fee
  predictedfunding: 查询预测资金费率和资金费用
  account_para_predictedFunding: 查询预测资金费率和资金费用。
  ## API Key Info
  key: APIKey信息
  account_para_key: 获取账户API密钥信息。
  ## LCP point
  lcp: 流动性贡献分
  account_para_lcp: 查询用户流动性贡献分(当天数据每小时更新一次)

  # Wallet Data Endpoints
  wallet: 钱包接口
  wallet_para: 钱包相关接口需要认证。
  ### 钱包余额
  balance: 获取钱包余额
  wallet_para_walletBalance: 获取钱包余额
  wallet_aside_walletBalance: |
    接口返回值中的<code>position_margin</code> 不同于 <a href="https://www.bybit.com/app/wallet/money">网站上的仓位保证金</a>
    <p>网站仓位保证金计算公式: <code>position_margin</code> + <code>occ_funding_fee</code> + loss(当你的可用余额不足时)</p>
  ### 资金记录
  walletrecords: 资金记录
  wallet_para_walletRecords: 查询资金记录。
  wallet_aside_walletRecords: 关于<code>Withdraw</code>和<code>Refund</code>类型数据的说明，请参考<a href="#t-withdrawrecords">提币记录</a>接口
  wallet_aside_walletRecords1: 如果用户不通过<code>coin</code>传入<code>USDT</code>，USDT记录将不会被返回给用户。
  ### Withdraw Records
  withdrawrecords: 提币记录
  wallet_para_withdrawRecords: 查询提币记录。
  wallet_aside_withdrawRecords: 请注意该接口数据和<code>资金记录</code>中<code>Withdraw</code>类型数据的区别：
    <p>在该接口中，一次提币申请对应一条记录，并且有<code>status</code>字段表示当前提币状态。</p>
    <p>在<code>资金记录</code>接口中，一旦用户申请提币，就会产生一条<code>Withdraw</code>类型的数据，并且当提币申请取消、过期、或审核拒绝的时候，资金记录中会再新增一条<code>Refund</code>类型的数据。</p>

  ### 资产兑换记录
  assetexchangerecords: 资产兑换记录
  wallet_para_assetexchangerecords: 查询资产兑换记录

  ### User Trade Records
  usertraderecords: 用户成交记录
  wallet_para_tradeRecords: 获取用户成交记录，按时间升序排列。
  wallet_aside_tradeRecords: 一个订单可能有多笔成交记录。
  wallet_row_comment_orderId: 订单号，如果没有填写订单号，将返回用户交易记录
  ## Get Risk Limit
  getrisklimit: 查询风险限额表
  account_para_getRisk: 查询风险限额表。
  account_aside_getRisk: 关于风险限额，点击<a href="https://help.bybit.com/hc/en-us/articles/360007107454-Risk-Limit-Overview">这里</a>了解更多。
  ## Set Risk Limit
  setrisklimit: 设置风险限额
  account_para_setRisk: 设置风险限额。

  # API Data Endpoints
  api: 通用数据接口
  api_para: 通用数据接口不需要鉴权。
  ### Server time
  servertime: 服务器时间
  api_para_time: 获取Bybit服务器时间
  ### Announcement
  announcement: 公告
  api_para_announcement: 获取Bybit最近30天OpenAPI公告（时间倒叙排列）

  # API Rate Limits
  ratelimits: 频率限制
  ### IP Rate Limit
  ipratelimits: IP频率限制
  ip_rate_para_understanding: |
    <p> Bybit会基于请求IP做频率限制，针对不同的请求方法有以下规则：</p>
    <ul>
    <li>
      <code>GET</code>方法:
      <ul>
        <li>每秒不超过70个请求</li>
        <li>连续2分钟内每秒不超过50个请求</li>
      </ul>
    </li>
    <li>
      <code>POST</code>方法:
      <ul>
        <li>每秒不超过50个请求</li>
        <li>连续2分钟内每秒不超过20个请求</li>
      </ul>
    </li>
    </ul>
  spot_ip_rate_para_understanding: |
       <p> Bybit会基于请求IP做频率限制，针对不同的请求方法有以下规则：</p>
       <ul>
       <li>
         <code>GET</code>方法:
         <ul>
           <li>每秒不超过70个请求</li>
           <li>连续2分钟内每秒不超过50个请求</li>
         </ul>
       </li>
       <li>
         <code>POST</code>方法:
         <ul>
           <li>每秒不超过50个请求</li>
           <li>连续2分钟内每秒不超过20个请求</li>
         </ul>
       </li>
       </ul>

  ### Account rate limit
  understandingratelimits: 账户频率限制
  spot_understandingratelimits: 账户频率限制
  rate_para_understanding: |
    Bybit基于<b>每分钟</b>的滚动时间窗口来做频率限制，并且是按<b>账户</b>（uid）和交易对（symbol）来做划分限制，每次请求API响应中都会包含如下字段：
  spot_rate_para_understanding: |
    Bybit基于<b>每分钟</b>的滚动时间窗口来做频率限制，并且是按<b>账户</b>（uid）和交易对（symbol）来做划分限制，每次请求API响应中都会包含如下字段：
  rate_text_limitStatus_understanding: 该接口当前时间窗口剩余可用请求数
  rate_text_limit_understanding: 该接口当前频率限制上限
  rate_text_limitReset: 如果您已超过该接口当前窗口频率限制，该字段表示下个可用时间窗口的时间戳（毫秒），即什么时候可以恢复访问；如果您未超过该接口当前窗口频率限制，该字段表示返回的是当前服务器时间（毫秒).
  spot_rate_text_limitStatus_understanding: 该接口当前时间窗口剩余可用请求数
  spot_rate_text_limit_understanding: 该接口当前频率限制上限
  spot_rate_text_limitReset: 如果您已超过该接口当前窗口频率限制，该字段表示下个可用时间窗口的时间戳（毫秒），即什么时候可以恢复访问；如果您未超过该接口当前窗口频率限制，该字段表示返回的是当前服务器时间（毫秒).
  ### Rate Limits For All Endpoints
  perendpoint: 接口频率限制表
  ### Order Limits
  orderlimits: 下单限制
  rate_para_limits: |
    <p>每种合约可以持有的订单数量上限：</p>
    <ul>
    <li>活动单: 500</li>
    <li>条件单: 10</li>
    </ul>
  ### How to Raise Your API Limit
  raisemylimit: 如何提高频率限制
  rate_para_raise: |
    <ul>
    <li>请先阅读<a href="#t-raisemylimit">如何满足提高频率限制条件</a></li>
    <li>请发送邮件到 <a href="mailto:api@bybit.com">api@bybit.com</a>，我们会在 1-4 个工作日内答复。邮件内容必须包含以下内容：</li>
    <ol>
      <li>您的姓名和公司名称和简介</li>
      <li>您的bybit 账号uid或注册邮箱手机号,以及您要申请提频的交易对</li>
      <li>您上个月的交易量（吃单/挂单）并提供截图</li>
      <li>简单介绍您的交易策略和为什么需要更高限频</li>
      <li>如果可以，请提供您的成交记录csv文档</li>
    </ol>
    </ul>
  ### Understanding Bybit's Liquidity System
  liquidity: Bybit流动性贡献系统
  rate_para_liquidity: |
    <p>Bybit 使用<code>报单成交率</code> 和 <code>流动性贡献打分</code>来评价用户对改善bybit可执行流动性作出的贡献。</p>
    <p>不同symbol的<code>贡献分</code>和<code>报单成交率</code>是独立计算的。</p>
  #### Order Fill Ratio (OFR) Threshold
  ofrthreshold: 报单成交率
  rate_para_threshold: |
    平台上每天提交超过<code>2000</code>个报单的账户，需要保持<code>7天</code>的报单成交率高于<code>最小报单成交率门槛值</code>，违反此规则将会被降低频率或禁用 API。
  ##### Order Fill Ratio (OFR)
  ofrratio: 报单成交率
  rate_para_ratio: |
    <ul>
    <li><code>报单成交率</code>: 定义为 一段时间段内，用户已成交报单数量占该用户已提交报单数量的比例</li>
    <li><code>已提交报单</code>: 是任何已成功发送到平台的委托</li>
    <li><code>已成交报单</code>: 是成交了任何数量的委托</li>
    <li><code>报单成交率 = ( 一段时间内用户的已成交报单数量 / 一段时间内已提交报单数量)</code></li>
    </ul>
  ##### Order Fill Ratio Example
  ofrratioExample: 报单成交率举例
  rate_para_ratioExample: |
    <p>A用户成功提交一份限价委托请求，其中包含 4 个不同价格的竞买和 2 个不同价格的竞卖，并被放入交易委托账本中。然后，该用户提交撤单请求，撤了取消了其中的2个竞买请求，并重新提交了一份竞买报单请求，其中包括两个新的竞买报单。</p>
    <p>此时，B用户提交了一份市价卖单，该指令与A用户在委托队列中的 2 个竞买发生了成交。</p>
    <p>该时间段内的报单成交率:</p>
  rate_pre_ratioExampleA: |
    A用户：
    已成交报单数量 = 2
    已提交报单数量 =8
    报单成交率 = 2 / 8 = 25％
  rate_pre_ratioExampleB: |
    B用户：
    已成交报单数量 = 1
    已提交报单数量 =1
    报单成交率 = 1 / 1 = 100％
  ##### Minimum OFR Threshold
  ofrminimum: API 交易用户最小报单成交率门槛
  rate_para_minimum: <code>7</code>日内API 交易用户最小报单成交率门槛 0.1%
  spot_rate_para_minimum: <code>7</code>日内API 交易用户最小报单成交率门槛 0.1%
  #### API Request Frequency Limits
  frequencylimit: API 交易用户提高频率的条件
  rate_para_frequency:
    平台会根据API用户近<code>7</code>日挂单对<code>平台流动性贡献分</code>的最低值，对满足条件的用户进行提高频率上限的奖励
  column_LCP: 流动性贡献分
  column_frequencyLimit: Order频率限制
  row_frequencyLimit_800: 800次 / 每分钟
  row_frequencyLimit_600: 600次 / 每分钟
  row_frequencyLimit_400: 400次 / 每分钟
  row_frequencyLimit_200: 200次 / 每分钟
  row_frequencyLimit_100: 100次 / 每分钟
  ##### Liquidity Contribution Points (LCP)
  liquidityPoints: 流动性贡献打分
  rate_para_liquidityPoints: |
    <ul>
    <li><code>流动性贡献打分 = 有效价格挂单自占比 * 有效价格挂单量平台占比 * 100</code></li>
    </ul>
  ##### Explanation
  ratelimitsexplanation: 名词解释
  ###### Effective Price Range
  pricerange: 有效价格挂单
  rate_para_priceRange: |
    <ul>
    <li><p><code>有效价格挂单</code>: 定义为在距离盘口中间价较近的规定范围内的挂单被定义为有效价格挂单.</p>
    </li>
    <li><p><code>最佳竞价中间价</code>:  (最佳竞买价 + 最佳竞卖价) 的均值</p>
    </li>
    <li><p><code>最佳竞价中间价 = 1/2*（最佳竞买价 + 最佳竞卖价）</code></p>
    </li>
    </ul>
  ###### Effective Price Range example
  pricerangeExample: 有效价格范围
  rate_pre_priceRangeExample: |
    [最佳竞价中间价 - 3 * 价格最小变动单位, 最佳竞价中间价 + 3 * 价格最小变动单位]

    举例：
     BTC最佳竞买价 = 10000
     BTC最佳竞卖价 = 10001
     “有效价格”范围：
     [(10000 + 10001) / 2 - 3* 0.5, (10000 + 10001) / 2 + 3* 0.5] = [9999,10002]
  ###### POU
  pou: 有效价格挂单自占比
  rate_para_POU: |
    <ul>
    <li><code>有效价格挂单自占比</code>: 定义为该用户在 <code>有效价格 </code> 范围内的挂单数量占该用户在当前时间提交的挂单总数量的比例。</li>
    </ul>
    <p>每秒计算 该用户在<code>有效价格</code>范围内的报挂单数量 /该用户提交的挂单总数量，然后每日计算用户当日占比的平均值。</p>
  ###### POU example
  pouExample: 有效价格挂单自占比举例：
  rate_para_POUExample: 某用户在交易委托账本中共有 10000张竞价买单，其中 2000 张报价为9995，8000 张报价为9999 当时“有效价格”范围：[9999, 10002]
  rate_pre_POUExample: |
    该用户在<code>有效价格</code>范围内的挂单数量 = 8000
    该用户提交的挂单总数量 = 10000
    有效价格挂单自占比 = 8000 / 10000 = 0.8

  ###### POA
  poa: 有效价格挂单平台占比
  rate_para_POA: |
    <ul>
    <li><code>有效价格挂单平台占比</code>: 定义为该用户在有效价格范围内的挂单数量占平台所有用户在<code>有效价格</code>范围内的挂单总数量的比例.</li>
    </ul>
    <p>每秒计算 该用户在<code>有效价格</code>范围内的挂单数量 / 平台所有用户在<code>有效价格</code>范围内的挂单总数量，然后每日计算用户当日占比的平均值。</p>
  spot_poa: 有效价格挂单平台占比
  spot_rate_para_POA: |
    <ul>
    <li><code>有效价格挂单平台占比</code>: 定义为该用户在有效价格范围内的挂单数量占平台所有用户在<code>有效价格</code>范围内的挂单总数量的比例.</li>
    </ul>
    <p>每秒计算 该用户在<code>有效价格</code>范围内的挂单数量 / 平台所有用户在<code>有效价格</code>范围内的挂单总数量，然后每日计算用户当日占比的平均值。</p>
  ###### POA example
  poaExample: 有效价格挂单平台占比举例：
  rate_para_POAExample: 某一秒，用户在“有效价格”范围：[9999, 10002] 内的挂单有8000张，全平台的交易委托账本在 [9999, 10002] 内的挂单总量为200000。
  rate_pre_POAExample: |
    该用户在<code>有效价格</code>范围内的挂单数量 = 8000
    平台所有用户在<code>有效价格</code>范围内的挂单总数量 = 200000
    有效价格挂单量平台占比 = 8000 / 200000 = 0.04
  rate_aside_POAExample: 如果机制有更新，我们会提前通过官网提前通知。
  spot_rate_aside_POAExample: 如果机制有更新，我们会提前通过官网提前通知。

  # WebSocket Data
  websocket: WebSocket接口
  ## Authentication
  websocketauthentication: 鉴权/认证
  websocket_codequote_auth: |
    认证方式:
  websocket_codequote_auth1: |
    方法1: 建立连接时附带验证信息.
  websocket_codequote_auth2: |
    方法2: 建立连接后发送auth请求验证.
  websocket_para_endpoint: |
    Websocket服务器地址:
    <ul>
    <p>
      <li>测试网:
        <span id="testnet_address">wss://stream-testnet.bybit.com/realtime</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
    <p>
      <li>主网(请根据您的网络情况选择以下任意一个地址使用):<br/>
        <span id="mainnet_address">wss://stream.bybit.com/realtime</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        <br/>
        <span id="mainnet_address_2">wss://stream.bytick.com/realtime</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
    </ul>
  spot_websocket_para_endpoint: |
    Websocket服务器地址:
    <ul>
    <p>
      <li>测试网:
        <span id="testnet_address">公共Topics: wss://stream-testnet.bybit.com/spot/quote/ws/v1</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        <br/>
        <span id="testnet_address">公共Topics2: wss://stream-testnet.bybit.com/spot/quote/ws/v2</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        <br/>
        <span id="testnet_address_2">私有Topics: wss://stream-testnet.bybit.com/spot/ws</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
    <p>
      <li>主网(请根据您的网络情况选择以下任意一个地址使用):<br/>
        <span id="mainnet_address">公共Topics: wss://stream.bybit.com/spot/quote/ws/v1</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        <br/>
        <span id="mainnet_address">公共Topics2: wss://stream.bybit.com/spot/quote/ws/v2</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        <br/>
        <span id="mainnet_address_2">私有Topics: wss://stream.bybit.com/spot/ws</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
    <p>所有private接口都需要认证，public 接口不需要认证.</p>
    </ul>
  websocket_aside_auth: <b>公共类</b>topics不需要进行验证. 以下部分只适用于 <b>私有</b> 类接口.
  websocket_para_methods: 如右侧代码区所示，一共有两种验证方法.
  websocket_aside_signature: 点击查看 <a href="https://github.com/bybit-exchange/api-connectors/tree/master/encryption_example">示例加密算法</a>.
  websocket_best_practices: 由于网络的复杂性，您和Bybit的websocket链接随时可能会断开，为了保证您能及时收到websocket推送消息，强烈建议您按照以下建议处理网络异常：
    <p>1. 通过<a href="#t-heartbeat">发送心跳包</a>保持连接</p>
    <p>2. 一旦发现连接断开，应该立刻重新建立连接。</p>
  ## How to Send the Heartbeat Packet
  heartbeat: 心跳包/Ping
  websocket_codequote_heartbeart: 发送心跳包
  websocket_codequote_heartbeat: 如何发送心跳包
  websocket_aside_heartbeat: 由于网络或者程序不稳定,我们强烈建议您使用 <code>ping</code> 心跳包来维持连接. 心跳包建议每30秒发送一次.
  ## Rate Limits
  websocketlimit: 频率限制
  websocket_para_limit: 注意，每个api_key最多可以保持20个Websocket连接.超过20个连接后的新连接会被服务器拒绝.
  ## How to Subscribe to Topics
  subscribe: 订阅方式
  ### Understanding Websocket Filters
  websocketfilters: Websocket订阅方式
  websocket_codequote_filters1: 直接订阅
  websocket_codequote_filters2: 通过分隔符来订阅多个topic
  websocket_codequote_filters_linear: 订阅多个topic
  websocket_codequote_filters3: 通过匹配符来订阅多个topic
  websocket_para_filters: |
    建立连接后, 可以通过发送JSON请求来订阅topic. 其中binary为false表示不进行压缩传输，为true时表示以GZIP格式进行压缩，请求格式如下:
  websocket_para_filters1: |
    <p>您也可以同时订阅多个感兴趣的topic，订阅方式如下</p>
  websocket_para_filters2: |
    <p>您可以使用管道符号(<code>|</code>)来分割多个参数，前提是这些参数都是合法的.</p>
    <p>您还可以使用匹配符号(<code>*</code>)来匹配多个topic，具体用法见右侧代码栏</p>
  websocketunsubfilters: Websocket取消订阅方式
  websocket_codequote_unsubfilters: 取消订阅
  websocket_para_unsubfilters: |
    您可以在不断开连接的前提下动态调整您要订阅的信息，取消订阅方式如下:
  ### Intervals
  intervals: 推送周期
  websocket_para_intervals: 如果topic名中包含一个<code>推送周期</code>，如<code>100ms</code>, 那么表明这个topic是每隔<code>100ms</code>推送一次.否则, 这个topic<code>只要有消息就会推送</code>.

  ## Understanding the Subscription Response
  websocketresponse: 订阅结果
  websocket_codequote_response: 订阅推送
  websocket_para_response: 每个topic订阅请求都会有对应的响应，您可以根据返回结果判断是否订阅成功。
  ## Public Topics
  publictopics: 公共 Topics
  publictopics_v2: 公共 Topics V2
  ### orderBookL2_25
  websocketorderbook25: orderBook25档
  websocket_para_orderbook251: 获取25档orderbook数据.
  orderbookL2_200_link: 想要更多深度？请使用<a href="#t-websocketorderbook200">orderBookL2_200</a> topic
  websocket_para_orderbook252: |
    <p>订阅成功后, 会立即得到一个当前快照包的推送信息. orderbook数据按订单价格升序排列, 从最低价格的买单到最高价格的卖单.</p>
    <p>快照包之后，每当orderbook发生变化，websocket都会推送这些变化的增量数据.</p>
  ### orderBookL2_200
  websocketorderbook200: orderBook200档
  websocket_para_orderbook200: |
    <p>获取200档orderbook数据.</p>
    <p>订阅成功后, 会立即得到一个当前快照包的推送信息. orderbook数据按订单价格升序排序, 从最低价格的买单到最高价格的卖单.</p>
    <p>快照包之后，每当orderbook发生变化，websocket将会继续推送这些增量数据.</p>
  ### trade
  websockettrade: 平台成交
  websocket_para_trade: 获取Bybit平台最近成交数据.
  ### insurance
  websocketinsurance: 保险基金
  websocket_para_insurance: 获取保险基金数据.
  websocket_aside_insurance: 注意<code>wallet_balance</code>的单位为<code>聪</code>, 1聪等于一百万分之一个比特币.
  ### instrument_info
  websocketinstrumentInfo: 行情
  websocket_para_instrumentInfo: 获取合约的最新数据.
  websocket_aside_instrumentInfo1: |
    注意，该topic只会推送<code>update</code>数据. <code>delete</code>和<code>insert</code>数据都为空. 如果<code>update</code>数据也为空,则表明信息没有发生变化.
  websocket_aside_instrumentInfo2: |
    一些值以以科学计数法的形式被返回. 根据这个值的key的后缀, 如<code>total_turnover_e8</code>,则表明这个数字需要除以10^8. <br/>
    例如<code>last_price_e4</code>的值为<code>81585000</code>, 那么<code>81585000 / 10^4</code>,等于<code>8158.5</code>才是这个字段的真实值.
  ### klineV2
  websocketklineV2: K线
  websocket_para_klineV2: |
    <p>目前所支持的周期:</p>
    <ul>
    <li>1 3 5 15 30</li>
    <li>60 120 240 360</li>
    <li>D</li>
    <li>W</li>
    <li>M</li>
    </ul>
  websocket_aside_klineV2: |
    注意如果字段<code>confirm</code>为<code>True</code>, 则表明这是这根K线的最后一个tick；否则，这只是一个快照数据，即中间价格
  websocketkline: K线

  ## Private Topics
  privatetopics: 私有 Topics
  ### position
  websocketposition: 持仓
  ### execution
  websocketexecution: 个人成交
  ### order
  websocketorder: 活动单
  ### stop_order
  websocketstoporder: 条件单

  # Archive Data
  archivedata: 归档数据
  historicalmarketdata: 历史行情
  archive_data_intro: 您可以在这里获取Bybit <a href="https://public.bybit.com">历史行情数据</a>。

  # Error Definitions
  errors: 错误码
  spot_errors: 错误码

  # ENUMs Definitions
  enums: 枚举定义
  ENUMs_para: 以下是各个接口请求参数或返回结果中定义的枚举。
  ## Wallet fund type (`wallet_fund_type`)
  deposit:      "入金"
  withdraw:     "提币"
  realisedpnl:  "已结盈亏"
  commission:   "佣金"
  refund:       "系统返还（如提币审核拒绝返还、用户提币取消返还）"
  prize:        "赠金"
  exchangeOrderWithdraw: "兑出"
  exchangeOrderDeposit:  "兑入"
  ## Withdraw status (`status`)
  toBeConfirmed:  "待（用户邮件）确认"
  underReview:    "审核中"
  pending:        "待打款"
  success:        "打款成功"
  cancelByUser:   "用户取消"
  reject:         "审核拒绝"
  expire:         "提币请求过期"
  ## Order type (`order_type`)
  limit:  "限价单"
  market: "市价单"
  ## Quantity (`qty`)
  quantity:
    <ul>
    <li>最大值1百万 (<code>1000000</code>)</li>
    <li>必须是正整数：
    <ul>
    <li><code>40</code> - 合法</li>
    <li><code>30.5</code> - 非法</li>
    </ul>
    </li>
    </ul>
  ## Price (`price`)
  price: |
    <ul>
    <li>活动单<ul>
    <li>必须是<code>tick_size</code>的整数倍<ul>
    <li>当前symbol信息(如<code>tick_size</code>)，可以通过<a href="#t-querysymbol">交易对接口</a>接口获得。</li>
    </ul>
    </li>
    <li>必须小于一百万 (<code>1000000</code>)</li>
    <li>如果用户没有未平仓，则价格必须大于市场价格的10%<ul>
    <li>如, 若当前市场价(last price) 为 10314, 那么下单价格的最小值为 1031.5。</li>
    <li>伪代码(假设价格是0.5的增量):<pre class="center-column">
    IF price > (last_price * 0.1)
    // 发送订单
    ELSE
    //  不会发送订单，因为价格将不被系统接受
    </pre></li>
    </ul>
    </li>
    <li>如果已持有仓位，那么价格必须高于强平价格<ul>
    <li>如, 若多仓的强平价格为 5176.5 那么价格最小为 5177. 在做空的情况下，价格必须低于强平价格。</li>
    </ul>
    </li>
    </ul>
    </li>
    <li>条件单<ul>
    <li>必须大于等于 <code>1</code></li>
    </ul>
    </li>
    </ul>
  ## Time in force (`time_in_force`)
  goodTillCancel:     "一直有效至取消"
  immediateOrCancel:  "立即成交或取消"
  fillOrKill:         "完全成交或取消"
  postOnly:           "被动委托"
  ## Trigger price type (`trigger_by`)
  lastPrice:  "最新市价"
  indexPrice: "指数价格"
  markPrice:  "标记价格"
  ## Order (`order`)
  para_order: 排序方向
  desc: "(default)"
  asc:  ""
  ## Order status (`order_status`)
  para_orderStatusGet: |
#    在查询接口中，您可以通过逗号分割来指定查询多种状态，如: <code>Filled,New</code>
  created1:         ""
  rejected1:        ""
  new1:             ""
  partiallyFilled1: ""
  filled1:          ""
  cancelled1:       ""
  pendingCancel1:   "- 撮合引擎收到取消指令但不一定会被成功取消"
  ## Stop order status (`stop_order_status`)
  active      : "- 条件单触发成功且下单成功"
  untriggered : "- 等待市价触发条件单"
  triggered   : "- 市价已触发条件单"
  cancelled   : "- 取消"
  rejected    : "- 条件触发成功但下单失败"
  deactivated1:     "- 条件单触发前被取消"
  ## Cancel type (`cancel_type`)
  cancelByReduceOnly:   ""
  cancelByPrepareLiq:   "- 仓位进入强平导致取消订单"
  cancelByPrepareAdl:   "- 自动减仓导致取消订单"
  cancelByAdmin:        ""
  cancelByTpSlTsClear:  "- 止盈止损单被取消"
  cancelByPzSideCh:     "- 该订单在触发止盈止损后被取消"
  ## Create type (`create_type`)
  createByUser:                 ""
  createByClosing:              ""
  createByAdminClosing:         ""
  createByStopOrder:            ""
  createByTakeProfit:           ""
  createByStopLoss:             ""
  createByTrailingStop:         ""
  createByLiq:                  "- 部分平仓。用户触发强平时，可以通过调整风险限额，部分平仓，来避免强平"
  createByAdl_PassThrough:      "- 强平减仓"
  createByTakeOver_PassThrough: "- 强平接管"
  ## Exec type (`exec_type`)
  exec_trade: "普通交易"
  exec_adlTrade: "自动减仓"
  exec_funding: "资金费率"
  exec_bustTrade: "强制平仓"
  ## Liquidity type (`last_liquidity_ind`)
  addedLiquidity: "maker成交"
  removedLiquidity: "taker成交"

  ## Tick direction type (`tick_direction`)
  tick_direction: "表示价格的波动，相对于上一笔交易是涨还是跌"
  plusTick: "涨"
  zeroPlusTick: "跟上一次持平，上一次跟上上一次是涨"
  minusTick: "跌"
  zeroMinusTick: "跟上一次持平，上一次跟上上一次是跌"

  ## TpSl Mode type (`tp_sl_mode`)
  tp_sl_mode: "止盈止损模式"
  Full: "仓位止盈止损"
  Partial: "部分止盈止损"


  # Error Code
  errors_intro: Bybit使用以下HTTP Code和错误码：
  spot_errors_intro: Bybit使用以下HTTP Code和错误码：

  http_200: 请求有效
  http_403: 拒绝访问
  http_404: 访问路径不存在
  # spot
  spot_http_200: 请求有效
  spot_http_403: 拒绝访问
  spot_http_404: 访问路径不存在

  err_10000: 处理请求时发生未知错误
  err_10001: 内部错误; 无法处理您的请求。 请再试一次.
  #spot
  err_1001: 参数错误
  err_1002: 您无权执行此请求。请求需要发送API Key，我们建议在所有的请求中都附加API Key
  err_1003: 排队的请求过多。请求权重过多； 请使用websocket进行实时更新。请求权重过多； 当前限制为每分钟％s请求权重。 请使用websocket进行实时更新，以避免轮询API。 请求权重过多； IP被禁止，直到％s。 请使用websocket进行实时更新，以免被禁。
  err_1006: 从消息总线收到意外的响应。 执行状态未知。请向客服求证关于此订单的详细状态和其他信息。
  err_1007: 等待后端服务器响应超时。 发送状态未知； 执行状态未知。
  err_1015: 新订单太多。请减少你的请求频率。新订单太多； 当前限制为每％s ％s个订单。
  err_1016: 该服务不可用


  err_10002: 请求过期，请检查 <code>timestamp</code> 和 <code>recv_window</code>
  err_10003: 无效的apikey
  err_10004: 签名错误
  err_10005: apikey权限不足
  err_10006: 请求次数超限
  err_10007: 您的请求中没有<code>api_key</code>
  err_10010: 请求ip不匹配
  err_10014: 不支持的订单组合。
  err_10015: 不支持的订单组合。
  err_10016: 服务异常或请求超时
  err_10017: 请求路径不存在或请求方法错误
  err_10018: 超过ip频率限制
  err_10020: 不支持此操作
  err_10021: 此请求的时间戳不在recvWindow之外。此请求的时间戳比服务器时间提前1000毫秒。请查证你的本地时间和服务器时间
  err_10022: 此请求的签名无效。
  err_11000: 在参数中发现非法字符。在参数'％s'中发现非法字符； 合法范围是“％s”。
  err_11001: 为此端点发送的参数太多。
  err_11002: 未发送强制性参数，该参数为空/空或格式错误。强制参数'％s'未发送，为空/空或格式错误。
  err_11003: 发送了未知参数。
  err_11004: 并非所有发送的参数都被读取
  err_11005: 参数为空。
  err_11006: 不需要时已发送参数。
  err_11011: 精度超过为此资产定义的最大值。
  err_11012: 交易对没有挂单
  err_11014: 不需要时发送了TimeInForce参数。
  err_11015: 无效 timeInForce.
  err_11016: 无效订单类型。
  err_11017: 无效买卖方向。
  err_11018: 新的客户订单ID为空。
  err_11019: 新的客户订单ID为空。
  err_11020: 无效时间间隔。
  err_11021: 无效符号。
  err_11025: 该listenKey不存在。
  err_11027: 查询间隔太大。
  err_11028: 可选参数组合无效。
  err_11030: 发送的参数为无效数据。
  err_11032: 订单价格过高
  err_11033: 订单价格过低，请查询Broker Info信息
  err_11034: 订单价格精度过长，请查询Broker Info信息
  err_11035: 订单quantity过大
  err_11036: 订单quantity小于最小值
  err_11037: 订单quantity精度过长
  err_11038: 订单价格超出允许范围
  err_11039: 订单已经被执行
  err_11040: 交易金额小于最小值
  err_11041: clientOrderId重复
  err_11042: 订单已经被撤销
  err_11043: 订单当前不在订单簿上
  err_11044: 订单已被锁定
  err_11045: 该订单类型不支持撤销
  err_11046: 订单生成超时
  err_11047: 订单撤销超时
  err_20010: NEW_ORDER_REJECTED
  err_20011: CANCEL_REJECTED
  err_20013: Order不存在
  err_20014: API-key格式无效
  err_20015: 无效的API密钥，IP或操作权限。.
  err_20016: 找不到该交易对的交易窗口。 尝试改为24小时自动报价。


  err_20001: 订单不存在
  err_20003: 缺少参数<code>side</code>
  err_20004: <code>side</code>不合法
  err_20005: 缺少参数<code>symbol</code>
  err_20006: <code>symbol</code>不合法
  err_20007: 缺少参数<code>order_type</code>
  err_20008: <code>order_type</code>不合法
  err_20009: 缺少参数<code>qty</code>
  err_20012: <code>qty</code> 必须大于0并小于1百万
  err_20017: 缺少参数<code>order_id</code>
  err_20018: 日期格式不对
  err_20019: 缺少参数<code>stop_px</code>
  err_20020: 缺少参数<code>base_price</code>
  err_20021: 缺少参数<code>stop_order_id</code>
  err_20022: 缺少参数<code>leverage</code>
  err_20023: <code>leverage</code>必须是数字
  err_20031: <code>leverage</code>必须大于0
  err_20070: 缺少参数<code>margin</code>
  err_20071: <code>margin</code>必须大于0
  err_20084: <code>order_id</code>和<code>order_link_id</code>必须二选一
  err_30001: <code>order_link_id</code>重复
  err_30003: <code>qty</code>太小
  err_30004: <code>qty</code>太大
  err_30005: <code>price</code>太大
  err_30007: <code>price</code>太小
  err_30008: <code>order_type</code>非法
  err_30009: 持仓不存在
  err_30010: 钱包余额不足
  err_30011: 由于仓位清算，不允许操作
  err_30012: 由于ADL，不允许操作
  err_30013: 持仓处于强平、ADL或其他非可操作状态
  err_30014: 平仓数量不能大于持仓数量
  err_30015: 平仓订单不合法，应和持仓方向相反
  err_30016: 平仓前请先取消止盈止损单
  err_30017: 不能低于买方向强平价格
  err_30018: 不能高于卖方向强平价格
  err_30019: 非开仓单不能使用TP/SL参数
  err_30020: 持仓已有TP/SL设置
  err_30021: 预估保证金不足
  err_30022: 预估买方向强平价格不能高于标记价格
  err_30023: 预估卖方向强平价不能低于标记价格
  err_30024: 空仓无法设置TP/SL/TS
  err_30025: 触发价格必须高于市价10%
  err_30026: 价格过高
  err_30027: 止盈价应高于上笔成交价
  err_30028: 止损价应在强平价和上笔成交价之间
  err_30029: 止损价格应在上笔成交价和清算价格之间
  err_30030: 设定的止盈价格应低于上笔成交价
  err_30031: 可用余额不足以支付订单费用
  err_30032: 订单已成交或已取消
  err_30033: 条件单的数量超限
  err_30034: 订单不存在
  err_30035: 取消订单过快
  err_30036: 订单执行后的预期仓位值超过当前风险限额
  err_30037: 订单已取消
  err_30041: 持仓不存在
  err_30042: 钱包余额不足
  err_30043: 由于仓位清算，不允许操作
  err_30044: 由于ADL，不允许操作
  err_30045: 持仓处于其他不可操作状态
  err_30049: 可用余额不足
  err_30050: 任何调整都将立即引发清算
  err_30051: 杠杆设置非法，因为它将超出您的风险限额
  err_30052: 杠杆设置非法，不能小于1
  err_30054: 保证金设置不合法
  err_30057: 请求的合约数量超过风险限额
  err_30063: 不满足只减仓的条件
  err_30067: 可用余额不足
  err_30068: 退出价值必须大于0
  err_30074: 无法创建条件单，由<code>base_price</code>和<code>stop_px</code>比较可知预期涨至<code>stop_px</code>时触发条件单，而此时<code>LastPrice</code>(或<code>IndexPrice</code>、<code>MarkPrice</code>，由<code>trigger_by</code>指定)已经达到或高于<code>stop_px</code>
  err_30075: 无法创建条件单，由<code>base_price</code>和<code>stop_px</code>比较可知预期跌至<code>stop_px</code>时触发条件单，而此时<code>LastPrice</code>(或<code>IndexPrice</code>、<code>MarkPrice</code>，由<code>trigger_by</code>指定)已经达到或低于<code>stop_px</code>
  err_33004: apikey已过期
  err_34026: 风险限额没有变化
  err_35014: 下单数量超过上限

  # Misc.
  misc_row_comment_orderLinkIdNotOrderId: 机构ID。如果未填order_id则为<b>必填</b>字段。
  misc_row_comment_orderLinkIdNotStopOrderId: 机构ID。如果未填stop_order_id则为<b>必填</b>字段。
  misc_row_comment_orderIdNotOrderLinkId: 订单ID。如果未填order_link_id则为<b>必填</b>字段。
  misc_row_comment_symbolNotOrderId: 交易对 <b>必填</b>

  misc_row_comment_orderLinkIdOrOrderId: 机构ID。
  misc_row_comment_orderIdOrOrderLinkId: 订单ID。

  # fix problem of nested common subheadings
  httprequest1: HTTP 请求
  requestparameters1: 请求参数
  httprequest_api_data: HTTP 请求
  requestparameters_api_data: 请求参数
  httprequest_wallet: HTTP 请求
  requestparameters_wallet: 请求参数




  ## LinearQuantity (`qty`)
  linear_quantity:
    <ul>
    <li>BTCUSDT 开仓最大值 100，平仓最大值 100</li>
    <li>ETHUSDT 开仓最大值 1000，平仓最大值 1000</li>
    <li>LINKUSDT 开仓最大值 10000，平仓最大值 10000</li>
    <li>LTCUSDT 开仓最大值 2000，平仓最大值 2000</li>
    <li>XTZUSDT 开仓最大值 20000，平仓最大值 20000</li>
    <li>BCHUSDT 开仓最大值 600，平仓最大值 600</li>
    <li>ADAUSDT 开仓最大值 240000，平仓最大值 240000</li>
    <li>DOTUSDT 开仓最大值 15000，平仓最大值 15000</li>
    <li>UNIUSDT 开仓最大值 10000，平仓最大值 10000</li>
    <li>XRPUSDT 开仓最大值 1000000，平仓最大值 1000000</li>
    <li>XEMUSDT 开仓最大值 250000，平仓最大值 250000</li>
    <li>SUSHIUSDT 开仓最大值 10000，平仓最大值 10000</li>
    <li>AAVEUSDT 开仓最大值 500，平仓最大值 500</li>
    <li>DOGEUSDT 开仓最大值 200000，平仓最大值 200000</li>
    <li>MATICUSDT 开仓最大值 70000，平仓最大值 70000</li>
    <li>EOSUSDT 开仓最大值 50000，平仓最大值 50000</li>
    <li>ETCUSDT 开仓最大值 2000，平仓最大值 2000</li>
    <li>BNBUSDT 开仓最大值 1500，平仓最大值 1500</li>
    <li>FILUSDT 开仓最大值 2000，平仓最大值 2000</li>
    <li>SOLUSDT 开仓最大值 3000，平仓最大值 3000</li>
    <ul>
    </ul>
    </li>
    </ul>

  ## LinearPrice (`price`)
  linear_price:
    <ul>
    <li>活动单<ul>
    <li>必须是<code>tick_size</code>的整数倍<ul>
    <li>当前symbol信息(如<code>tick_size</code>)，可以通过<a href="#t-querysymbol">交易对接口</a>接口获得。</li>
    </ul>
    </li>
    <li>必须小于一百万 (<code>1000000</code>)</li>
    <li>如果用户没有未平仓，则价格必须大于市场价格的10%<ul>
    <li>如, 若当前市场价(last price) 为 10314, 那么下单价格的最小值为 1031.5。</li>
    <li>伪代码(假设价格是0.5的增量):<pre class="center-column">
    IF price > (last_price * 0.1)
    // 发送订单
    ELSE
    //  不会发送订单，因为价格将不被系统接受
    </pre></li>
    </ul>
    </li>
    <li>如果已持有仓位，那么价格必须高于强平价格<ul>
    <li>如, 若多仓的强平价格为 5176.5 那么价格最小为 5177. 在做空的情况下，价格必须低于强平价格。</li>
    </ul>
    </li>
    </ul>
    </li>
    </ul>
    </li>
    </ul>


  err_130001: 没有获取仓位
  err_130002: 钱包数据为空
  err_130003: 仓位状态不正常
  err_130004: 活动单数量超过上限
  err_130005: 委托单价格超过允许范围
  err_130006: 委托单的数量超过允许范围
  err_130007: 委托单价格超过允许范围
  err_130008: 委托单类型无效
  err_130009: 合约数量低于最低限制
  err_130010: 委托单不存在或超时而无法操作
  err_130011: 仓位在强平过程中而无法操作
  err_130012: 仓位在减仓过程中而无法操作
  err_130013: 追踪单的追踪值无效
  err_130014: 条件单的触发价格无效
  err_130015: 条件单的预期方向和基础价格无效
  err_130016: 无效的条件单类型，不能更改价格
  err_130017: 无效的条件单类型，不能更改数量
  err_130018: 无效的追踪值
  err_130019: 无效的条件单类型，无法更改触发价格
  err_130020: 无效的条件单类型，无法更改追踪值
  err_130021: 下单成本不足
  err_130024: 不能给无仓位设置止盈止损
  err_130025: 低于10%基准价格
  err_130026: 价格太高
  err_130027: 给买方向的仓位设置的价格应该高于基准价格
  err_130028: 给卖方向的仓位设置的价格应该在基准价格和强平价之间
  err_130029: 给买方向的仓位设置的价格应该在基准价格和强平价之间
  err_130030: 给卖方向的仓位设置的价格应该低于基准价格
  err_130032: 无效的订单状态，不能取消或执行触发
  err_130033: 条件单数量大于限制10
  err_130034: 无法更改止盈/止损单
  err_130035: 太频繁取消单子，请稍后重试
  err_130037: 订单已经被取消了
  err_130040: 仓位将被强平
  err_130041: 可用余额小于0
  err_130049: 可用余额不足
  err_130050: 相应的调整将会触发强平
  err_130051: 由于风险限额，无法设置杠杆
  err_130052: 低于最低限制，无法设置杠杆
  err_130056: 仓位处于全仓中
  err_130057: 仓位size为0
  err_130058: 不能设置保证金低于最低仓位成本
  err_130059: 不能设置仓位开仓限额大于品种的限额
  err_130060: 自动追加保证金未更改
  err_130061: 没有改变费用，无效的请求
  err_130062: 不能设置开仓限额低于当前买仓位价值
  err_130063: 不能设置开仓限额低于当前卖仓位价值
  err_130064: 仅支持USDT
  err_130074: 需要价格上升，但触发价低于当前价
  err_130075: 需要价格下降，但触发价高于当前价
  err_130076: 参数无效
  err_130077: 入金请求已处理过
  err_130078: 出金请求已处理过
  err_130079: 结算当日盈亏请求已处理过
  err_130101: 无法解析的创建委托单请求
  err_130102: 无法解析的取消委托单请求
  err_130103: 无法解析的取消所有委托单请求
  err_130104: 无法解析的强平请求
  err_130105: 无法解析的预下单请求
  err_130106: 无法解析的查询委托单请求
  err_130107: 无法解析的触发激活请求
  err_130108: 无法解析的追加保证金请求
  err_130109: 无法解析的计算仓位盈亏请求
  err_130110: 无法解析的查询资产请求
  err_130111: 无法解析的查询仓位列表请求
  err_130112: 无法解析的设置自动追加保证金请求
  err_130113: 无法解析的设置费用请求
  err_130114: 无法解析的调杠杆请求
  err_130115: 无法解析的设置保证金请求
  err_130116: 无法解析的设置开仓限额请求
  err_130117: 无法解析的设置止盈止损请求
  err_130118: 无法解析的结算资金费用请求
  err_130119: 无法解析的设置仓位模式请求
  err_130120: 无法解析的入金请求
  err_130121: 无法解析的出金请求
  err_130122: 无法解析的结算当日盈亏请求
  err_130123: 无法解析的AdlExecute请求
  err_130124: 无法解析的adl clean请求
  err_130125: 平仓数量大于持仓数量
  err_130126: 盘口没有挂单
  err_130023: 本订单成交后会触发强平
  err_130127: 止盈止损及追踪止损没有修改
  err_130145: 平仓单size大于仓位可平量
  err_130149: 止盈止损设置失败，价格校验未通过
  err_130150: 操作过快，请稍后重试
  err_130151: 此模式至少有一个止盈单，不能切换止盈止损模式
  err_130152: 此模式至少有一个止损单，不能切换止盈止损模式
  err_130153: 切换失败，请先取消当前止盈止损设置
  err_130154: 切换失败，请先取消活动单的止盈止损设置
  err_130155: 剩余可设置止盈止损的数量不足
  err_130156: 不允许修改活动单价格或数量的同事修改止盈止损触发价格
  err_130157: 修改失败，此活动单已部分成交情况下，不能修改止盈止损价格
  err_130158: 仓位止盈止损模式下，不允许修改止盈止损数量
  err_130159: 部分止盈止损模式下，止盈止损设置超过20条
  err_134026: 风险限额未修改
  err_132011: 调整失败，当前仓位大小超出风险限额
  err_130090: 风险限额无效

  ### LinearPosition
  linear_row_comment_qty: 委托数量(BTC)
  linear_row_comment_reduceOnly:  <a href="https://help.bybit.com/hc/zh-cn/articles/360039260574-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%AA%E5%87%8F%E4%BB%93-"> 什么是 reduce-only order?</a>,true-平仓 false-开仓,ture时止盈止损设置不生效
  linear_row_comment_closeOnTrigger: <a href="https://help.bybit.com/hc/zh-cn/articles/360039260534-%E4%BB%80%E4%B9%88%E6%98%AF%E8%A7%A6%E5%8F%91%E5%90%8E%E5%B9%B3%E4%BB%93-"> 什么是 close on trigger order?</a>只会减少您的仓位而不会增加您的仓位。如果当平仓委托被触发时，账户上的余额不足，那么该合约的其他委托将被取消或者降低委托数量。使用此选项可以确保您的止损单被用于减仓而非加仓。
  linear_account_para_placeActive: |
    <p>市价活动委托: 一个传统的市场价格订单,会以当前的最优价格为您成交订单。当且仅当选择市价单时，<code>price</code>可为空！</p>
    <p>限价活动委托: 您可以为您的订单设置一个执行价格，当市场价格达到您的设置价格时，系统会为您成交订单。</p>
    <p><b>止盈止损: 您仅能在开仓时设置止盈止损条件单，一旦持有仓位后提交活动委托时关联的止盈止损则不会生效。如果不设置止盈止损触发条件<code>trigger_by</code>则默认使用LastPrice</b></p>
    <p>委托数量: 表示您要购买/卖出的永续合约数，对于委托数量目前Bybit只允许提交正整数。增减最小单位请参考交易对接口响应中的<code>lot_size_filter</code>字段。</p>
    <p>委托价格: 如果是下<b>限价单</b>，该参数为<b>必填</b>. 在没有仓位时，做多的委托价格需高于市价的10%、低于1百万。如有仓位时则需优于强平价。价格增减最小单位请参考<a href="#t-querysymbol">交易对接口</a>响应中的<b>price_filter</b>字段。</p>
    <p>自定义条件单ID: 您可以自定义活动委托订单ID，我们会为您关联到系统的订单ID，并把系统的唯一订单ID在活动委托创建成功后一并返回给您，您可以使用该订单ID去取消活动委托，同时要求您传递的自定义订单ID<code>最大长度不超过36个字段且唯一</code>。</p>
    <p><b>每个账户最多可同时持有500个活动订单。这是针对合约的，因此可以允许出现例如：账户同时持有300个BTCUSDT的活动单、280个ETHUSDT合约的活动单。</b></p>
    <p><b>当您达到订单上限的时候的时候，仍然可以下单设置了参数<code>reduce_only</code> 或 <code>close_on_trigger</code>的订单。</b></p>

  linear_row_comment_basePrice: 当前市价。用于和stop_px值进行比较，确定当前条件委托是看空到<code>stop_px</code>时触发还是看多到stop_px触发。主要是用来标识当前条件单预期的方向
  linear_row_comment_stopPx: 触发价格

  setautoaddmargin: 自动追加保证金
  linear_account_para_setAutoAddMargin: 设置自动追加保证金。
  linear_row_comment_set_auto_margin: 追加保证金开关

  linear_account_para_setLeverage: 设置杠杆
  linear_row_comment_leverage: <code>杠杆大于0，小于风险限额对应的杠杆</code>

  marginswitch: 全仓/逐仓切换
  linear_account_para_switchIsolated: 全仓/逐仓切换，从全仓切换至逐仓时需要传杠杆
  linear_row_comment_switch_isolated: 全仓/逐仓, true是逐仓，false是全仓

  linearAddMargin: 追加保证金
  linear_account_para_addMargin: 追加保证金
  linear_account_row_comment_margin: 增加/减少多少保证金,增加10，减少-10，支持小数后4位

  ## inverse Perpetual
  account_aside_switchpositionmode: 仅在Testnet环境可用

  ### inverse futures
  switchpositionmode: 切换仓位模式
  account_para_switchpositionmode: 单仓模式下，只能在单方向下持仓<br/>双仓模式下，可以同时在两个方向持仓。
  row_comment_positionmode: 仓位模式<span>:</span> 0 - 单仓模式  3 - 双仓模式
  futures_row_comment_leverage: <code>杠杆大于0，小于风险限额对应的杠杆</code>
  inverse_row_comment_leverage: 全仓/逐仓切换，从全仓切换至逐仓时需要传杠杆并且<code>buy_leverage</code>和<code>sell_leverage</code>必须传入相同参数；<b>目前逐仓切全仓设置杠杆无效</b>。
  futures_account_para_switchIsolated: 全仓/逐仓切换，从全仓切换至逐仓时需要传杠杆
  futures_row_comment_switch_isolated: 全仓/逐仓, true是逐仓，false是全仓
  getrisklimit: 查询风险限表

  ### 正向websocket
  linear_websocket_para_endpoint: |
    Websocket服务器地址:
    <ul>
    <p>
      <li>测试网公共topic地址:
        <span id="testnet_address">wss://stream-testnet.bybit.com/realtime_public</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
      <li>测试网私有topic地址:
        <span id="testnet_address">wss://stream-testnet.bybit.com/realtime_private</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#testnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
    <p>
      <li>主网公共topic地址(请根据您的网络情况选择以下任意一个地址使用):<br/>
        <span id="mainnet_address">wss://stream.bybit.com/realtime_public</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        <br/>
        <span id="mainnet_address_2">wss://stream.bytick.com/realtime_public</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
     <p>
      <li>主网私有topic地址(请根据您的网络情况选择以下任意一个地址使用):<br/>
        <span id="mainnet_address">wss://stream.bybit.com/realtime_private</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
        <br/>
        <span id="mainnet_address_2">wss://stream.bytick.com/realtime_private</span>
        <button class="clipboard_button" data-clipboard-action="copy" data-clipboard-target="#mainnet_address_2"><img src="/images/copy_to_clipboard.png" height=15 width=15></img></button>
      </li>
    </p>
    </ul>

  ### wallet
  websocketwallet: 钱包

  ## order-list 查询不支持多状态查询
  linear_account_row_comment_orderStatus: 指定订单状态查询订单列表。不传该参数则默认查询所有状态订单。该参数支持多状态查询，状态之间用英文逗号分割。

  ## change-log
  linear_update_20200331: <code>order_status</code> 参数不再支持多条件查询。
  linear_update_20200331_ws_ob: 修复orderBook更新包数据错乱的问题
  fundingrate: 查询上个周期的资金费率
  linear_kline_row_comment_limit_200: 最大200. 默认每页200条
  linear_order___20200403: 返回值中增加参数 <code>reduce_only</code>
  linear_poistion___20200403: 增加可平量参数<code>free_qty</code>
  linear_order_fix_order_type___20200403: 修复市价单order_type显示值
  linear_exec_type: 交易类型
  exec_type_pnl: 交易类型(不能为"Funding")
  closedprofitandloss: 平仓盈亏
  switchmode: 切换止盈止损模式
  switchmode_aside: 当设置部分止盈止损模式时，止盈或者止损的订单数量可以小于仓位大小, 请使用<a href="#t-tradingstop">Trading-Stop endpoint</a>。
  addmargin: 增加/减少保证金
  restapi_update_20200414: 更新 <code>BTCUSDT</code> 合约信息
  linear_private_trade_records: 获取用户成交记录，按时间降序排列。
  linear_private_closed_pnl_records: 获取用户平仓记录，按时间降序排列。
  linear_private_switchmode: 切换止盈止损模式至全仓或部分
  linear_row_comment_limit: 每页数量, 最大50. 默认每页20条，最多50条每页
  linear_row_comment_limit_50_200: 每页数量, 最大200. 默认每页50条，最多200条每页
  restapi_update_20200417_1: 新增 <code>BTCUSDT</code> 至orderbook
  restapi_update_20200417_2: 新增 <code>BTCUSDT</code> 至合约最新信息
  restapi_update_20200417_3: 新增 <code>trade_time_ms</code> 字段
  restapi_update_20200417_4: 更新请求参数 <code>start_time</code> 支持毫秒
  restapi_update_20200417_5: 废弃返回参数 <code>trade_time</code>
  restapi_update_20200418_1: 修复只读权限下，以下接口无法访问的bug：
  restapi_update_20200418_2: 返回值中增加参数，如 <code>exec_price</code>,<code>exec_value</code>
  restapi_update_20200427_1: 默认返回值中增加<code>BTCUSDT</code>
  restapi_update_20200429_1: 新增请求参数<code>order</code>
  restapi_update_20200429_2: 修复某些情况下<code>inviter_id</code>总是为0的bug
  restapi_update_20200518_1: <code>order_status</code> 支持多状态查询，状态之间用英文逗号分割。
  restapi_update_20200518_2: 新增返回字段 <code>interval</code>, <code>open_time</code>, <code>turnover</code> 字段
  restapi_update_20200518_3: 废弃返回参数 <code>period</code>, <code>start_at</code>
  restapi_update_20200630_1: 更新请求参数 <code>coin</code> 如果不传参数 返回所有钱包余额
  restapi_update_20200630_2: 返回值数量最大值从50调整到200
  restapi_update_20200826_1: 支持设置止盈止损，请求参数增加 <code>take_profit</code>, <code>stop_loss</code>, <code>tp_trigger_by</code>, <code>sl_trigger_by</code>
  restapi_update_20200826_3: 返回参数增加 <code>take_profit</code>, <code>stop_loss</code>, <code>tp_trigger_by</code>, <code>sl_trigger_by</code>
  restapi_update_20200826_2: 返回参数增加<code>tp_sl_mode</code>
  restapi_update_20200826_4: 支持创建部分止盈止损单,请求参数增加<code>sl_size</code>, <code>tp_size</code>
  restapi_update_20200826_5: 支持撤销止盈止损单
  restapi_update_20200826_6: 支持修改止盈止损单信息,请求参数增加<code>take_profit</code>, <code>stop_loss</code>, <code>tp_trigger_by</code>, <code>sl_trigger_by</code>
  restapi_update_20200927_1: 支持<code>order_link_id</code>修改订单
  restapi_update_20200915_1: 修复<a href="#t-marketaccountratio">用户多空持仓比率</a>数据错误
  restapi_update_20200915_2: 创建条件市价单时，返回字段<code>time_in_force</code>的值由<code>GoodTillCancel</code>修复为<code>ImmediateOrCancel</code>(<code>ImmediateOrCancel</code>是实际的执行策略)
  ws_update_20200927_1: 新增Websocket域名
  restapi_update_20201012_1: 修复未返回<code>Deactivated</code>状态条件单的问题
  restapi_update_20201012_2: 修复已成交订单<code>cum_exec_fee</code>字段错误的问题
  restapi_update_20201021_1: 修复<code>usdt</code> <code>given_cash</code>和<code>service_cash</code>总是为0的问题
  restapi_update_20201021_2: USDT合约上线新交易对：<a href="#symbol-symbol">ETHUSDT、LINKUSDT、LTCUSDT、XTZUSDT</a>
  restapi_update_20201021_3: 支持根据价格类型设置止盈止损
  restapi_update_20201026_1: 返回参数中新增字段<code>is_isolated</code>，用于判断当前仓位是否是逐仓模式
  restapi_update_20201102_1: 参数<code>symbol</code>改为非必传；如果不指定<code>symbol</code>则返回所有交易对的持仓信息
  restapi_update_20201111_1: 旧版API将在2020年12月10日进行废弃处理。届时旧版API的频率限制将会降低到原有的1/2，并在12月17日彻底下线。
  restapi_update_20201111_2: 废弃接口将于2020年11月30日彻底下线
  restapi_update_20201112_1: <code>order_status</code> 支持多状态查询，状态之间用英文逗号分割。
  restapi_update_20201112_2: <code>stop_order_status</code> 支持多状态查询，状态之间用英文逗号分割。
  restapi_update_20201116_1: 返回参数中新增字段 <code>is_isolated</code> 和 <code>auto_add_margin</code>，用于判断当前仓位是否是逐仓模式以及是否开启自动追加保证金
  restapi_update_20201116_2: 返回参数中新增字段 <code>base_price</code> 和 <code>trigger_by</code>
  restapi_update_20201120_1: 返回参数中新增字段<code>trigger_by</code>
  restapi_update_20201203_5: 实时查询支持返回多个未成交订单数据
  restapi_update_20201203_6: 实时查询支持返回多个未成交订单数据
  restapi_update_20201203_1: 返回参数中新增字段 <code>deleverage_indicator</code> 和 <code>unrealised_pnl</code>
  restapi_update_20201203_2: 返回参数中新增字段 <code>close_on_trigger</code>
  restapi_update_20201203_4: 返回参数中新增字段 <code>close_on_trigger</code> 和 <code>reduce_only</code>
  restapi_update_20201214_1: USDT合约上线新交易对：<a href="#symbol-symbol">BCHUSDT</a>
  restapi_update_20201231_0: 服务升级后新增<code>v2</code>接口路由，列表如下：
  restapi_update_20201231_1: <code>/user/leverage/save</code> <code>此接口不再推荐使用。</code>
  restapi_update_20201231_2: <code>/open-api/wallet/fund/records</code> <code>此接口不再推荐使用。</code>
  restapi_update_20201231_3: <code>/open-api/wallet/withdraw/list</code> <code>此接口不再推荐使用。</code>
  restapi_update_20201231_4: <code>/position/change-position-margin</code> <code>此接口不再推荐使用。</code>
  restapi_update_20201231_5: <code>/open-api/api-key</code> <code>此接口不再推荐使用。</code>
  restapi_update_20201231_6: <code>/open-api/position/trading-stop</code> <code>此接口不再推荐使用。</code>
  restapi_update_20201231_7: <code>/open-api/funding/prev-funding-rate</code> <code>此接口不再推荐使用。</code>
  restapi_update_20201231_8: <code>/open-api/funding/prev-funding</code> <code>此接口不再推荐使用。</code>
  restapi_update_20201231_9: <code>/open-api/funding/predicted-funding</code> <code>此接口不再推荐使用。</code>
  restapi_update_20201231_1_1: 新增：<code>/v2/private/position/leverage/save</code>
  restapi_update_20201231_2_2: 新增：<code>/v2/private/wallet/fund/records</code>
  restapi_update_20201231_3_3: 新增：<code>/v2/private/wallet/withdraw/list</code>
  restapi_update_20201231_4_4: 新增：<code>/v2/private/position/change-position-margin</code>
  restapi_update_20201231_5_5: 新增：<code>/v2/private/account/api-key</code>
  restapi_update_20201231_6_6: 新增：<code>/v2/private/position/trading-stop</code>
  restapi_update_20201231_7_7: 新增：<code>/2/private/funding/prev-funding-rate</code>
  restapi_update_20201231_8_8: 新增：<code>/v2/private/funding/prev-funding</code>
  restapi_update_20201231_9_9: 新增：<code>/v2/private/funding/predicted-funding</code>
  restapi_update_20210125_0: <code>/v2/private/funding/prev-funding-rate</code> <code>此接口不再推荐使用。</code>
  restapi_update_20210125_0_1: 新增：<code>/v2/public/funding/prev-funding-rate</code>
  restapi_update_20210201_0_1: 阶梯保证金升级为<a href="https://help.bybit.com/hc/zh-cn/articles/900000170023-%E9%A3%8E%E9%99%A9%E9%99%90%E9%A2%9D-USDT%E6%B0%B8%E7%BB%AD-">风险限额</a>，新增以下接口
  restapi_update_20210225: 反向交割合约API发布
  restapi_update_20210301: 修改url前缀<code>future</code> 为 <code>futures</code>
  restapi_update_20210304: 修复参数<code>wallet_fund_type</code>过滤失效的问题
  restapi_update_20210311: 修复响应结果顺序的问题
  restapi_update_20210318_1: USDT合约上线新交易对：<a href="#symbol-symbol">ADAUSDT、DOTUSDT、UNIUSDT</a>
  restapi_update_20210318_2: 查询风险限额新增返回字段最大杠杆<code>max_leverage</code>
  restapi_update_20210322: 修复参数<code>start_date</code>,<code>end_date</code>过滤失效的问题
  restapi_update_20210324: 查询风险限额新增返回字段最大杠杆<code>max_leverage</code>
  restapi_update_20210430: Testnet网络，USDT合约上线新交易对：<a href="#symbol-symbol">XRPUSDT、XEMUSDT、SUSHIUSDT、AAVEUSDT</a>
  restapi_update_20210513: USDT合约上线新交易对：<a href="#symbol-symbol">XRPUSDT、XEMUSDT、SUSHIUSDT、AAVEUSDT</a>
  restapi_update_20210602: USDT合约上线新交易对：<a href="#symbol-symbol">DOGEUSDT</a>
  restapi_update_20210629: USDT合约上线新交易对：<a href="#symbol-symbol">MATICUSDT、EOSUSDT、ETCUSDT、BNBUSDT、FILUSDT、SOLUSDT</a>
  restapi_update_20210527: 请求参数增加 <code>tp_trigger_by</code>, <code>sl_trigger_by</code>
  restapi_update_20210617_1: 以参数<code>is_isolated</code>来判断全逐仓，true是逐仓，false是全仓。
  restapi_update_20210617_2: 废弃使用<code>auto_add_margin</code>来判断全逐仓。
  restapi_update_20210617_3: 不推荐使用 <a href="#t-setleverage">Set Leverage</a>接口切换全逐仓
  restapi_update_20210618_1: 2021年6月24日起，停止使用<code>leverage</code>切换全逐仓,必须大于0且小于最大可设置杠杆 <a href="https://help.bybit.com/hc/en-us/articles/360039749753-What-is-Risk-Limit-What-effect-does-the-Risk-Limit-have-on-Margin-Inverse-Contract-">risk limit leverage</a>.
  restapi_update_20210628: 返回结果中增加<code>take_profit, stop_loss, trailing_stop</code>三个新字段。
  restapi_update_20210628_1: 修复<code>BCHUSDT</code> and <code>UNIUSDT</code>字段<code>min_price,tick_size</code>值不对的问题


  ws_update_20210202_0: 新增字段<code>reduce_only</code>和<code>close_on_trigger</code>
  ws_update_20210202_1: 新增字段<code>close_on_trigger</code>

  ws_update_20210202_2: 新增字段<code>reduce_only</code>,<code>close_on_trigger</code>
  ws_update_20210225: websocket支持交割合约
  restapi_update_20210312: 修复 <a href="#t-usertraderecords">User Trade Record</a>接口返回值<code>exec_type,last_liquidity_ind</code> 值不对的问题
  restapi_update_20210315: 2020年12月31日前，市价单返回的订单价格是下单时刻的最新市场价；自2020年12月31日起，市价单返回的订单价格是修订后的限价价格。详情可见<a href="#t-activeorders">市价活动委托说明</a>。
  restapi_update_20210402: 增加错误码描述：10016,10018,30074,30075
  linear_restapi_update_20210402: 增加错误码描述：10016,10018,130145
  restapi_update_20210407: 修复<a href="#t-query_liqrecords">查询强平订单数据</a>接口<code>price</code>字段取值，由<code>liq_price</code>改为<code>bust_price</code>，关于强平订单，请参考<a href="https://help.bybit.com/hc/zh-cn/articles/360039261474-%E5%BC%BA%E5%88%B6%E5%B9%B3%E4%BB%93%E8%BF%87%E7%A8%8B-%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E5%BC%BA%E5%B9%B3%E4%BA%8B%E4%BB%B6-%E5%8F%8D%E5%90%91%E6%B0%B8%E7%BB%AD-">强制平仓过程</a>
  restapi_update_20210414_1: <a href="#t-getcond">查询条件委托</a>,<a href="#t-querycond">实时查询条件委托</a>,<a href="#t-getactive">查询活动委托</a>,<a href="#t-queryactive">实时查询活动委托</a>返回值新增 <code>position_idx</code>
  restapi_update_20210414_2: 修复双仓模式下，不传<code>symbol</code>参数情况下持仓列表数据不完整问题
  restapi_update_20210415: 修复<a href="#t-balance">获取钱包余额</a>接口字段<code>used_margin、order_margin、position_margin、occ_closing_fee、unrealised_pnl</code> 未计算交割持仓的问题
  restapi_update_20210422: 废弃字段self_ratio与platform_ratio，现阶段返回值均为0
  restapi_update_2021050701: 新增：<code>v2/private/position/switch-mode</code>
  restapi_update_2021050702: 新增：<code>v2/private/position/switch-isolated</code>
  restapi_update_2021050703: 新增字段<code>buy_leverage</code>,<code>sell_leverage</code>
  restapi_update_2021050704: <code>leverage</code> - <b>不推荐使用</b>
  restapi_update_20210511: 新增：<code>v2/private/position/risk-limit</code>
  restapi_update_2021051101: 新增：<code>v2/public/risk-limit/list</code>
  restapi_update_2021050705: <a href="#t-setleverage">修改杠杆接口</a> 废弃字段<code>position_idx</code>
  restapi_update_2021050706: <a href="#t-marginswitch">全仓/逐仓切换接口</a> 废弃字段<code>position_idx</code>
  restapi_update_2021051201: <a href="#t-setleverage">修改杠杆接口</a> 废弃字段<code>position_idx</code>
  restapi_update_2021051202: <a href="#t-marginswitch">全仓/逐仓切换接口</a> 废弃字段<code>position_idx</code>
  restapi_update_2021051203: 新增：<code>futures/private/position/risk-limit</code>
  restapi_update_20210517: 新增：<code>futures/private/position/risk-limit</code>
  restapi_update_20210520: ETH反向交割合约发布
  restapi_update_20210527: 新增现货open-api文档
  restapi_update_20210617: 新增获取交易币对接口，修改接口参数order_link_id为orderLinkId

  markpricekline: 标记价格K线
  linear_query_mark_price_kline: 查询标记价格K线
  linear_resp_field_last_exec_price: 最近成交价格
  linear_resp_field_cum_exec_qty: 累计成交数量
  linear_resp_field_cum_exec_value: 累计成交价值
  linear_resp_field_cum_exec_fee: 累计成交手续费
  linear_resp_field_reduce_only: 是否平仓单 true-平仓 false-开仓
  linear_resp_field_position_value: 当前仓位价值
  linear_resp_field_entry_price: 平均开仓价
  linear_resp_field_liq_price: 强平价格
  linear_resp_field_bust_price: 破产价格
  linear_resp_field_position_margin: 仓位保证金
  linear_resp_field_occ_closing_fee: 预占用平仓手续费
  linear_resp_field_realised_pnl: 当日已结盈亏
  linear_resp_field_cum_realised_pnl: 累计已结盈亏
  linear_resp_field_free_qty: 可平仓位数量
  linear_resp_tp_sl_mode: 止盈止损模式
  linear_resp_field_closed_size: 对应的平仓数值
  linear_resp_field_cum_entry_value: 被平掉的仓位价值
  linear_resp_field_avg_entry_price: 平均入场价
  linear_resp_field_cum_exit_value: 平仓订单累计成交价值
  linear_resp_field_avg_exit_price: 平均出场价
  linear_resp_field_closed_pnl: 与平仓size等比例对应的盈亏
  linear_resp_field_fill_count: 成交笔数
  linear_row_comment_recent_trading_records_limit: 返回条数，最大1000，默认500

  inverse_query_index_price_kline: 指数价格K线
  inverse_query_premium_indices_kline: 溢价K线

  linear_testnet_only: 仅testnet环境

  # Inverse Futures
  inverse_futures: 反向交割
  first_quarter: 一季度
  second_quarter: 二季度
  third_quarter: 三季度
  fourth_quarter: 四季度
  trading_symbol_comment: 您可以根据<a href="#t-querysymbol">Query Symbol</a>接口获取所有交易中的symbol


  # abandoned endpoints
  a_getleverage: 用户杠杆
  a_setleverage: 修改杠杆
  replace_by_new: 请使用新接口
  replace_by_new_topic: 请使用新topic


  # spot
  spot: 现货(testnet)
  spotOPrice: 订单价格
  spotOrderCreate: 创建订单
  spotAccountId: 账户ID
  spotExchangeId: 币对交易ID
  spotSymbol: 币对名称
  spot_Alias: 币对别名
  spotBaseCurrency: base币种
  spotQuoteCurrency: quote币种
  spotBasePrecision: base币种精度
  spotQuotePrecision: quote币种精度
  spotMinTradeQuantity: 最小订单数量
  spotMinTradeAmount: 最小订单额
  spotMinPricePrecision: 最小价格精度
  spotCategory: symbol 所在分区:1主类别

  spotId: 交易ID
  spotQty: |
    交易数量(<b>市价买单即<code>type=Market</code>且<code>side=Buy</code>时qty指的是quote currency；比如BTCUSDT的qty指的是USDT的qty, 而非市价买单时qty指向都是BTC</b>)
  spotTransactTime: 交易时间戳
  spotCommission: 交易手续费
  spotCommissionAsset: 交易手续费币种
  spotIsBuyer: true= Buyer false= Seller
  spotIsMaker: true=Maker false=Taker
  spotSymbolName: 现货币对名称
  spotIcebergQty: 最小允许数量
  spotCummulativeQuoteQty: 对于某些历史数据 `cummulativeQuoteQty` 可能会 < 0, 这说明数据当前不可用。
  spotStopPrice: 停止价
  spot_kline_interval: K线图区间。可识别发送的值为：1m, 5m, 15m, 30m, 1h, 1d, 1W, 1M (m=分钟, h=小时, d=天, w=星期, M=月)
  spotTime: 订单生成时的时间戳
  spotOrderLinkId: 订单ID
  spotTradeId: 交易ID
  spotIsWorking: 是否生效
  spotUpdateTime: 订单上次更新的时间戳
  spotQuantity: 最佳买价数量
  spotBidQuantity: 最佳买价数量
  spotAskQuantity: 最佳卖价数量
  spotSide: 订单方向, BUY(买入做多)/SELL(卖出做空)
  spotOrderType: 订单类型, LIMIT/MARKET/LIMIT_MAKER
  spotTimeInForce: 订单时间指令（Time in Force）。可能出现的值为：GTC（Good Till Canceled，一直有效），FOK（Fill or Kill，全部成交或者取消），IOC（Immediate or Cancel，立即成交或者取消）
  spotPrice: 订单价格，对于LIMIT 订单必需发送
  spotOrderID: 订单ID
  spotFees: 订单的手续费
  spotOriQty: 订单数量
  spotFeeTokenId: 手续费类型（Token名称）
  spotExecQty: 请忽略
  spotAvgPrice: 订单已成交的平均价格
  spotType: 订单类型。可能出现的值只能为:LIMIT(限价)和MARKET（市价）
  spotStatus: 订单状态。可能出现的值为：NEW(新订单，无成交)、PARTIALLY_FILLED（部分成交）、FILLED（全部成交）、CANCELED（已取消）和REJECTED（订单被拒绝）.
  tOrderClientOrdID: 特殊订单ID，用户自己生成
  spot_get_order: 查询订单
  cancel_spot_order: 撤销订单
  batch_cancel_spot_order: 批量撤销订单
  spot_order_list: 订单列表
  spot_order_list_limit: 默认500；最大1000
  spot_orders_start_time: 第一条返回的时间戳(毫秒)
  spot_orders_end_time: 最后一条返回的时间戳(毫秒)
  spot_history_orders: 历史订单
  spotLeverage: 订单杠杆
  spotMarginLocked: 该订单锁定的保证金。这包括实际需要的保证金外加开仓和平仓所需的费用
  spotPriceType: 价格类型（INPUT、OPPONENT、QUEUE、OVER、MARKET）
  spotFeeToken: 手续费计价类型
  spotFee: 实际手续费
  spot_my_trades: 交易记录
  spot_from_id: 从此tradeId 开始查询
  spot_to_id: 以此tradeId为终点
  spot_balance: 账号余额
  spot_token: 币种
  spot_total: 总额
  spot_fees: 手续费
  spot_fee: 手续费
  spot_fee_symbol: 手续费币种
  spot_locked: 冻结余额
  spot_depth_limit: 默认40，最大40
  spot_depth_time: 当前时间
  spot_depth_bids: bid的价格和数量信息，最优bid价格由上到下排列
  spot_depth_asks: ask的价格和数量信息，最优ask价格由上到下排列
  mergedOrderBook: 合并订单簿
  spot_trades: 最近成交
  spot_OrderPrice: 价格
  spot_trades_limit: 默认500， 最大1000
  spot_is_buyer_maker: true为买单， false为卖单
  spot_trade_time: 当前Unix时间戳，毫秒(ms)
  spot_klines: K线
  spotTicker: 24小时ticker价格变化数据
  spot_best_bid_price: 最佳买价
  spot_best_ask_price: 最佳卖价
  spot_last_price: 最新成交价
  spot_open_price: 开盘价
  spot_high_price: 最高价
  spot_low_price: 最低价
  spotSymbolPrice: Symbol最新价
  spotBestTicker: 最佳买卖价
  spotRealtimeInterval: 时间间隔
  spotOpen: 开盘价
  spotHigh: 最高价
  spotLow: 最低价
  spotClose: 收盘价
  spotVolume: 合约交易金额
  spotTrades: 交易数量（张数）
  spotTakerBaseVolume: 买方购买金额
  spotTakerQuoteVolume: 买方购买数量（张数）
  spot_ticket_id: ticket id
  spot_match_order_id: 撮合订单id
  spot_account_id: 账户id
  spot_match_account_id: 撮合账户id

  row_parameter_type: <a href="#type-type">type</a>
  row_parameter_timeInForce: <a href="#timeinforce-timeinforce">timeInForce</a>

  #spot_ws_v1
  spot_price: 价格
  spot_symbol: 币对
  spot_quantity: 数量
  spot_side: true买, false卖
  spot_order_type: 订单类型, LIMIT/MARKET/LIMIT_MAKER/MARKET OF QUOTE
  spot_order_client_id: 用户创建orderid
  spot_order_status: 订单状态 NEW - 新订单、暂无成交，PARTIALLY_FILLED - 部分成交，FILLED - 完全成交，CANCELED - 已取消，PENDING_CANCEL - 等待取消，REJECTED - 被拒绝
  spot_first: 是否首次返回
  spot_timestamp: 时间戳
  spot_timestamp_kline: k线开始时间
  spot_time_in_force: 订单时间指令（Time in Force）。可能出现的值为：GTC（Good Till Canceled，一直有效），FOK（Fill or Kill，全部成交或者取消），IOC（Immediate or Cancel，立即成交或者取消）
  spot_close: 收盘价
  spot_high: 最高价
  spot_low: 最低价
  spot_open: 开盘价
  spot_volume: 成交量
  spot_quota_volume: 成交额
  spot_version: 版本号
  spot_buy: 买一价、数量
  spot_sell: 卖一价、数量
  spot_binary: 是否压缩 true压缩, false未压缩（默认）
  spot_kline_type: k线间隔
  spot_buy_price: 买一价价格
  spot_buy_qty: 买一价数量
  spot_sell_price: 卖一价价格
  spot_sell_qty: 卖一价数量
  spot_binance_change: 余额变化
  spot_asset: 资产名称
  spot_available_qty: 可用数量
  spot_frezen_qty: 冻结数量
  spot_event_type: 事件类型
  spot_allow_trade: 允许交易
  spot_allow_withdraw: 允许提现
  spot_allow_deposit: 允许充值
  spot_cumulative_trade: 累计成交数额
  spot_event_timestamp: 事件时间
  spot_order_create_timestamp: 订单创建时间
  spot_order_id: 订单id
  spot_recent_qty: 最近成交数量
  spot_cumulative_qty: 累计成交数量
  spot_recent_price: 最近成交价格
  spot_free: 手续费
  spot_free_symbol: 手续费币种
  spot_m: is maker
  spot_u: is maker
  spot_w: is maker
  spot_gains: 涨幅
  spot_websocket_trade_v1: 逐笔交易
  spot_websocket_trade_desc_v1: |
    <p>逐笔交易推送每一笔成交的信息。成交，或者说交易的定义是仅有一个吃单者与一个挂单者相互交易。</p>
    <p>在成功连接到服务器后，服务器首先会推送一条最近的60条成交。在这条推送之后，每条推送都是实时的成交。</p>
    <p>变量“v”可以理解成一个交易ID。这个变量是全局递增的并且独特的。例如：假设过去5秒有3笔交易发生，分别是ETHUSDT、BTCUSDT、BHTBTC。它们的“v”会为连续的值（112，113，114）。</p>

  spot_websocket_ticker_v1: Symbol的Ticker
  spot_websocket_ticker_desc_v1: 按Symbol逐秒刷新的24小时完整ticker信息。
  spot_websocket_kline_v1: K线/蜡烛图
  spot_websocket_kline_desc_v1: |
    <p>K线stream逐秒推送所请求的K线种类(最新一根K线)的更新</p>
    <p>订阅Kline需要提供间隔参数，最短为分钟线，最长为月线。支持以下间隔:</p>
    <p>m -> 分钟; h -> 小时; d -> 天; w -> 周; M -> 月</p>
      <ul>
      <li>1m</li>
      <li>3m</li>
      <li>5m</li>
      <li>15m</li>
      <li>30m</li>
      <li>1h</li>
      <li>2h</li>
      <li>4h</li>
      <li>6h</li>
      <li>12h</li>
      <li>1d</li>
      <li>1w</li>
      <li>1M</li>
      </ul>

  spot_broker_info: brokerinfo数据返回
  spot_websocket_orderbook_v1: 订单簿(全量深度)
  spot_websocket_orderbook_desc_v1: |
    <p>这里是订单簿快照推送的详细信息：</p>
    <ul>
      <li>订单簿快照频率：每300ms, 如果book变了的话。</li>
      <li>订单簿快照频率深度：bids 和 asks各300</li>
      <li>订单簿版本变更触发事件：
        <ul>
          <li>订单进入订单簿</li>
          <li>订单离开订单簿</li>
          <li>订单数量变更</li>
          <li>订单已完成</li>
        </ul>
      </li>
    </ul>
    <p>这个订阅会推送全量深度信息，因此数据量大。如果想要推送评率更快，请订阅合并深度。</p>

  spot_websocket_orderbook_merge_v1: 订单簿(合并深度)
  spot_websocket_orderbook_merge_desc_v1: 这个订阅必须传dumpScale（合并精度）这个参数。dumpScale不能大于ticker的精度。你可以在brokerInfo这个端点查询ticker的精度信息。

  spot_websocket_orderbook_delta_v1: 订单簿(增量深度)
  spot_websocket_orderbook_delta_desc_v1: |
    <p>每秒推送订单簿的变化部分（如果有）。</p>
    <p>在增量深度信息中，数量不一定等于对应价格的数量。如果数量=0，这说明在上一条推送中的这个价格已经没有了。如果数量>0，这时的数量为更新后的这个价格所对应的数量。</p>
    <p>假设我们收到的返回数据中有这样一条：</p>
    <p>&nbsp;&nbsp;> ["0.00181860", "155.92000000"] // 价格，数量</p>
    <p>如果下一条返回数据中有：</p>
    <p>&nbsp;&nbsp;> ["0.00181860", "12.3"]</p>
    <p>这说明这个价格对应的数量有变更，已经更新变更的数量。</p>
    <p>如果下一条返回数据中有：</p>
    <p>&nbsp;&nbsp;> ["0.00181860", "0"]</p>
    <p>这说明这个价格对应的数量已经消失，将会在客户端中删除。</p>

  spot_websocket_many_symbol_desc: 支持多symbol，使用,隔开。
  spot_websocket_subscribe_desc: |
    <p>建立连接后, 可以通过发送JSON请求来订阅topic. 请求格式如下:</p>
    <p>ws.send('{"symbol":"BTCUSDT","topic":"trade","event":"sub","params":{"binary":false}}');</p>
    <p>支持多币种，用','隔开</p>
    <p>ws.send('{"symbol":"BTCUSDT,ETHUSDT","topic":"trade","event":"sub","params":{"binary":false}}');</p>

  #用户
  spot_websocket_user_account: 账户变更
  spot_websocket_user_account_desc: 使用 outboundAccountInfo event进行账户更新。
  spot_websocket_user_order: 订单更新
  spot_websocket_user_order_desc: 订单通过executionReport事件进行更新。详细说明信息请查看这里。通过将Z除以z可以找到平均价格。
  spot_websocket_ticket_info: TicketInfo

  #spot_ws_v2
  spot_websocket_ticker_v2: 订单簿的Ticker
  spot_websocket_ticker_desc_v2: '最优买一卖一价'

  spot_websocket_kline_v2: K线/蜡烛图
  spot_websocket_kline_desc_v2: |
    <p>K线stream逐秒推送所请求的K线种类(最新一根K线)的更新</p>
    <p>订阅Kline需要提供间隔参数，最短为分钟线，最长为月线。支持以下间隔:</p>
    <p>m -> 分钟; h -> 小时; d -> 天; w -> 周; M -> 月</p>
      <ul>
      <li>1m</li>
      <li>3m</li>
      <li>5m</li>
      <li>15m</li>
      <li>30m</li>
      <li>1h</li>
      <li>2h</li>
      <li>4h</li>
      <li>6h</li>
      <li>12h</li>
      <li>1d</li>
      <li>1w</li>
      <li>1M</li>
      </ul>

  spot_websocket_trade_v2: 逐笔交易
  spot_websocket_trade_desc_v2: |
    <p>逐笔交易推送每一笔成交的信息。成交，或者说交易的定义是仅有一个吃单者与一个挂单者相互交易。</p>
    <p>在成功连接到服务器后，服务器首先会推送一条最近的60条成交。在这条推送之后，每条推送都是实时的成交。</p>
    <p>变量“v”可以理解成一个交易ID。这个变量是全局递增的并且独特的。例如：假设过去5秒有3笔交易发生，分别是ETHUSDT、BTCUSDT、BHTBTC。它们的“v”会为连续的值（112，113，114）。</p>

  spot_websocket_orderbook_v2: 订单簿(全量深度)
  spot_websocket_orderbook_desc_v2: |
    <p>Symbol的深度信息。</p>
    <p>这里是订单簿快照推送的详细信息：</p>
    <ul>
      <li>订单簿快照频率：每300ms, 如果book变了的话。</li>
      <li>订单簿快照频率深度：bids 和 asks各300</li>
      <li>订单簿版本变更触发事件：
        <ul>
          <li>订单进入订单簿</li>
          <li>订单离开订单簿</li>
          <li>订单数量变更</li>
          <li>订单已完成</li>
        </ul>
      </li>
    </ul>
    <p>这个订阅会推送全量深度信息，因此数据量大。如果想要推送评率更快，请订阅合并深度。</p>

  spot_websocket_symbol_ticker_v2: symbol的Ticker
  spot_websocket_symbol_ticker_desc_v2: ''
